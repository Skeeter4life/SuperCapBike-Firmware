
SuperCapBike-Firmware-ATMEGA328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001b4e  00001be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080011c  0080011c  00001bfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc8  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ec  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce4  00000000  00000000  000035fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  000042e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000697  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000070d  00000000  00000000  00004cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000053c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e4       	ldi	r30, 0x4E	; 78
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 35       	cpi	r26, 0x51	; 81
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 94 00 	call	0x128	; 0x128 <main>
      9e:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <EEPROM_Ready_ERROR>:

 EEPROM_Ready_ERROR:
	
	; Pop EEPROM_READ / EEPROM_WRITE return address

	POP r18
      a6:	2f 91       	pop	r18
	POP r19 
      a8:	3f 91       	pop	r19

	; Note: R18-R27, R30, R31 are call clobbered (no need to preserve their contents).

	LDI R24, 0xFF 	
      aa:	8f ef       	ldi	r24, 0xFF	; 255
	LDI R25, 0xFF ; Returns -1
      ac:	9f ef       	ldi	r25, 0xFF	; 255

	RET
      ae:	08 95       	ret

000000b0 <Check_Address>:


Check_Address:

	LDI r18, ATMEGA328_Address_Mask ; Requested address exceeds EEPROM address space
      b0:	2c ef       	ldi	r18, 0xFC	; 252

	AND r18, Address_H
      b2:	29 23       	and	r18, r25

	CPI r18, 0
      b4:	20 30       	cpi	r18, 0x00	; 0

	BRNE EEPROM_Ready_ERROR
      b6:	b9 f7       	brne	.-18     	; 0xa6 <EEPROM_Ready_ERROR>

	RET
      b8:	08 95       	ret

000000ba <EEPROM_Wait>:

EEPROM_Wait:

	IN r18, EECR
      ba:	2f b3       	in	r18, 0x1f	; 31
	SBRC r18, 1
      bc:	21 fd       	sbrc	r18, 1
	RJMP EEPROM_Wait
      be:	fd cf       	rjmp	.-6      	; 0xba <EEPROM_Wait>
	RET 
      c0:	08 95       	ret

000000c2 <Check_EEPROM_State>:

Check_EEPROM_State:

	SBIC EECR, 1 ; Ensure EEPROM is not being written to
      c2:	f9 99       	sbic	0x1f, 1	; 31
	
	RJMP EEPROM_Ready_ERROR
      c4:	f0 cf       	rjmp	.-32     	; 0xa6 <EEPROM_Ready_ERROR>

	IN r18, SPMCSR
      c6:	27 b7       	in	r18, 0x37	; 55

	SBRC r18, 0 ; Ensure flash is not being written to by the bootloader (not relevent but mind as well for the future)
      c8:	20 fd       	sbrc	r18, 0

	RJMP EEPROM_Ready_ERROR
      ca:	ed cf       	rjmp	.-38     	; 0xa6 <EEPROM_Ready_ERROR>

	RJMP Check_Address
      cc:	f1 cf       	rjmp	.-30     	; 0xb0 <Check_Address>

000000ce <EEPROM_Read>:

EEPROM_Read:
	
	RCALL Check_EEPROM_State
      ce:	f9 df       	rcall	.-14     	; 0xc2 <Check_EEPROM_State>

	; valid EEPROM read request

	OUT EEARH, Address_H
      d0:	92 bd       	out	0x22, r25	; 34

	OUT EEARL, Address_L
      d2:	81 bd       	out	0x21, r24	; 33

	; SBI EECR, 3 ; Enable EEPROM interrupts

	CLI ; Disable global interrupt bit
      d4:	f8 94       	cli

	SBI EECR, 0 ; Set read bit
      d6:	f8 9a       	sbi	0x1f, 0	; 31

	; Reads the EEPROM...

	IN EEPROM_Data, EEDR
      d8:	60 b5       	in	r22, 0x20	; 32

	SEI ; Enable interrupts
      da:	78 94       	sei

	MOV r24, EEPROM_Data 
      dc:	86 2f       	mov	r24, r22
	
	ldi r25, 0 ; return EEDR, EEPROM read successful
      de:	90 e0       	ldi	r25, 0x00	; 0

	RET
      e0:	08 95       	ret

000000e2 <EEPROM_Write>:
			
EEPROM_Write:

	RCALL Check_EEPROM_State
      e2:	ef df       	rcall	.-34     	; 0xc2 <Check_EEPROM_State>

	; valid EEPROM write request

	OUT EEARH, Address_H
      e4:	92 bd       	out	0x22, r25	; 34

	OUT EEARL, Address_L
      e6:	81 bd       	out	0x21, r24	; 33

	OUT EEDR, EEPROM_Data
      e8:	60 bd       	out	0x20, r22	; 32

	; SBI EECR, 3 ; Enable EEPROM interrupts
	
	CLI 
      ea:	f8 94       	cli

	SBI EECR, 2; Set EEPROM master write enable
      ec:	fa 9a       	sbi	0x1f, 2	; 31

	SBI EECR, 1 ; Write to EEPROM
      ee:	f9 9a       	sbi	0x1f, 1	; 31
	
	; Writes to the EEPROM...

	SEI 
      f0:	78 94       	sei

	RCALL EEPROM_Wait
      f2:	e3 df       	rcall	.-58     	; 0xba <EEPROM_Wait>

	ldi r25, 1 ; return 1, EEPROM write successful
      f4:	91 e0       	ldi	r25, 0x01	; 1

	RET
      f6:	08 95       	ret

000000f8 <__vector_22>:

#include "../Headers/EEPROM.h"

volatile bool EEPROM_Ready = false; // Not used

ISR(EE_READY_vect){ // Not used
      f8:	1f 92       	push	r1
      fa:	0f 92       	push	r0
      fc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     100:	0f 92       	push	r0
     102:	11 24       	eor	r1, r1
     104:	8f 93       	push	r24
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
	
	EEPROM_Ready = true;
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
		
     114:	00 00       	nop
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	8f 91       	pop	r24
     11c:	0f 90       	pop	r0
     11e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     122:	0f 90       	pop	r0
     124:	1f 90       	pop	r1
     126:	18 95       	reti

00000128 <main>:

const uint32_t F_CLK = 16000000;
const uint32_t TC_CLK = 16000000; // TC_CLK can be asynchronous to F_CLK.

int main(void)
{
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	68 97       	sbiw	r28, 0x18	; 24
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
	sei();
     13c:	78 94       	sei
	
	DDRB |= (1 << DDB0);
     13e:	84 e2       	ldi	r24, 0x24	; 36
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	24 e2       	ldi	r18, 0x24	; 36
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	21 60       	ori	r18, 0x01	; 1
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
	DDRB |= (1 << DDB1);
     150:	84 e2       	ldi	r24, 0x24	; 36
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	24 e2       	ldi	r18, 0x24	; 36
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	f9 01       	movw	r30, r18
     15a:	20 81       	ld	r18, Z
     15c:	22 60       	ori	r18, 0x02	; 2
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18
	DDRD |= (1 << DDD7);
     162:	8a e2       	ldi	r24, 0x2A	; 42
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	2a e2       	ldi	r18, 0x2A	; 42
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	f9 01       	movw	r30, r18
     16c:	20 81       	ld	r18, Z
     16e:	20 68       	ori	r18, 0x80	; 128
     170:	fc 01       	movw	r30, r24
     172:	20 83       	st	Z, r18
	DDRD |= (1 << DDD6);
     174:	8a e2       	ldi	r24, 0x2A	; 42
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	2a e2       	ldi	r18, 0x2A	; 42
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	f9 01       	movw	r30, r18
     17e:	20 81       	ld	r18, Z
     180:	20 64       	ori	r18, 0x40	; 64
     182:	fc 01       	movw	r30, r24
     184:	20 83       	st	Z, r18
	
	//bool Precisie_Mode = true;
	
	Timers Timer1 = _8_bit2;
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	89 83       	std	Y+1, r24	; 0x01
	
	bool Timer1_Set = Configure_Timer_Tick(100, u_MiliSeconds, Timer1);
     18a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <u_MiliSeconds>
     18e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <u_MiliSeconds+0x1>
     192:	cc 01       	movw	r24, r24
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	29 81       	ldd	r18, Y+1	; 0x01
     19a:	ac 01       	movw	r20, r24
     19c:	bd 01       	movw	r22, r26
     19e:	84 e6       	ldi	r24, 0x64	; 100
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 c9 05 	call	0xb92	; 0xb92 <Configure_Timer_Tick>
     1a6:	8a 83       	std	Y+2, r24	; 0x02
	
	Timers Timer2 = _8_bit1;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	8b 83       	std	Y+3, r24	; 0x03
	
	bool Timer2_Set = Configure_Timer_Tick(1000, u_MicroSeconds, Timer2);
     1ac:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <u_MicroSeconds>
     1b0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <u_MicroSeconds+0x1>
     1b4:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <u_MicroSeconds+0x2>
     1b8:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <u_MicroSeconds+0x3>
     1bc:	2b 81       	ldd	r18, Y+3	; 0x03
     1be:	ac 01       	movw	r20, r24
     1c0:	bd 01       	movw	r22, r26
     1c2:	88 ee       	ldi	r24, 0xE8	; 232
     1c4:	93 e0       	ldi	r25, 0x03	; 3
     1c6:	0e 94 c9 05 	call	0xb92	; 0xb92 <Configure_Timer_Tick>
     1ca:	8c 83       	std	Y+4, r24	; 0x04
	
	Timers Timer3 = _16_bit;
     1cc:	1d 82       	std	Y+5, r1	; 0x05
	
	bool Timer3_Set = Configure_Timer_Tick(3, u_Seconds, Timer3);
     1ce:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <u_Seconds>
     1d2:	88 2f       	mov	r24, r24
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	2d 81       	ldd	r18, Y+5	; 0x05
     1dc:	ac 01       	movw	r20, r24
     1de:	bd 01       	movw	r22, r26
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 c9 05 	call	0xb92	; 0xb92 <Configure_Timer_Tick>
     1e8:	8e 83       	std	Y+6, r24	; 0x06
	
	if(!Timer1_Set || !Timer2_Set || !Timer3_Set){
     1ea:	8a 81       	ldd	r24, Y+2	; 0x02
     1ec:	88 23       	and	r24, r24
     1ee:	31 f0       	breq	.+12     	; 0x1fc <main+0xd4>
     1f0:	8c 81       	ldd	r24, Y+4	; 0x04
     1f2:	88 23       	and	r24, r24
     1f4:	19 f0       	breq	.+6      	; 0x1fc <main+0xd4>
     1f6:	8e 81       	ldd	r24, Y+6	; 0x06
     1f8:	88 23       	and	r24, r24
     1fa:	29 f4       	brne	.+10     	; 0x206 <main+0xde>
		PORTB = (1 << PORTB1);
     1fc:	85 e2       	ldi	r24, 0x25	; 37
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	22 e0       	ldi	r18, 0x02	; 2
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
	}
	
	int16_t W1 = EEPROM_Write(0x0000, 0x1C);
     206:	6c e1       	ldi	r22, 0x1C	; 28
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_Write>
     210:	98 87       	std	Y+8, r25	; 0x08
     212:	8f 83       	std	Y+7, r24	; 0x07
	
	int16_t R1 = EEPROM_Read(0x0000);
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_Read>
     21c:	9a 87       	std	Y+10, r25	; 0x0a
     21e:	89 87       	std	Y+9, r24	; 0x09
	
	int16_t W2 = EEPROM_Write(0x0001, 0x1D);
     220:	6d e1       	ldi	r22, 0x1D	; 29
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_Write>
     22a:	9c 87       	std	Y+12, r25	; 0x0c
     22c:	8b 87       	std	Y+11, r24	; 0x0b
		
	if(!W1 || !W2 || !R1){
     22e:	8f 81       	ldd	r24, Y+7	; 0x07
     230:	98 85       	ldd	r25, Y+8	; 0x08
     232:	89 2b       	or	r24, r25
     234:	41 f0       	breq	.+16     	; 0x246 <main+0x11e>
     236:	8b 85       	ldd	r24, Y+11	; 0x0b
     238:	9c 85       	ldd	r25, Y+12	; 0x0c
     23a:	89 2b       	or	r24, r25
     23c:	21 f0       	breq	.+8      	; 0x246 <main+0x11e>
     23e:	89 85       	ldd	r24, Y+9	; 0x09
     240:	9a 85       	ldd	r25, Y+10	; 0x0a
     242:	89 2b       	or	r24, r25
     244:	29 f4       	brne	.+10     	; 0x250 <main+0x128>
		PORTB = (1 << PORTB1);
     246:	85 e2       	ldi	r24, 0x25	; 37
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	22 e0       	ldi	r18, 0x02	; 2
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
	}
	
	Ring_Buffer Buffer1;
	uint8_t Received_Data = 0;
     250:	18 8e       	std	Y+24, r1	; 0x18
	
	Init_Buffer(&Buffer1, 10, 2);
     252:	ce 01       	movw	r24, r28
     254:	0d 96       	adiw	r24, 0x0d	; 13
     256:	42 e0       	ldi	r20, 0x02	; 2
     258:	6a e0       	ldi	r22, 0x0A	; 10
     25a:	0e 94 4e 01 	call	0x29c	; 0x29c <Init_Buffer>
	
	Write_to_Buffer(&Buffer1, 0xFF);
     25e:	ce 01       	movw	r24, r28
     260:	0d 96       	adiw	r24, 0x0d	; 13
     262:	6f ef       	ldi	r22, 0xFF	; 255
     264:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Write_to_Buffer>
	
	Write_to_Buffer(&Buffer1, 0xFE);
     268:	ce 01       	movw	r24, r28
     26a:	0d 96       	adiw	r24, 0x0d	; 13
     26c:	6e ef       	ldi	r22, 0xFE	; 254
     26e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Write_to_Buffer>
		
	Read_from_Buffer(&Buffer1, &Received_Data);
     272:	9e 01       	movw	r18, r28
     274:	28 5e       	subi	r18, 0xE8	; 232
     276:	3f 4f       	sbci	r19, 0xFF	; 255
     278:	ce 01       	movw	r24, r28
     27a:	0d 96       	adiw	r24, 0x0d	; 13
     27c:	b9 01       	movw	r22, r18
     27e:	0e 94 96 02 	call	0x52c	; 0x52c <Read_from_Buffer>
	
	Read_from_Buffer(&Buffer1, &Received_Data);
     282:	9e 01       	movw	r18, r28
     284:	28 5e       	subi	r18, 0xE8	; 232
     286:	3f 4f       	sbci	r19, 0xFF	; 255
     288:	ce 01       	movw	r24, r28
     28a:	0d 96       	adiw	r24, 0x0d	; 13
     28c:	b9 01       	movw	r22, r18
     28e:	0e 94 96 02 	call	0x52c	; 0x52c <Read_from_Buffer>
	
	Free_Buffer(&Buffer1);
     292:	ce 01       	movw	r24, r28
     294:	0d 96       	adiw	r24, 0x0d	; 13
     296:	0e 94 77 02 	call	0x4ee	; 0x4ee <Free_Buffer>
	

	while (1 == true){

	}
     29a:	ff cf       	rjmp	.-2      	; 0x29a <main+0x172>

0000029c <Init_Buffer>:
 */ 

#include "../Headers/Includes.h"
#include "../Headers/Dynamic_Ring_Buffer.h"

Ring_Buffer_Status Init_Buffer(Ring_Buffer* Ring_Buffer, uint8_t Size, uint8_t Increment){
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <Init_Buffer+0x6>
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <Init_Buffer+0x8>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <Init_Buffer+0xa>
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	9c 83       	std	Y+4, r25	; 0x04
     2ac:	8b 83       	std	Y+3, r24	; 0x03
     2ae:	6d 83       	std	Y+5, r22	; 0x05
     2b0:	4e 83       	std	Y+6, r20	; 0x06
	
	if(Size == 0 
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	88 23       	and	r24, r24
     2b6:	19 f0       	breq	.+6      	; 0x2be <Init_Buffer+0x22>
	|| Increment == 0){
     2b8:	8e 81       	ldd	r24, Y+6	; 0x06
     2ba:	88 23       	and	r24, r24
     2bc:	11 f4       	brne	.+4      	; 0x2c2 <Init_Buffer+0x26>
		return FAULT;
     2be:	8f ef       	ldi	r24, 0xFF	; 255
     2c0:	3a c0       	rjmp	.+116    	; 0x336 <Init_Buffer+0x9a>
	}
	
	uint8_t* p = (uint8_t*)malloc(Size);
     2c2:	8d 81       	ldd	r24, Y+5	; 0x05
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <malloc>
     2cc:	9a 83       	std	Y+2, r25	; 0x02
     2ce:	89 83       	std	Y+1, r24	; 0x01
	
	if(p == NULL){
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	89 2b       	or	r24, r25
     2d6:	11 f4       	brne	.+4      	; 0x2dc <Init_Buffer+0x40>
		return FAULT;
     2d8:	8f ef       	ldi	r24, 0xFF	; 255
     2da:	2d c0       	rjmp	.+90     	; 0x336 <Init_Buffer+0x9a>
	}
	
	Ring_Buffer->Buffer = p;
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	29 81       	ldd	r18, Y+1	; 0x01
     2e2:	3a 81       	ldd	r19, Y+2	; 0x02
     2e4:	fc 01       	movw	r30, r24
     2e6:	31 83       	std	Z+1, r19	; 0x01
     2e8:	20 83       	st	Z, r18
		
	Ring_Buffer->Read_Index = 0;
     2ea:	8b 81       	ldd	r24, Y+3	; 0x03
     2ec:	9c 81       	ldd	r25, Y+4	; 0x04
     2ee:	fc 01       	movw	r30, r24
     2f0:	12 82       	std	Z+2, r1	; 0x02
	Ring_Buffer->Write_Index = 0;
     2f2:	8b 81       	ldd	r24, Y+3	; 0x03
     2f4:	9c 81       	ldd	r25, Y+4	; 0x04
     2f6:	fc 01       	movw	r30, r24
     2f8:	13 82       	std	Z+3, r1	; 0x03
	
	Ring_Buffer->Size = Size;
     2fa:	8d 81       	ldd	r24, Y+5	; 0x05
     2fc:	28 2f       	mov	r18, r24
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	8b 81       	ldd	r24, Y+3	; 0x03
     302:	9c 81       	ldd	r25, Y+4	; 0x04
     304:	fc 01       	movw	r30, r24
     306:	35 83       	std	Z+5, r19	; 0x05
     308:	24 83       	std	Z+4, r18	; 0x04
	Ring_Buffer->Increment = Increment;
     30a:	8b 81       	ldd	r24, Y+3	; 0x03
     30c:	9c 81       	ldd	r25, Y+4	; 0x04
     30e:	2e 81       	ldd	r18, Y+6	; 0x06
     310:	fc 01       	movw	r30, r24
     312:	26 83       	std	Z+6, r18	; 0x06
	
	Ring_Buffer->Adjusted_Size = 0;
     314:	8b 81       	ldd	r24, Y+3	; 0x03
     316:	9c 81       	ldd	r25, Y+4	; 0x04
     318:	fc 01       	movw	r30, r24
     31a:	17 82       	std	Z+7, r1	; 0x07
	Ring_Buffer->Wrap_Index = 0;
     31c:	8b 81       	ldd	r24, Y+3	; 0x03
     31e:	9c 81       	ldd	r25, Y+4	; 0x04
     320:	fc 01       	movw	r30, r24
     322:	10 86       	std	Z+8, r1	; 0x08
	Ring_Buffer->Overflow_Index = 0;
     324:	8b 81       	ldd	r24, Y+3	; 0x03
     326:	9c 81       	ldd	r25, Y+4	; 0x04
     328:	fc 01       	movw	r30, r24
     32a:	11 86       	std	Z+9, r1	; 0x09
	
	Ring_Buffer->Indexing_State = NONE;
     32c:	8b 81       	ldd	r24, Y+3	; 0x03
     32e:	9c 81       	ldd	r25, Y+4	; 0x04
     330:	fc 01       	movw	r30, r24
     332:	12 86       	std	Z+10, r1	; 0x0a

	return OK;
     334:	81 e0       	ldi	r24, 0x01	; 1
	
}
     336:	26 96       	adiw	r28, 0x06	; 6
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <Increase_Buffer>:

Ring_Buffer_Status Increase_Buffer(Ring_Buffer* Ring_Buffer){
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	00 d0       	rcall	.+0      	; 0x34e <Increase_Buffer+0x6>
     34e:	00 d0       	rcall	.+0      	; 0x350 <Increase_Buffer+0x8>
     350:	00 d0       	rcall	.+0      	; 0x352 <Increase_Buffer+0xa>
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	9e 83       	std	Y+6, r25	; 0x06
     358:	8d 83       	std	Y+5, r24	; 0x05
	
	if(Ring_Buffer == NULL){
     35a:	8d 81       	ldd	r24, Y+5	; 0x05
     35c:	9e 81       	ldd	r25, Y+6	; 0x06
     35e:	89 2b       	or	r24, r25
     360:	11 f4       	brne	.+4      	; 0x366 <Increase_Buffer+0x1e>
		return FAULT;
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	3a c0       	rjmp	.+116    	; 0x3da <Increase_Buffer+0x92>
	}
	
	uint8_t RB_Size = Ring_Buffer->Size;
     366:	8d 81       	ldd	r24, Y+5	; 0x05
     368:	9e 81       	ldd	r25, Y+6	; 0x06
     36a:	fc 01       	movw	r30, r24
     36c:	84 81       	ldd	r24, Z+4	; 0x04
     36e:	95 81       	ldd	r25, Z+5	; 0x05
     370:	89 83       	std	Y+1, r24	; 0x01
	uint8_t RB_Increment = Ring_Buffer->Increment;
     372:	8d 81       	ldd	r24, Y+5	; 0x05
     374:	9e 81       	ldd	r25, Y+6	; 0x06
     376:	fc 01       	movw	r30, r24
     378:	86 81       	ldd	r24, Z+6	; 0x06
     37a:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t* p = (uint8_t*)realloc(Ring_Buffer->Buffer, RB_Size + RB_Increment);
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	28 2f       	mov	r18, r24
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	88 2f       	mov	r24, r24
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	82 0f       	add	r24, r18
     38a:	93 1f       	adc	r25, r19
     38c:	9c 01       	movw	r18, r24
     38e:	8d 81       	ldd	r24, Y+5	; 0x05
     390:	9e 81       	ldd	r25, Y+6	; 0x06
     392:	fc 01       	movw	r30, r24
     394:	80 81       	ld	r24, Z
     396:	91 81       	ldd	r25, Z+1	; 0x01
     398:	b9 01       	movw	r22, r18
     39a:	0e 94 9f 0c 	call	0x193e	; 0x193e <realloc>
     39e:	9c 83       	std	Y+4, r25	; 0x04
     3a0:	8b 83       	std	Y+3, r24	; 0x03
	
	if(p == NULL){
     3a2:	8b 81       	ldd	r24, Y+3	; 0x03
     3a4:	9c 81       	ldd	r25, Y+4	; 0x04
     3a6:	89 2b       	or	r24, r25
     3a8:	11 f4       	brne	.+4      	; 0x3ae <Increase_Buffer+0x66>
		return FAULT;
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	16 c0       	rjmp	.+44     	; 0x3da <Increase_Buffer+0x92>
	}
	
	Ring_Buffer->Buffer = p;
     3ae:	8d 81       	ldd	r24, Y+5	; 0x05
     3b0:	9e 81       	ldd	r25, Y+6	; 0x06
     3b2:	2b 81       	ldd	r18, Y+3	; 0x03
     3b4:	3c 81       	ldd	r19, Y+4	; 0x04
     3b6:	fc 01       	movw	r30, r24
     3b8:	31 83       	std	Z+1, r19	; 0x01
     3ba:	20 83       	st	Z, r18
	Ring_Buffer->Size = RB_Size + RB_Increment;
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	28 2f       	mov	r18, r24
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	8a 81       	ldd	r24, Y+2	; 0x02
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	82 0f       	add	r24, r18
     3ca:	93 1f       	adc	r25, r19
     3cc:	9c 01       	movw	r18, r24
     3ce:	8d 81       	ldd	r24, Y+5	; 0x05
     3d0:	9e 81       	ldd	r25, Y+6	; 0x06
     3d2:	fc 01       	movw	r30, r24
     3d4:	35 83       	std	Z+5, r19	; 0x05
     3d6:	24 83       	std	Z+4, r18	; 0x04
	
	return OK;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
	
}
     3da:	26 96       	adiw	r28, 0x06	; 6
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <Write_to_Buffer>:

Ring_Buffer_Status Write_to_Buffer(Ring_Buffer* Ring_Buffer, uint8_t Data){
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <Write_to_Buffer+0x6>
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <Write_to_Buffer+0x8>
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <Write_to_Buffer+0xa>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	9d 83       	std	Y+5, r25	; 0x05
     3fc:	8c 83       	std	Y+4, r24	; 0x04
     3fe:	6e 83       	std	Y+6, r22	; 0x06
	
	uint8_t RB_Write_Index = Ring_Buffer->Write_Index;
     400:	8c 81       	ldd	r24, Y+4	; 0x04
     402:	9d 81       	ldd	r25, Y+5	; 0x05
     404:	fc 01       	movw	r30, r24
     406:	83 81       	ldd	r24, Z+3	; 0x03
     408:	89 83       	std	Y+1, r24	; 0x01
	uint8_t RB_Read_Index = Ring_Buffer->Read_Index;
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	9d 81       	ldd	r25, Y+5	; 0x05
     40e:	fc 01       	movw	r30, r24
     410:	82 81       	ldd	r24, Z+2	; 0x02
     412:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t RB_Size = Ring_Buffer->Size;
     414:	8c 81       	ldd	r24, Y+4	; 0x04
     416:	9d 81       	ldd	r25, Y+5	; 0x05
     418:	fc 01       	movw	r30, r24
     41a:	84 81       	ldd	r24, Z+4	; 0x04
     41c:	95 81       	ldd	r25, Z+5	; 0x05
     41e:	8b 83       	std	Y+3, r24	; 0x03
	
	if(RB_Write_Index == RB_Size){
     420:	99 81       	ldd	r25, Y+1	; 0x01
     422:	8b 81       	ldd	r24, Y+3	; 0x03
     424:	98 17       	cp	r25, r24
     426:	49 f4       	brne	.+18     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		
		Ring_Buffer->Write_Index = 0;
     428:	8c 81       	ldd	r24, Y+4	; 0x04
     42a:	9d 81       	ldd	r25, Y+5	; 0x05
     42c:	fc 01       	movw	r30, r24
     42e:	13 82       	std	Z+3, r1	; 0x03
		Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	9d 81       	ldd	r25, Y+5	; 0x05
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	fc 01       	movw	r30, r24
     438:	22 87       	std	Z+10, r18	; 0x0a
		
	}
	
	if( Ring_Buffer->Indexing_State == WRITE_LEADS_READ && 
     43a:	8c 81       	ldd	r24, Y+4	; 0x04
     43c:	9d 81       	ldd	r25, Y+5	; 0x05
     43e:	fc 01       	movw	r30, r24
     440:	82 85       	ldd	r24, Z+10	; 0x0a
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	81 f5       	brne	.+96     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     446:	9a 81       	ldd	r25, Y+2	; 0x02
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	98 17       	cp	r25, r24
     44c:	61 f5       	brne	.+88     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
	RB_Read_Index == RB_Write_Index){
		
		if(Increase_Buffer(Ring_Buffer) == 1){
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	9d 81       	ldd	r25, Y+5	; 0x05
     452:	0e 94 a4 01 	call	0x348	; 0x348 <Increase_Buffer>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	21 f5       	brne	.+72     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			
			Ring_Buffer->Indexing_State = OVERFLOW;
     45a:	8c 81       	ldd	r24, Y+4	; 0x04
     45c:	9d 81       	ldd	r25, Y+5	; 0x05
     45e:	22 e0       	ldi	r18, 0x02	; 2
     460:	fc 01       	movw	r30, r24
     462:	22 87       	std	Z+10, r18	; 0x0a
			
			Ring_Buffer->Overflow_Index = RB_Write_Index;
     464:	8c 81       	ldd	r24, Y+4	; 0x04
     466:	9d 81       	ldd	r25, Y+5	; 0x05
     468:	29 81       	ldd	r18, Y+1	; 0x01
     46a:	fc 01       	movw	r30, r24
     46c:	21 87       	std	Z+9, r18	; 0x09
			
			Ring_Buffer->Adjusted_Size = RB_Size;
     46e:	8c 81       	ldd	r24, Y+4	; 0x04
     470:	9d 81       	ldd	r25, Y+5	; 0x05
     472:	2b 81       	ldd	r18, Y+3	; 0x03
     474:	fc 01       	movw	r30, r24
     476:	27 83       	std	Z+7, r18	; 0x07
			
			Ring_Buffer->Wrap_Index = RB_Size;
     478:	8c 81       	ldd	r24, Y+4	; 0x04
     47a:	9d 81       	ldd	r25, Y+5	; 0x05
     47c:	2b 81       	ldd	r18, Y+3	; 0x03
     47e:	fc 01       	movw	r30, r24
     480:	20 87       	std	Z+8, r18	; 0x08
	
			Ring_Buffer->Write_Index = Ring_Buffer->Size - Ring_Buffer->Increment;
     482:	8c 81       	ldd	r24, Y+4	; 0x04
     484:	9d 81       	ldd	r25, Y+5	; 0x05
     486:	fc 01       	movw	r30, r24
     488:	84 81       	ldd	r24, Z+4	; 0x04
     48a:	95 81       	ldd	r25, Z+5	; 0x05
     48c:	28 2f       	mov	r18, r24
     48e:	8c 81       	ldd	r24, Y+4	; 0x04
     490:	9d 81       	ldd	r25, Y+5	; 0x05
     492:	fc 01       	movw	r30, r24
     494:	86 81       	ldd	r24, Z+6	; 0x06
     496:	28 1b       	sub	r18, r24
     498:	8c 81       	ldd	r24, Y+4	; 0x04
     49a:	9d 81       	ldd	r25, Y+5	; 0x05
     49c:	fc 01       	movw	r30, r24
     49e:	23 83       	std	Z+3, r18	; 0x03
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			
		}else{
			
			return FAULT;
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	1b c0       	rjmp	.+54     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
			
		}
		
	}
	
	Ring_Buffer->Buffer[Ring_Buffer->Write_Index] = Data;
     4a6:	8c 81       	ldd	r24, Y+4	; 0x04
     4a8:	9d 81       	ldd	r25, Y+5	; 0x05
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 81       	ld	r18, Z
     4ae:	31 81       	ldd	r19, Z+1	; 0x01
     4b0:	8c 81       	ldd	r24, Y+4	; 0x04
     4b2:	9d 81       	ldd	r25, Y+5	; 0x05
     4b4:	fc 01       	movw	r30, r24
     4b6:	83 81       	ldd	r24, Z+3	; 0x03
     4b8:	88 2f       	mov	r24, r24
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	82 0f       	add	r24, r18
     4be:	93 1f       	adc	r25, r19
     4c0:	2e 81       	ldd	r18, Y+6	; 0x06
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18
	Ring_Buffer->Write_Index++;
     4c6:	8c 81       	ldd	r24, Y+4	; 0x04
     4c8:	9d 81       	ldd	r25, Y+5	; 0x05
     4ca:	fc 01       	movw	r30, r24
     4cc:	83 81       	ldd	r24, Z+3	; 0x03
     4ce:	21 e0       	ldi	r18, 0x01	; 1
     4d0:	28 0f       	add	r18, r24
     4d2:	8c 81       	ldd	r24, Y+4	; 0x04
     4d4:	9d 81       	ldd	r25, Y+5	; 0x05
     4d6:	fc 01       	movw	r30, r24
     4d8:	23 83       	std	Z+3, r18	; 0x03
	
	return OK;
     4da:	81 e0       	ldi	r24, 0x01	; 1
	
}
     4dc:	26 96       	adiw	r28, 0x06	; 6
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <Free_Buffer>:

Ring_Buffer_Status Free_Buffer(Ring_Buffer* Ring_Buffer){
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <Free_Buffer+0x6>
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	9a 83       	std	Y+2, r25	; 0x02
     4fa:	89 83       	std	Y+1, r24	; 0x01
	
	if(Ring_Buffer == NULL){
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	9a 81       	ldd	r25, Y+2	; 0x02
     500:	89 2b       	or	r24, r25
     502:	11 f4       	brne	.+4      	; 0x508 <Free_Buffer+0x1a>
		return FAULT;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	0d c0       	rjmp	.+26     	; 0x522 <Free_Buffer+0x34>
	}
	
	free(Ring_Buffer->Buffer);
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	fc 01       	movw	r30, r24
     50e:	80 81       	ld	r24, Z
     510:	91 81       	ldd	r25, Z+1	; 0x01
     512:	0e 94 16 0c 	call	0x182c	; 0x182c <free>
	
	Ring_Buffer->Buffer = NULL;
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	fc 01       	movw	r30, r24
     51c:	11 82       	std	Z+1, r1	; 0x01
     51e:	10 82       	st	Z, r1
	
	return OK;
     520:	81 e0       	ldi	r24, 0x01	; 1
	
}
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <Read_from_Buffer>:


Ring_Buffer_Status Read_from_Buffer(Ring_Buffer* Ring_Buffer, uint8_t* Outgoing_Data){
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	00 d0       	rcall	.+0      	; 0x532 <Read_from_Buffer+0x6>
     532:	00 d0       	rcall	.+0      	; 0x534 <Read_from_Buffer+0x8>
     534:	1f 92       	push	r1
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	9b 83       	std	Y+3, r25	; 0x03
     53c:	8a 83       	std	Y+2, r24	; 0x02
     53e:	7d 83       	std	Y+5, r23	; 0x05
     540:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t RB_Read_Index = Ring_Buffer->Read_Index;
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	9b 81       	ldd	r25, Y+3	; 0x03
     546:	fc 01       	movw	r30, r24
     548:	82 81       	ldd	r24, Z+2	; 0x02
     54a:	89 83       	std	Y+1, r24	; 0x01
	
	if (Ring_Buffer->Indexing_State == NONE
     54c:	8a 81       	ldd	r24, Y+2	; 0x02
     54e:	9b 81       	ldd	r25, Y+3	; 0x03
     550:	fc 01       	movw	r30, r24
     552:	82 85       	ldd	r24, Z+10	; 0x0a
     554:	88 23       	and	r24, r24
     556:	61 f4       	brne	.+24     	; 0x570 <Read_from_Buffer+0x44>
	 && Ring_Buffer->Read_Index == Ring_Buffer->Write_Index) {
     558:	8a 81       	ldd	r24, Y+2	; 0x02
     55a:	9b 81       	ldd	r25, Y+3	; 0x03
     55c:	fc 01       	movw	r30, r24
     55e:	22 81       	ldd	r18, Z+2	; 0x02
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	9b 81       	ldd	r25, Y+3	; 0x03
     564:	fc 01       	movw	r30, r24
     566:	83 81       	ldd	r24, Z+3	; 0x03
     568:	28 17       	cp	r18, r24
     56a:	11 f4       	brne	.+4      	; 0x570 <Read_from_Buffer+0x44>
		
		return EMPTY;
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	92 c0       	rjmp	.+292    	; 0x694 <Read_from_Buffer+0x168>
		
	}
	
	*Outgoing_Data = Ring_Buffer->Buffer[Ring_Buffer->Read_Index];
     570:	8a 81       	ldd	r24, Y+2	; 0x02
     572:	9b 81       	ldd	r25, Y+3	; 0x03
     574:	fc 01       	movw	r30, r24
     576:	20 81       	ld	r18, Z
     578:	31 81       	ldd	r19, Z+1	; 0x01
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	fc 01       	movw	r30, r24
     580:	82 81       	ldd	r24, Z+2	; 0x02
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	82 0f       	add	r24, r18
     588:	93 1f       	adc	r25, r19
     58a:	fc 01       	movw	r30, r24
     58c:	20 81       	ld	r18, Z
     58e:	8c 81       	ldd	r24, Y+4	; 0x04
     590:	9d 81       	ldd	r25, Y+5	; 0x05
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
	
	switch(Ring_Buffer->Indexing_State){
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	9b 81       	ldd	r25, Y+3	; 0x03
     59a:	fc 01       	movw	r30, r24
     59c:	82 85       	ldd	r24, Z+10	; 0x0a
     59e:	88 2f       	mov	r24, r24
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	81 30       	cpi	r24, 0x01	; 1
     5a4:	91 05       	cpc	r25, r1
     5a6:	89 f0       	breq	.+34     	; 0x5ca <Read_from_Buffer+0x9e>
     5a8:	82 30       	cpi	r24, 0x02	; 2
     5aa:	91 05       	cpc	r25, r1
     5ac:	51 f1       	breq	.+84     	; 0x602 <Read_from_Buffer+0xd6>
     5ae:	89 2b       	or	r24, r25
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <Read_from_Buffer+0x88>
     5b2:	5f c0       	rjmp	.+190    	; 0x672 <Read_from_Buffer+0x146>
		
		case NONE:
			
			Ring_Buffer->Read_Index++;
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	9b 81       	ldd	r25, Y+3	; 0x03
     5b8:	fc 01       	movw	r30, r24
     5ba:	82 81       	ldd	r24, Z+2	; 0x02
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	28 0f       	add	r18, r24
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	9b 81       	ldd	r25, Y+3	; 0x03
     5c4:	fc 01       	movw	r30, r24
     5c6:	22 83       	std	Z+2, r18	; 0x02
			break;
     5c8:	56 c0       	rjmp	.+172    	; 0x676 <Read_from_Buffer+0x14a>
		
		case WRITE_LEADS_READ:
		
			if(RB_Read_Index == Ring_Buffer->Size - 1){
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	28 2f       	mov	r18, r24
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	8a 81       	ldd	r24, Y+2	; 0x02
     5d2:	9b 81       	ldd	r25, Y+3	; 0x03
     5d4:	fc 01       	movw	r30, r24
     5d6:	84 81       	ldd	r24, Z+4	; 0x04
     5d8:	95 81       	ldd	r25, Z+5	; 0x05
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	28 17       	cp	r18, r24
     5de:	39 07       	cpc	r19, r25
     5e0:	29 f4       	brne	.+10     	; 0x5ec <Read_from_Buffer+0xc0>
					
				Ring_Buffer->Read_Index = 0;	
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	9b 81       	ldd	r25, Y+3	; 0x03
     5e6:	fc 01       	movw	r30, r24
     5e8:	12 82       	std	Z+2, r1	; 0x02
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     5ea:	45 c0       	rjmp	.+138    	; 0x676 <Read_from_Buffer+0x14a>
			if(RB_Read_Index == Ring_Buffer->Size - 1){
					
				Ring_Buffer->Read_Index = 0;	
			}else{
				
				Ring_Buffer->Read_Index++;
     5ec:	8a 81       	ldd	r24, Y+2	; 0x02
     5ee:	9b 81       	ldd	r25, Y+3	; 0x03
     5f0:	fc 01       	movw	r30, r24
     5f2:	82 81       	ldd	r24, Z+2	; 0x02
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	28 0f       	add	r18, r24
     5f8:	8a 81       	ldd	r24, Y+2	; 0x02
     5fa:	9b 81       	ldd	r25, Y+3	; 0x03
     5fc:	fc 01       	movw	r30, r24
     5fe:	22 83       	std	Z+2, r18	; 0x02
				
			}
		
			break;
     600:	3a c0       	rjmp	.+116    	; 0x676 <Read_from_Buffer+0x14a>
		
		case OVERFLOW:
		
			if(RB_Read_Index == (Ring_Buffer->Adjusted_Size - 1)){
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	28 2f       	mov	r18, r24
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	8a 81       	ldd	r24, Y+2	; 0x02
     60a:	9b 81       	ldd	r25, Y+3	; 0x03
     60c:	fc 01       	movw	r30, r24
     60e:	87 81       	ldd	r24, Z+7	; 0x07
     610:	88 2f       	mov	r24, r24
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	29 f4       	brne	.+10     	; 0x626 <Read_from_Buffer+0xfa>
				
				Ring_Buffer->Read_Index = 0;
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	9b 81       	ldd	r25, Y+3	; 0x03
     620:	fc 01       	movw	r30, r24
     622:	12 82       	std	Z+2, r1	; 0x02
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     624:	28 c0       	rjmp	.+80     	; 0x676 <Read_from_Buffer+0x14a>
		
			if(RB_Read_Index == (Ring_Buffer->Adjusted_Size - 1)){
				
				Ring_Buffer->Read_Index = 0;
								
			}else if(RB_Read_Index == Ring_Buffer->Overflow_Index - 1){
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	28 2f       	mov	r18, r24
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	8a 81       	ldd	r24, Y+2	; 0x02
     62e:	9b 81       	ldd	r25, Y+3	; 0x03
     630:	fc 01       	movw	r30, r24
     632:	81 85       	ldd	r24, Z+9	; 0x09
     634:	88 2f       	mov	r24, r24
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	28 17       	cp	r18, r24
     63c:	39 07       	cpc	r19, r25
     63e:	71 f4       	brne	.+28     	; 0x65c <Read_from_Buffer+0x130>
				
				Ring_Buffer->Read_Index = Ring_Buffer->Wrap_Index;
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	9b 81       	ldd	r25, Y+3	; 0x03
     644:	fc 01       	movw	r30, r24
     646:	20 85       	ldd	r18, Z+8	; 0x08
     648:	8a 81       	ldd	r24, Y+2	; 0x02
     64a:	9b 81       	ldd	r25, Y+3	; 0x03
     64c:	fc 01       	movw	r30, r24
     64e:	22 83       	std	Z+2, r18	; 0x02
				Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
     650:	8a 81       	ldd	r24, Y+2	; 0x02
     652:	9b 81       	ldd	r25, Y+3	; 0x03
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	fc 01       	movw	r30, r24
     658:	22 87       	std	Z+10, r18	; 0x0a
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     65a:	0d c0       	rjmp	.+26     	; 0x676 <Read_from_Buffer+0x14a>
				Ring_Buffer->Read_Index = Ring_Buffer->Wrap_Index;
				Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
				
			}else{
				
				Ring_Buffer->Read_Index++;
     65c:	8a 81       	ldd	r24, Y+2	; 0x02
     65e:	9b 81       	ldd	r25, Y+3	; 0x03
     660:	fc 01       	movw	r30, r24
     662:	82 81       	ldd	r24, Z+2	; 0x02
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	28 0f       	add	r18, r24
     668:	8a 81       	ldd	r24, Y+2	; 0x02
     66a:	9b 81       	ldd	r25, Y+3	; 0x03
     66c:	fc 01       	movw	r30, r24
     66e:	22 83       	std	Z+2, r18	; 0x02
				
			}
		
			break;
     670:	02 c0       	rjmp	.+4      	; 0x676 <Read_from_Buffer+0x14a>
		
		default:
		
			return FAULT;
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	0f c0       	rjmp	.+30     	; 0x694 <Read_from_Buffer+0x168>
		
	}
	
	if(Ring_Buffer->Read_Index == Ring_Buffer->Write_Index){
     676:	8a 81       	ldd	r24, Y+2	; 0x02
     678:	9b 81       	ldd	r25, Y+3	; 0x03
     67a:	fc 01       	movw	r30, r24
     67c:	22 81       	ldd	r18, Z+2	; 0x02
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	9b 81       	ldd	r25, Y+3	; 0x03
     682:	fc 01       	movw	r30, r24
     684:	83 81       	ldd	r24, Z+3	; 0x03
     686:	28 17       	cp	r18, r24
     688:	21 f4       	brne	.+8      	; 0x692 <Read_from_Buffer+0x166>
		Ring_Buffer->Indexing_State = NONE;
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	9b 81       	ldd	r25, Y+3	; 0x03
     68e:	fc 01       	movw	r30, r24
     690:	12 86       	std	Z+10, r1	; 0x0a
	}
	
	return OK;
     692:	81 e0       	ldi	r24, 0x01	; 1
	
}
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <__vector_14>:

//------- Timer Definitions:

const uint8_t Max_ISR_Cycles = 150; // Max time the ISR will take to increment System_Ticks.

ISR(TIMER0_COMPA_vect){
     6a4:	1f 92       	push	r1
     6a6:	0f 92       	push	r0
     6a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	2f 93       	push	r18
     6ba:	3f 93       	push	r19
     6bc:	4f 93       	push	r20
     6be:	5f 93       	push	r21
     6c0:	8f 93       	push	r24
     6c2:	9f 93       	push	r25
     6c4:	af 93       	push	r26
     6c6:	bf 93       	push	r27
     6c8:	ef 93       	push	r30
     6ca:	ff 93       	push	r31
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	1f 92       	push	r1
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
		
	if(Remaining_Ticks[_8_bit1] == 0){
     6d6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks+0x4>
     6da:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x5>
     6de:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x6>
     6e2:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x7>
     6e6:	89 2b       	or	r24, r25
     6e8:	8a 2b       	or	r24, r26
     6ea:	8b 2b       	or	r24, r27
     6ec:	69 f5       	brne	.+90     	; 0x748 <__vector_14+0xa4>
		
		PORTD ^= (1 << PORTD6);
     6ee:	8b e2       	ldi	r24, 0x2B	; 43
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	2b e2       	ldi	r18, 0x2B	; 43
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	f9 01       	movw	r30, r18
     6f8:	30 81       	ld	r19, Z
     6fa:	20 e4       	ldi	r18, 0x40	; 64
     6fc:	23 27       	eor	r18, r19
     6fe:	fc 01       	movw	r30, r24
     700:	20 83       	st	Z, r18
				
		if(Calculated_Ticks[_8_bit1] > 0){
     702:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Calculated_Ticks+0x4>
     706:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Calculated_Ticks+0x5>
     70a:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Calculated_Ticks+0x6>
     70e:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Calculated_Ticks+0x7>
     712:	89 2b       	or	r24, r25
     714:	8a 2b       	or	r24, r26
     716:	8b 2b       	or	r24, r27
     718:	09 f4       	brne	.+2      	; 0x71c <__vector_14+0x78>
     71a:	51 c0       	rjmp	.+162    	; 0x7be <__vector_14+0x11a>
			
			Remaining_Ticks[_8_bit1] = Calculated_Ticks[_8_bit1]; // Reset the counter
     71c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Calculated_Ticks+0x4>
     720:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Calculated_Ticks+0x5>
     724:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Calculated_Ticks+0x6>
     728:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Calculated_Ticks+0x7>
     72c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Remaining_Ticks+0x4>
     730:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <Remaining_Ticks+0x5>
     734:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <Remaining_Ticks+0x6>
     738:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <Remaining_Ticks+0x7>
			OCR0A = 0xFF;
     73c:	87 e4       	ldi	r24, 0x47	; 71
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	2f ef       	ldi	r18, 0xFF	; 255
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
		OCR0A = NextOCR;
		Remaining_Ticks[_8_bit1] -= NextOCR;
		
	}
	
}
     746:	3b c0       	rjmp	.+118    	; 0x7be <__vector_14+0x11a>
			
		}
		
	}else{

		uint8_t NextOCR = (Remaining_Ticks[_8_bit1] > 0xFF) ? 0xFF : (uint8_t)Remaining_Ticks[_8_bit1];
     748:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks+0x4>
     74c:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x5>
     750:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x6>
     754:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x7>
     758:	8f 3f       	cpi	r24, 0xFF	; 255
     75a:	91 05       	cpc	r25, r1
     75c:	a1 05       	cpc	r26, r1
     75e:	b1 05       	cpc	r27, r1
     760:	09 f0       	breq	.+2      	; 0x764 <__vector_14+0xc0>
     762:	48 f4       	brcc	.+18     	; 0x776 <__vector_14+0xd2>
     764:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks+0x4>
     768:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x5>
     76c:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x6>
     770:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x7>
     774:	01 c0       	rjmp	.+2      	; 0x778 <__vector_14+0xd4>
     776:	8f ef       	ldi	r24, 0xFF	; 255
     778:	89 83       	std	Y+1, r24	; 0x01

		OCR0A = NextOCR;
     77a:	87 e4       	ldi	r24, 0x47	; 71
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	29 81       	ldd	r18, Y+1	; 0x01
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18
		Remaining_Ticks[_8_bit1] -= NextOCR;
     784:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <Remaining_Ticks+0x4>
     788:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <Remaining_Ticks+0x5>
     78c:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <Remaining_Ticks+0x6>
     790:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <Remaining_Ticks+0x7>
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	a0 e0       	ldi	r26, 0x00	; 0
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	79 01       	movw	r14, r18
     7a0:	8a 01       	movw	r16, r20
     7a2:	e8 1a       	sub	r14, r24
     7a4:	f9 0a       	sbc	r15, r25
     7a6:	0a 0b       	sbc	r16, r26
     7a8:	1b 0b       	sbc	r17, r27
     7aa:	d8 01       	movw	r26, r16
     7ac:	c7 01       	movw	r24, r14
     7ae:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Remaining_Ticks+0x4>
     7b2:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <Remaining_Ticks+0x5>
     7b6:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <Remaining_Ticks+0x6>
     7ba:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <Remaining_Ticks+0x7>
		
	}
	
}
     7be:	00 00       	nop
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	5f 91       	pop	r21
     7d4:	4f 91       	pop	r20
     7d6:	3f 91       	pop	r19
     7d8:	2f 91       	pop	r18
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	0f 90       	pop	r0
     7e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     7e8:	0f 90       	pop	r0
     7ea:	1f 90       	pop	r1
     7ec:	18 95       	reti

000007ee <__vector_7>:

ISR(TIMER2_COMPA_vect){
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	af 92       	push	r10
     7fc:	bf 92       	push	r11
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	1f 92       	push	r1
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
	
	if(Remaining_Ticks[_8_bit2] == 0){
     82c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x8>
     830:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x9>
     834:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0xa>
     838:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0xb>
     83c:	89 2b       	or	r24, r25
     83e:	8a 2b       	or	r24, r26
     840:	8b 2b       	or	r24, r27
     842:	09 f0       	breq	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     844:	60 c0       	rjmp	.+192    	; 0x906 <__stack+0x7>
		
		PORTD ^= (1 << PORTD7);
     846:	8b e2       	ldi	r24, 0x2B	; 43
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	2b e2       	ldi	r18, 0x2B	; 43
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	f9 01       	movw	r30, r18
     850:	30 81       	ld	r19, Z
     852:	20 e8       	ldi	r18, 0x80	; 128
     854:	23 27       	eor	r18, r19
     856:	fc 01       	movw	r30, r24
     858:	20 83       	st	Z, r18
		
		System_Ticks[_8_bit2]++; 
     85a:	a0 90 2d 01 	lds	r10, 0x012D	; 0x80012d <System_Ticks+0x10>
     85e:	b0 90 2e 01 	lds	r11, 0x012E	; 0x80012e <System_Ticks+0x11>
     862:	c0 90 2f 01 	lds	r12, 0x012F	; 0x80012f <System_Ticks+0x12>
     866:	d0 90 30 01 	lds	r13, 0x0130	; 0x800130 <System_Ticks+0x13>
     86a:	e0 90 31 01 	lds	r14, 0x0131	; 0x800131 <System_Ticks+0x14>
     86e:	f0 90 32 01 	lds	r15, 0x0132	; 0x800132 <System_Ticks+0x15>
     872:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <System_Ticks+0x16>
     876:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <System_Ticks+0x17>
     87a:	2a 2d       	mov	r18, r10
     87c:	3b 2d       	mov	r19, r11
     87e:	4c 2d       	mov	r20, r12
     880:	5d 2d       	mov	r21, r13
     882:	6e 2d       	mov	r22, r14
     884:	7f 2d       	mov	r23, r15
     886:	80 2f       	mov	r24, r16
     888:	91 2f       	mov	r25, r17
     88a:	a1 e0       	ldi	r26, 0x01	; 1
     88c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__adddi3_s8>
     890:	a2 2e       	mov	r10, r18
     892:	b3 2e       	mov	r11, r19
     894:	c4 2e       	mov	r12, r20
     896:	d5 2e       	mov	r13, r21
     898:	e6 2e       	mov	r14, r22
     89a:	f7 2e       	mov	r15, r23
     89c:	08 2f       	mov	r16, r24
     89e:	19 2f       	mov	r17, r25
     8a0:	a0 92 2d 01 	sts	0x012D, r10	; 0x80012d <System_Ticks+0x10>
     8a4:	b0 92 2e 01 	sts	0x012E, r11	; 0x80012e <System_Ticks+0x11>
     8a8:	c0 92 2f 01 	sts	0x012F, r12	; 0x80012f <System_Ticks+0x12>
     8ac:	d0 92 30 01 	sts	0x0130, r13	; 0x800130 <System_Ticks+0x13>
     8b0:	e0 92 31 01 	sts	0x0131, r14	; 0x800131 <System_Ticks+0x14>
     8b4:	f0 92 32 01 	sts	0x0132, r15	; 0x800132 <System_Ticks+0x15>
     8b8:	00 93 33 01 	sts	0x0133, r16	; 0x800133 <System_Ticks+0x16>
     8bc:	10 93 34 01 	sts	0x0134, r17	; 0x800134 <System_Ticks+0x17>

		if(Calculated_Ticks[_8_bit2] > 0){
     8c0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Calculated_Ticks+0x8>
     8c4:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Calculated_Ticks+0x9>
     8c8:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <Calculated_Ticks+0xa>
     8cc:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <Calculated_Ticks+0xb>
     8d0:	89 2b       	or	r24, r25
     8d2:	8a 2b       	or	r24, r26
     8d4:	8b 2b       	or	r24, r27
     8d6:	09 f4       	brne	.+2      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8d8:	51 c0       	rjmp	.+162    	; 0x97c <__stack+0x7d>
			
			Remaining_Ticks[_8_bit2] = Calculated_Ticks[_8_bit2]; // Reset the counter
     8da:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Calculated_Ticks+0x8>
     8de:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Calculated_Ticks+0x9>
     8e2:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <Calculated_Ticks+0xa>
     8e6:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <Calculated_Ticks+0xb>
     8ea:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Remaining_Ticks+0x8>
     8ee:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <Remaining_Ticks+0x9>
     8f2:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <Remaining_Ticks+0xa>
     8f6:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <Remaining_Ticks+0xb>
			OCR2A = 0xFF;
     8fa:	83 eb       	ldi	r24, 0xB3	; 179
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	2f ef       	ldi	r18, 0xFF	; 255
     900:	fc 01       	movw	r30, r24
     902:	20 83       	st	Z, r18
		OCR2A = NextOCR;
		Remaining_Ticks[_8_bit2] -= NextOCR;
		
	}

}
     904:	3b c0       	rjmp	.+118    	; 0x97c <__stack+0x7d>
			
		}
		
	}else{

		uint8_t NextOCR = (Remaining_Ticks[_8_bit2] > 0xFF) ? 0xFF : (uint8_t)Remaining_Ticks[_8_bit2];
     906:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x8>
     90a:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x9>
     90e:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0xa>
     912:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0xb>
     916:	8f 3f       	cpi	r24, 0xFF	; 255
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	09 f0       	breq	.+2      	; 0x922 <__stack+0x23>
     920:	48 f4       	brcc	.+18     	; 0x934 <__stack+0x35>
     922:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x8>
     926:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x9>
     92a:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0xa>
     92e:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0xb>
     932:	01 c0       	rjmp	.+2      	; 0x936 <__stack+0x37>
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	89 83       	std	Y+1, r24	; 0x01

		OCR2A = NextOCR;
     938:	83 eb       	ldi	r24, 0xB3	; 179
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	29 81       	ldd	r18, Y+1	; 0x01
     93e:	fc 01       	movw	r30, r24
     940:	20 83       	st	Z, r18
		Remaining_Ticks[_8_bit2] -= NextOCR;
     942:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Remaining_Ticks+0x8>
     946:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <Remaining_Ticks+0x9>
     94a:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <Remaining_Ticks+0xa>
     94e:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <Remaining_Ticks+0xb>
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	88 2f       	mov	r24, r24
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	79 01       	movw	r14, r18
     95e:	8a 01       	movw	r16, r20
     960:	e8 1a       	sub	r14, r24
     962:	f9 0a       	sbc	r15, r25
     964:	0a 0b       	sbc	r16, r26
     966:	1b 0b       	sbc	r17, r27
     968:	d8 01       	movw	r26, r16
     96a:	c7 01       	movw	r24, r14
     96c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Remaining_Ticks+0x8>
     970:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <Remaining_Ticks+0x9>
     974:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <Remaining_Ticks+0xa>
     978:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <Remaining_Ticks+0xb>
		
	}

}
     97c:	00 00       	nop
     97e:	0f 90       	pop	r0
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	ff 91       	pop	r31
     986:	ef 91       	pop	r30
     988:	bf 91       	pop	r27
     98a:	af 91       	pop	r26
     98c:	9f 91       	pop	r25
     98e:	8f 91       	pop	r24
     990:	7f 91       	pop	r23
     992:	6f 91       	pop	r22
     994:	5f 91       	pop	r21
     996:	4f 91       	pop	r20
     998:	3f 91       	pop	r19
     99a:	2f 91       	pop	r18
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	bf 90       	pop	r11
     9aa:	af 90       	pop	r10
     9ac:	0f 90       	pop	r0
     9ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     9b2:	0f 90       	pop	r0
     9b4:	1f 90       	pop	r1
     9b6:	18 95       	reti

000009b8 <__vector_11>:


ISR(TIMER1_COMPA_vect){
     9b8:	1f 92       	push	r1
     9ba:	0f 92       	push	r0
     9bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     9c0:	0f 92       	push	r0
     9c2:	11 24       	eor	r1, r1
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	2f 93       	push	r18
     9d6:	3f 93       	push	r19
     9d8:	4f 93       	push	r20
     9da:	5f 93       	push	r21
     9dc:	6f 93       	push	r22
     9de:	7f 93       	push	r23
     9e0:	8f 93       	push	r24
     9e2:	9f 93       	push	r25
     9e4:	af 93       	push	r26
     9e6:	bf 93       	push	r27
     9e8:	ef 93       	push	r30
     9ea:	ff 93       	push	r31
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <__vector_11+0x3a>
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
	
	if(Remaining_Ticks[_16_bit] == 0){
     9f6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Remaining_Ticks>
     9fa:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Remaining_Ticks+0x1>
     9fe:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <Remaining_Ticks+0x2>
     a02:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <Remaining_Ticks+0x3>
     a06:	89 2b       	or	r24, r25
     a08:	8a 2b       	or	r24, r26
     a0a:	8b 2b       	or	r24, r27
     a0c:	09 f0       	breq	.+2      	; 0xa10 <__vector_11+0x58>
     a0e:	65 c0       	rjmp	.+202    	; 0xada <__vector_11+0x122>
		
		PORTB ^= (1 << PORTB0);
     a10:	85 e2       	ldi	r24, 0x25	; 37
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	25 e2       	ldi	r18, 0x25	; 37
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	f9 01       	movw	r30, r18
     a1a:	30 81       	ld	r19, Z
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	23 27       	eor	r18, r19
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
		
		System_Ticks[_16_bit]++;
     a24:	a0 90 1d 01 	lds	r10, 0x011D	; 0x80011d <System_Ticks>
     a28:	b0 90 1e 01 	lds	r11, 0x011E	; 0x80011e <System_Ticks+0x1>
     a2c:	c0 90 1f 01 	lds	r12, 0x011F	; 0x80011f <System_Ticks+0x2>
     a30:	d0 90 20 01 	lds	r13, 0x0120	; 0x800120 <System_Ticks+0x3>
     a34:	e0 90 21 01 	lds	r14, 0x0121	; 0x800121 <System_Ticks+0x4>
     a38:	f0 90 22 01 	lds	r15, 0x0122	; 0x800122 <System_Ticks+0x5>
     a3c:	00 91 23 01 	lds	r16, 0x0123	; 0x800123 <System_Ticks+0x6>
     a40:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <System_Ticks+0x7>
     a44:	2a 2d       	mov	r18, r10
     a46:	3b 2d       	mov	r19, r11
     a48:	4c 2d       	mov	r20, r12
     a4a:	5d 2d       	mov	r21, r13
     a4c:	6e 2d       	mov	r22, r14
     a4e:	7f 2d       	mov	r23, r15
     a50:	80 2f       	mov	r24, r16
     a52:	91 2f       	mov	r25, r17
     a54:	a1 e0       	ldi	r26, 0x01	; 1
     a56:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__adddi3_s8>
     a5a:	a2 2e       	mov	r10, r18
     a5c:	b3 2e       	mov	r11, r19
     a5e:	c4 2e       	mov	r12, r20
     a60:	d5 2e       	mov	r13, r21
     a62:	e6 2e       	mov	r14, r22
     a64:	f7 2e       	mov	r15, r23
     a66:	08 2f       	mov	r16, r24
     a68:	19 2f       	mov	r17, r25
     a6a:	a0 92 1d 01 	sts	0x011D, r10	; 0x80011d <System_Ticks>
     a6e:	b0 92 1e 01 	sts	0x011E, r11	; 0x80011e <System_Ticks+0x1>
     a72:	c0 92 1f 01 	sts	0x011F, r12	; 0x80011f <System_Ticks+0x2>
     a76:	d0 92 20 01 	sts	0x0120, r13	; 0x800120 <System_Ticks+0x3>
     a7a:	e0 92 21 01 	sts	0x0121, r14	; 0x800121 <System_Ticks+0x4>
     a7e:	f0 92 22 01 	sts	0x0122, r15	; 0x800122 <System_Ticks+0x5>
     a82:	00 93 23 01 	sts	0x0123, r16	; 0x800123 <System_Ticks+0x6>
     a86:	10 93 24 01 	sts	0x0124, r17	; 0x800124 <System_Ticks+0x7>
		
		if(Calculated_Ticks[_16_bit] > 0){
     a8a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Calculated_Ticks>
     a8e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Calculated_Ticks+0x1>
     a92:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <Calculated_Ticks+0x2>
     a96:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <Calculated_Ticks+0x3>
     a9a:	89 2b       	or	r24, r25
     a9c:	8a 2b       	or	r24, r26
     a9e:	8b 2b       	or	r24, r27
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <__vector_11+0xec>
     aa2:	58 c0       	rjmp	.+176    	; 0xb54 <__vector_11+0x19c>
			
			Remaining_Ticks[_16_bit] = Calculated_Ticks[_16_bit];
     aa4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Calculated_Ticks>
     aa8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Calculated_Ticks+0x1>
     aac:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <Calculated_Ticks+0x2>
     ab0:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <Calculated_Ticks+0x3>
     ab4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <Remaining_Ticks>
     ab8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <Remaining_Ticks+0x1>
     abc:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <Remaining_Ticks+0x2>
     ac0:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <Remaining_Ticks+0x3>
			OCR1AH = 0xFF;
     ac4:	89 e8       	ldi	r24, 0x89	; 137
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	2f ef       	ldi	r18, 0xFF	; 255
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
			OCR1AL = 0xFF;
     ace:	88 e8       	ldi	r24, 0x88	; 136
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	2f ef       	ldi	r18, 0xFF	; 255
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
		OCR1A = NextOCR;
		Remaining_Ticks[_16_bit] -= NextOCR;
		
	}
	
}
     ad8:	3d c0       	rjmp	.+122    	; 0xb54 <__vector_11+0x19c>
			
		}
		
	}else{
		
		uint16_t NextOCR = (Remaining_Ticks[_16_bit] > 0xFFFF) ? 0xFFFF : (uint16_t)Remaining_Ticks[_16_bit];
     ada:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Remaining_Ticks>
     ade:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Remaining_Ticks+0x1>
     ae2:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <Remaining_Ticks+0x2>
     ae6:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <Remaining_Ticks+0x3>
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	a1 40       	sbci	r26, 0x01	; 1
     aee:	b1 05       	cpc	r27, r1
     af0:	48 f4       	brcc	.+18     	; 0xb04 <__vector_11+0x14c>
     af2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Remaining_Ticks>
     af6:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Remaining_Ticks+0x1>
     afa:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <Remaining_Ticks+0x2>
     afe:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <Remaining_Ticks+0x3>
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <__vector_11+0x150>
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	9f ef       	ldi	r25, 0xFF	; 255
     b08:	9a 83       	std	Y+2, r25	; 0x02
     b0a:	89 83       	std	Y+1, r24	; 0x01
		
		OCR1A = NextOCR;
     b0c:	88 e8       	ldi	r24, 0x88	; 136
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	29 81       	ldd	r18, Y+1	; 0x01
     b12:	3a 81       	ldd	r19, Y+2	; 0x02
     b14:	fc 01       	movw	r30, r24
     b16:	31 83       	std	Z+1, r19	; 0x01
     b18:	20 83       	st	Z, r18
		Remaining_Ticks[_16_bit] -= NextOCR;
     b1a:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <Remaining_Ticks>
     b1e:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <Remaining_Ticks+0x1>
     b22:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <Remaining_Ticks+0x2>
     b26:	50 91 44 01 	lds	r21, 0x0144	; 0x800144 <Remaining_Ticks+0x3>
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	9a 81       	ldd	r25, Y+2	; 0x02
     b2e:	cc 01       	movw	r24, r24
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	79 01       	movw	r14, r18
     b36:	8a 01       	movw	r16, r20
     b38:	e8 1a       	sub	r14, r24
     b3a:	f9 0a       	sbc	r15, r25
     b3c:	0a 0b       	sbc	r16, r26
     b3e:	1b 0b       	sbc	r17, r27
     b40:	d8 01       	movw	r26, r16
     b42:	c7 01       	movw	r24, r14
     b44:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <Remaining_Ticks>
     b48:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <Remaining_Ticks+0x1>
     b4c:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <Remaining_Ticks+0x2>
     b50:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <Remaining_Ticks+0x3>
		
	}
	
}
     b54:	00 00       	nop
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	bf 91       	pop	r27
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	0f 90       	pop	r0
     b88:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b8c:	0f 90       	pop	r0
     b8e:	1f 90       	pop	r1
     b90:	18 95       	reti

00000b92 <Configure_Timer_Tick>:


bool Configure_Timer_Tick(uint16_t Time, uint32_t Unit, Timers Timer){ // All relevent types were optimized by calculating the largest possible values to Configure_Timer_Step()
     b92:	2f 92       	push	r2
     b94:	3f 92       	push	r3
     b96:	4f 92       	push	r4
     b98:	5f 92       	push	r5
     b9a:	6f 92       	push	r6
     b9c:	7f 92       	push	r7
     b9e:	8f 92       	push	r8
     ba0:	9f 92       	push	r9
     ba2:	af 92       	push	r10
     ba4:	bf 92       	push	r11
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	e0 97       	sbiw	r28, 0x30	; 48
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	9b a7       	std	Y+43, r25	; 0x2b
     bc8:	8a a7       	std	Y+42, r24	; 0x2a
     bca:	4c a7       	std	Y+44, r20	; 0x2c
     bcc:	5d a7       	std	Y+45, r21	; 0x2d
     bce:	6e a7       	std	Y+46, r22	; 0x2e
     bd0:	7f a7       	std	Y+47, r23	; 0x2f
     bd2:	28 ab       	std	Y+48, r18	; 0x30
	
	if(TC_CLK == 0){ 
     bd4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <TC_CLK>
     bd8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <TC_CLK+0x1>
     bdc:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <TC_CLK+0x2>
     be0:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <TC_CLK+0x3>
     be4:	89 2b       	or	r24, r25
     be6:	8a 2b       	or	r24, r26
     be8:	8b 2b       	or	r24, r27
     bea:	11 f4       	brne	.+4      	; 0xbf0 <Configure_Timer_Tick+0x5e>
		return false;
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	4f c4       	rjmp	.+2206   	; 0x148e <Configure_Timer_Tick+0x8fc>
	}
	
	if(Unit == 0){
     bf0:	8c a5       	ldd	r24, Y+44	; 0x2c
     bf2:	9d a5       	ldd	r25, Y+45	; 0x2d
     bf4:	ae a5       	ldd	r26, Y+46	; 0x2e
     bf6:	bf a5       	ldd	r27, Y+47	; 0x2f
     bf8:	89 2b       	or	r24, r25
     bfa:	8a 2b       	or	r24, r26
     bfc:	8b 2b       	or	r24, r27
     bfe:	11 f4       	brne	.+4      	; 0xc04 <Configure_Timer_Tick+0x72>
		return false;
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	45 c4       	rjmp	.+2186   	; 0x148e <Configure_Timer_Tick+0x8fc>
	}
	
	if((uint64_t)TC_CLK * Time/Unit <= Max_ISR_Cycles){ // If the requested tick is shorter than or equal to the max time it takes to increment System_Ticks, return error state
     c04:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <TC_CLK>
     c08:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <TC_CLK+0x1>
     c0c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <TC_CLK+0x2>
     c10:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <TC_CLK+0x3>
     c14:	1c 01       	movw	r2, r24
     c16:	2d 01       	movw	r4, r26
     c18:	61 2c       	mov	r6, r1
     c1a:	71 2c       	mov	r7, r1
     c1c:	43 01       	movw	r8, r6
     c1e:	8a a5       	ldd	r24, Y+42	; 0x2a
     c20:	9b a5       	ldd	r25, Y+43	; 0x2b
     c22:	9c 01       	movw	r18, r24
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	cb 01       	movw	r24, r22
     c2e:	a2 2e       	mov	r10, r18
     c30:	b3 2e       	mov	r11, r19
     c32:	c4 2e       	mov	r12, r20
     c34:	d5 2e       	mov	r13, r21
     c36:	e6 2e       	mov	r14, r22
     c38:	f7 2e       	mov	r15, r23
     c3a:	08 2f       	mov	r16, r24
     c3c:	19 2f       	mov	r17, r25
     c3e:	22 2d       	mov	r18, r2
     c40:	33 2d       	mov	r19, r3
     c42:	44 2d       	mov	r20, r4
     c44:	55 2d       	mov	r21, r5
     c46:	66 2d       	mov	r22, r6
     c48:	77 2d       	mov	r23, r7
     c4a:	88 2d       	mov	r24, r8
     c4c:	99 2d       	mov	r25, r9
     c4e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__muldi3>
     c52:	a2 2e       	mov	r10, r18
     c54:	b3 2e       	mov	r11, r19
     c56:	c4 2e       	mov	r12, r20
     c58:	d5 2e       	mov	r13, r21
     c5a:	e6 2e       	mov	r14, r22
     c5c:	f7 2e       	mov	r15, r23
     c5e:	08 2f       	mov	r16, r24
     c60:	19 2f       	mov	r17, r25
     c62:	2a 2c       	mov	r2, r10
     c64:	3b 2c       	mov	r3, r11
     c66:	4c 2c       	mov	r4, r12
     c68:	5d 2c       	mov	r5, r13
     c6a:	6e 2c       	mov	r6, r14
     c6c:	7f 2c       	mov	r7, r15
     c6e:	80 2e       	mov	r8, r16
     c70:	91 2e       	mov	r9, r17
     c72:	8c a5       	ldd	r24, Y+44	; 0x2c
     c74:	9d a5       	ldd	r25, Y+45	; 0x2d
     c76:	ae a5       	ldd	r26, Y+46	; 0x2e
     c78:	bf a5       	ldd	r27, Y+47	; 0x2f
     c7a:	9c 01       	movw	r18, r24
     c7c:	ad 01       	movw	r20, r26
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	cb 01       	movw	r24, r22
     c84:	a2 2e       	mov	r10, r18
     c86:	b3 2e       	mov	r11, r19
     c88:	c4 2e       	mov	r12, r20
     c8a:	d5 2e       	mov	r13, r21
     c8c:	e6 2e       	mov	r14, r22
     c8e:	f7 2e       	mov	r15, r23
     c90:	08 2f       	mov	r16, r24
     c92:	19 2f       	mov	r17, r25
     c94:	22 2d       	mov	r18, r2
     c96:	33 2d       	mov	r19, r3
     c98:	44 2d       	mov	r20, r4
     c9a:	55 2d       	mov	r21, r5
     c9c:	66 2d       	mov	r22, r6
     c9e:	77 2d       	mov	r23, r7
     ca0:	88 2d       	mov	r24, r8
     ca2:	99 2d       	mov	r25, r9
     ca4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__udivdi3>
     ca8:	22 2e       	mov	r2, r18
     caa:	33 2e       	mov	r3, r19
     cac:	44 2e       	mov	r4, r20
     cae:	55 2e       	mov	r5, r21
     cb0:	66 2e       	mov	r6, r22
     cb2:	77 2e       	mov	r7, r23
     cb4:	88 2e       	mov	r8, r24
     cb6:	99 2e       	mov	r9, r25
     cb8:	a2 2c       	mov	r10, r2
     cba:	b3 2c       	mov	r11, r3
     cbc:	c4 2c       	mov	r12, r4
     cbe:	d5 2c       	mov	r13, r5
     cc0:	e6 2c       	mov	r14, r6
     cc2:	f7 2c       	mov	r15, r7
     cc4:	08 2d       	mov	r16, r8
     cc6:	19 2d       	mov	r17, r9
     cc8:	86 e9       	ldi	r24, 0x96	; 150
     cca:	28 2e       	mov	r2, r24
     ccc:	31 2c       	mov	r3, r1
     cce:	41 2c       	mov	r4, r1
     cd0:	51 2c       	mov	r5, r1
     cd2:	61 2c       	mov	r6, r1
     cd4:	71 2c       	mov	r7, r1
     cd6:	43 01       	movw	r8, r6
     cd8:	2a 2d       	mov	r18, r10
     cda:	3b 2d       	mov	r19, r11
     cdc:	4c 2d       	mov	r20, r12
     cde:	5d 2d       	mov	r21, r13
     ce0:	6e 2d       	mov	r22, r14
     ce2:	7f 2d       	mov	r23, r15
     ce4:	80 2f       	mov	r24, r16
     ce6:	91 2f       	mov	r25, r17
     ce8:	a2 2c       	mov	r10, r2
     cea:	b3 2c       	mov	r11, r3
     cec:	c4 2c       	mov	r12, r4
     cee:	d5 2c       	mov	r13, r5
     cf0:	e6 2c       	mov	r14, r6
     cf2:	f7 2c       	mov	r15, r7
     cf4:	08 2d       	mov	r16, r8
     cf6:	19 2d       	mov	r17, r9
     cf8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__cmpdi2>
     cfc:	09 f0       	breq	.+2      	; 0xd00 <Configure_Timer_Tick+0x16e>
     cfe:	10 f4       	brcc	.+4      	; 0xd04 <Configure_Timer_Tick+0x172>
		return false;
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	c5 c3       	rjmp	.+1930   	; 0x148e <Configure_Timer_Tick+0x8fc>
		Adjusted_Cycles = ((TC_CLK + (F_CLK/2))/F_CLK) * Avg_ISR_Cycles;
	} */

	// Disable the timer interrupts as the timer is being re-configured:

	uint64_t Numerator = Time * TC_CLK;
     d04:	8a a5       	ldd	r24, Y+42	; 0x2a
     d06:	9b a5       	ldd	r25, Y+43	; 0x2b
     d08:	9c 01       	movw	r18, r24
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <TC_CLK>
     d12:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <TC_CLK+0x1>
     d16:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <TC_CLK+0x2>
     d1a:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <TC_CLK+0x3>
     d1e:	bc 01       	movw	r22, r24
     d20:	cd 01       	movw	r24, r26
     d22:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__mulsi3>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	9c 01       	movw	r18, r24
     d2c:	ad 01       	movw	r20, r26
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	cb 01       	movw	r24, r22
     d34:	28 87       	std	Y+8, r18	; 0x08
     d36:	39 87       	std	Y+9, r19	; 0x09
     d38:	4a 87       	std	Y+10, r20	; 0x0a
     d3a:	5b 87       	std	Y+11, r21	; 0x0b
     d3c:	6c 87       	std	Y+12, r22	; 0x0c
     d3e:	7d 87       	std	Y+13, r23	; 0x0d
     d40:	8e 87       	std	Y+14, r24	; 0x0e
     d42:	9f 87       	std	Y+15, r25	; 0x0f
	uint64_t Scaled_Ticks = Numerator / (Unit); // How many times we have to count for the requested time to have passed at the current clock frequency
     d44:	8c a5       	ldd	r24, Y+44	; 0x2c
     d46:	9d a5       	ldd	r25, Y+45	; 0x2d
     d48:	ae a5       	ldd	r26, Y+46	; 0x2e
     d4a:	bf a5       	ldd	r27, Y+47	; 0x2f
     d4c:	9c 01       	movw	r18, r24
     d4e:	ad 01       	movw	r20, r26
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	cb 01       	movw	r24, r22
     d56:	a2 2e       	mov	r10, r18
     d58:	b3 2e       	mov	r11, r19
     d5a:	c4 2e       	mov	r12, r20
     d5c:	d5 2e       	mov	r13, r21
     d5e:	e6 2e       	mov	r14, r22
     d60:	f7 2e       	mov	r15, r23
     d62:	08 2f       	mov	r16, r24
     d64:	19 2f       	mov	r17, r25
     d66:	28 85       	ldd	r18, Y+8	; 0x08
     d68:	39 85       	ldd	r19, Y+9	; 0x09
     d6a:	4a 85       	ldd	r20, Y+10	; 0x0a
     d6c:	5b 85       	ldd	r21, Y+11	; 0x0b
     d6e:	6c 85       	ldd	r22, Y+12	; 0x0c
     d70:	7d 85       	ldd	r23, Y+13	; 0x0d
     d72:	8e 85       	ldd	r24, Y+14	; 0x0e
     d74:	9f 85       	ldd	r25, Y+15	; 0x0f
     d76:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__udivdi3>
     d7a:	a2 2e       	mov	r10, r18
     d7c:	b3 2e       	mov	r11, r19
     d7e:	c4 2e       	mov	r12, r20
     d80:	d5 2e       	mov	r13, r21
     d82:	e6 2e       	mov	r14, r22
     d84:	f7 2e       	mov	r15, r23
     d86:	08 2f       	mov	r16, r24
     d88:	19 2f       	mov	r17, r25
     d8a:	a8 8a       	std	Y+16, r10	; 0x10
     d8c:	b9 8a       	std	Y+17, r11	; 0x11
     d8e:	ca 8a       	std	Y+18, r12	; 0x12
     d90:	db 8a       	std	Y+19, r13	; 0x13
     d92:	ec 8a       	std	Y+20, r14	; 0x14
     d94:	fd 8a       	std	Y+21, r15	; 0x15
     d96:	0e 8b       	std	Y+22, r16	; 0x16
     d98:	1f 8b       	std	Y+23, r17	; 0x17
	
	uint16_t Prescaler = 0;
     d9a:	1a 82       	std	Y+2, r1	; 0x02
     d9c:	19 82       	std	Y+1, r1	; 0x01
	uint32_t Calculated_Prescaler = 0; // Ensures that OCRxA is <= (2^n - 1)
     d9e:	1b 82       	std	Y+3, r1	; 0x03
     da0:	1c 82       	std	Y+4, r1	; 0x04
     da2:	1d 82       	std	Y+5, r1	; 0x05
     da4:	1e 82       	std	Y+6, r1	; 0x06
	
	switch(Timer){
     da6:	88 a9       	ldd	r24, Y+48	; 0x30
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	91 05       	cpc	r25, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <Configure_Timer_Tick+0x222>
     db2:	51 c0       	rjmp	.+162    	; 0xe56 <Configure_Timer_Tick+0x2c4>
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	91 05       	cpc	r25, r1
     db8:	09 f4       	brne	.+2      	; 0xdbc <Configure_Timer_Tick+0x22a>
     dba:	96 c0       	rjmp	.+300    	; 0xee8 <Configure_Timer_Tick+0x356>
     dbc:	89 2b       	or	r24, r25
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <Configure_Timer_Tick+0x230>
     dc0:	dc c0       	rjmp	.+440    	; 0xf7a <Configure_Timer_Tick+0x3e8>
		
		case _16_bit:
			
			TIMSK1 = TIMSK1 & ~(1 << OCIE1A); // Disable the timer interrupt as it is being reconfigured.
     dc2:	8f e6       	ldi	r24, 0x6F	; 111
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	2f e6       	ldi	r18, 0x6F	; 111
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	f9 01       	movw	r30, r18
     dcc:	20 81       	ld	r18, Z
     dce:	2d 7f       	andi	r18, 0xFD	; 253
     dd0:	fc 01       	movw	r30, r24
     dd2:	20 83       	st	Z, r18

			Calculated_Prescaler = (Scaled_Ticks+65534)/65535; // Ceiling function
     dd4:	28 89       	ldd	r18, Y+16	; 0x10
     dd6:	39 89       	ldd	r19, Y+17	; 0x11
     dd8:	4a 89       	ldd	r20, Y+18	; 0x12
     dda:	5b 89       	ldd	r21, Y+19	; 0x13
     ddc:	6c 89       	ldd	r22, Y+20	; 0x14
     dde:	7d 89       	ldd	r23, Y+21	; 0x15
     de0:	8e 89       	ldd	r24, Y+22	; 0x16
     de2:	9f 89       	ldd	r25, Y+23	; 0x17
     de4:	22 50       	subi	r18, 0x02	; 2
     de6:	31 09       	sbc	r19, r1
     de8:	4f 4f       	sbci	r20, 0xFF	; 255
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	6f 4f       	sbci	r22, 0xFF	; 255
     dee:	7f 4f       	sbci	r23, 0xFF	; 255
     df0:	8f 4f       	sbci	r24, 0xFF	; 255
     df2:	9f 4f       	sbci	r25, 0xFF	; 255
     df4:	22 2e       	mov	r2, r18
     df6:	33 2e       	mov	r3, r19
     df8:	44 2e       	mov	r4, r20
     dfa:	55 2e       	mov	r5, r21
     dfc:	66 2e       	mov	r6, r22
     dfe:	77 2e       	mov	r7, r23
     e00:	88 2e       	mov	r8, r24
     e02:	99 2e       	mov	r9, r25
     e04:	aa 24       	eor	r10, r10
     e06:	aa 94       	dec	r10
     e08:	bb 24       	eor	r11, r11
     e0a:	ba 94       	dec	r11
     e0c:	c1 2c       	mov	r12, r1
     e0e:	d1 2c       	mov	r13, r1
     e10:	e1 2c       	mov	r14, r1
     e12:	f1 2c       	mov	r15, r1
     e14:	00 e0       	ldi	r16, 0x00	; 0
     e16:	10 e0       	ldi	r17, 0x00	; 0
     e18:	22 2d       	mov	r18, r2
     e1a:	33 2d       	mov	r19, r3
     e1c:	44 2d       	mov	r20, r4
     e1e:	55 2d       	mov	r21, r5
     e20:	66 2d       	mov	r22, r6
     e22:	77 2d       	mov	r23, r7
     e24:	88 2d       	mov	r24, r8
     e26:	99 2d       	mov	r25, r9
     e28:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__udivdi3>
     e2c:	a2 2e       	mov	r10, r18
     e2e:	b3 2e       	mov	r11, r19
     e30:	c4 2e       	mov	r12, r20
     e32:	d5 2e       	mov	r13, r21
     e34:	e6 2e       	mov	r14, r22
     e36:	f7 2e       	mov	r15, r23
     e38:	08 2f       	mov	r16, r24
     e3a:	19 2f       	mov	r17, r25
     e3c:	2a 2d       	mov	r18, r10
     e3e:	3b 2d       	mov	r19, r11
     e40:	4c 2d       	mov	r20, r12
     e42:	5d 2d       	mov	r21, r13
     e44:	6e 2d       	mov	r22, r14
     e46:	7f 2d       	mov	r23, r15
     e48:	80 2f       	mov	r24, r16
     e4a:	91 2f       	mov	r25, r17
     e4c:	2b 83       	std	Y+3, r18	; 0x03
     e4e:	3c 83       	std	Y+4, r19	; 0x04
     e50:	4d 83       	std	Y+5, r20	; 0x05
     e52:	5e 83       	std	Y+6, r21	; 0x06

			break;
     e54:	94 c0       	rjmp	.+296    	; 0xf7e <Configure_Timer_Tick+0x3ec>
		
		case _8_bit1:
			
			TIMSK0 = TIMSK0 & ~(1 << OCIE0A);
     e56:	8e e6       	ldi	r24, 0x6E	; 110
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	2e e6       	ldi	r18, 0x6E	; 110
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	f9 01       	movw	r30, r18
     e60:	20 81       	ld	r18, Z
     e62:	2d 7f       	andi	r18, 0xFD	; 253
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
			
			Calculated_Prescaler = (Scaled_Ticks+254)/255;
     e68:	28 89       	ldd	r18, Y+16	; 0x10
     e6a:	39 89       	ldd	r19, Y+17	; 0x11
     e6c:	4a 89       	ldd	r20, Y+18	; 0x12
     e6e:	5b 89       	ldd	r21, Y+19	; 0x13
     e70:	6c 89       	ldd	r22, Y+20	; 0x14
     e72:	7d 89       	ldd	r23, Y+21	; 0x15
     e74:	8e 89       	ldd	r24, Y+22	; 0x16
     e76:	9f 89       	ldd	r25, Y+23	; 0x17
     e78:	22 50       	subi	r18, 0x02	; 2
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	4f 4f       	sbci	r20, 0xFF	; 255
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	6f 4f       	sbci	r22, 0xFF	; 255
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	8f 4f       	sbci	r24, 0xFF	; 255
     e86:	9f 4f       	sbci	r25, 0xFF	; 255
     e88:	22 2e       	mov	r2, r18
     e8a:	33 2e       	mov	r3, r19
     e8c:	44 2e       	mov	r4, r20
     e8e:	55 2e       	mov	r5, r21
     e90:	66 2e       	mov	r6, r22
     e92:	77 2e       	mov	r7, r23
     e94:	88 2e       	mov	r8, r24
     e96:	99 2e       	mov	r9, r25
     e98:	aa 24       	eor	r10, r10
     e9a:	aa 94       	dec	r10
     e9c:	b1 2c       	mov	r11, r1
     e9e:	c1 2c       	mov	r12, r1
     ea0:	d1 2c       	mov	r13, r1
     ea2:	e1 2c       	mov	r14, r1
     ea4:	f1 2c       	mov	r15, r1
     ea6:	00 e0       	ldi	r16, 0x00	; 0
     ea8:	10 e0       	ldi	r17, 0x00	; 0
     eaa:	22 2d       	mov	r18, r2
     eac:	33 2d       	mov	r19, r3
     eae:	44 2d       	mov	r20, r4
     eb0:	55 2d       	mov	r21, r5
     eb2:	66 2d       	mov	r22, r6
     eb4:	77 2d       	mov	r23, r7
     eb6:	88 2d       	mov	r24, r8
     eb8:	99 2d       	mov	r25, r9
     eba:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__udivdi3>
     ebe:	a2 2e       	mov	r10, r18
     ec0:	b3 2e       	mov	r11, r19
     ec2:	c4 2e       	mov	r12, r20
     ec4:	d5 2e       	mov	r13, r21
     ec6:	e6 2e       	mov	r14, r22
     ec8:	f7 2e       	mov	r15, r23
     eca:	08 2f       	mov	r16, r24
     ecc:	19 2f       	mov	r17, r25
     ece:	2a 2d       	mov	r18, r10
     ed0:	3b 2d       	mov	r19, r11
     ed2:	4c 2d       	mov	r20, r12
     ed4:	5d 2d       	mov	r21, r13
     ed6:	6e 2d       	mov	r22, r14
     ed8:	7f 2d       	mov	r23, r15
     eda:	80 2f       	mov	r24, r16
     edc:	91 2f       	mov	r25, r17
     ede:	2b 83       	std	Y+3, r18	; 0x03
     ee0:	3c 83       	std	Y+4, r19	; 0x04
     ee2:	4d 83       	std	Y+5, r20	; 0x05
     ee4:	5e 83       	std	Y+6, r21	; 0x06
			
			break;
     ee6:	4b c0       	rjmp	.+150    	; 0xf7e <Configure_Timer_Tick+0x3ec>
			
		case _8_bit2:
			
			TIMSK2 = TIMSK2 & ~(1 << OCIE2A);
     ee8:	80 e7       	ldi	r24, 0x70	; 112
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	20 e7       	ldi	r18, 0x70	; 112
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	f9 01       	movw	r30, r18
     ef2:	20 81       	ld	r18, Z
     ef4:	2d 7f       	andi	r18, 0xFD	; 253
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
			
			Calculated_Prescaler = (Scaled_Ticks+254)/255;
     efa:	28 89       	ldd	r18, Y+16	; 0x10
     efc:	39 89       	ldd	r19, Y+17	; 0x11
     efe:	4a 89       	ldd	r20, Y+18	; 0x12
     f00:	5b 89       	ldd	r21, Y+19	; 0x13
     f02:	6c 89       	ldd	r22, Y+20	; 0x14
     f04:	7d 89       	ldd	r23, Y+21	; 0x15
     f06:	8e 89       	ldd	r24, Y+22	; 0x16
     f08:	9f 89       	ldd	r25, Y+23	; 0x17
     f0a:	22 50       	subi	r18, 0x02	; 2
     f0c:	3f 4f       	sbci	r19, 0xFF	; 255
     f0e:	4f 4f       	sbci	r20, 0xFF	; 255
     f10:	5f 4f       	sbci	r21, 0xFF	; 255
     f12:	6f 4f       	sbci	r22, 0xFF	; 255
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	8f 4f       	sbci	r24, 0xFF	; 255
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	22 2e       	mov	r2, r18
     f1c:	33 2e       	mov	r3, r19
     f1e:	44 2e       	mov	r4, r20
     f20:	55 2e       	mov	r5, r21
     f22:	66 2e       	mov	r6, r22
     f24:	77 2e       	mov	r7, r23
     f26:	88 2e       	mov	r8, r24
     f28:	99 2e       	mov	r9, r25
     f2a:	aa 24       	eor	r10, r10
     f2c:	aa 94       	dec	r10
     f2e:	b1 2c       	mov	r11, r1
     f30:	c1 2c       	mov	r12, r1
     f32:	d1 2c       	mov	r13, r1
     f34:	e1 2c       	mov	r14, r1
     f36:	f1 2c       	mov	r15, r1
     f38:	00 e0       	ldi	r16, 0x00	; 0
     f3a:	10 e0       	ldi	r17, 0x00	; 0
     f3c:	22 2d       	mov	r18, r2
     f3e:	33 2d       	mov	r19, r3
     f40:	44 2d       	mov	r20, r4
     f42:	55 2d       	mov	r21, r5
     f44:	66 2d       	mov	r22, r6
     f46:	77 2d       	mov	r23, r7
     f48:	88 2d       	mov	r24, r8
     f4a:	99 2d       	mov	r25, r9
     f4c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__udivdi3>
     f50:	a2 2e       	mov	r10, r18
     f52:	b3 2e       	mov	r11, r19
     f54:	c4 2e       	mov	r12, r20
     f56:	d5 2e       	mov	r13, r21
     f58:	e6 2e       	mov	r14, r22
     f5a:	f7 2e       	mov	r15, r23
     f5c:	08 2f       	mov	r16, r24
     f5e:	19 2f       	mov	r17, r25
     f60:	2a 2d       	mov	r18, r10
     f62:	3b 2d       	mov	r19, r11
     f64:	4c 2d       	mov	r20, r12
     f66:	5d 2d       	mov	r21, r13
     f68:	6e 2d       	mov	r22, r14
     f6a:	7f 2d       	mov	r23, r15
     f6c:	80 2f       	mov	r24, r16
     f6e:	91 2f       	mov	r25, r17
     f70:	2b 83       	std	Y+3, r18	; 0x03
     f72:	3c 83       	std	Y+4, r19	; 0x04
     f74:	4d 83       	std	Y+5, r20	; 0x05
     f76:	5e 83       	std	Y+6, r21	; 0x06
		
			break;
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <Configure_Timer_Tick+0x3ec>
			
		default:
		
			return false;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	88 c2       	rjmp	.+1296   	; 0x148e <Configure_Timer_Tick+0x8fc>
		
	}


	if(Calculated_Prescaler > 1024){  // The required count will overflow the selected timer, even with the largest available prescaler
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	ad 81       	ldd	r26, Y+5	; 0x05
     f84:	be 81       	ldd	r27, Y+6	; 0x06
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	94 40       	sbci	r25, 0x04	; 4
     f8a:	a1 05       	cpc	r26, r1
     f8c:	b1 05       	cpc	r27, r1
     f8e:	08 f4       	brcc	.+2      	; 0xf92 <Configure_Timer_Tick+0x400>
     f90:	9d c0       	rjmp	.+314    	; 0x10cc <Configure_Timer_Tick+0x53a>

		Prescaler = 1024;
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	94 e0       	ldi	r25, 0x04	; 4
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
		//Adjusted_Cycles = (((TC_CLK + (F_CLK*Prescaler/2))/F_CLK*Prescaler) * Avg_ISR_Cycles); // I may revisit this. Quite challenging to get right, and even harder to get consistently right

		Calculated_Ticks[Timer] = (Scaled_Ticks >> 10);
     f9a:	88 a9       	ldd	r24, Y+48	; 0x30
     f9c:	e8 2f       	mov	r30, r24
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	28 89       	ldd	r18, Y+16	; 0x10
     fa2:	39 89       	ldd	r19, Y+17	; 0x11
     fa4:	4a 89       	ldd	r20, Y+18	; 0x12
     fa6:	5b 89       	ldd	r21, Y+19	; 0x13
     fa8:	6c 89       	ldd	r22, Y+20	; 0x14
     faa:	7d 89       	ldd	r23, Y+21	; 0x15
     fac:	8e 89       	ldd	r24, Y+22	; 0x16
     fae:	9f 89       	ldd	r25, Y+23	; 0x17
     fb0:	0a e0       	ldi	r16, 0x0A	; 10
     fb2:	0e 94 35 0b 	call	0x166a	; 0x166a <__lshrdi3>
     fb6:	a2 2e       	mov	r10, r18
     fb8:	b3 2e       	mov	r11, r19
     fba:	c4 2e       	mov	r12, r20
     fbc:	d5 2e       	mov	r13, r21
     fbe:	e6 2e       	mov	r14, r22
     fc0:	f7 2e       	mov	r15, r23
     fc2:	08 2f       	mov	r16, r24
     fc4:	19 2f       	mov	r17, r25
     fc6:	d6 01       	movw	r26, r12
     fc8:	c5 01       	movw	r24, r10
     fca:	9f 01       	movw	r18, r30
     fcc:	22 0f       	add	r18, r18
     fce:	33 1f       	adc	r19, r19
     fd0:	22 0f       	add	r18, r18
     fd2:	33 1f       	adc	r19, r19
     fd4:	2b 5c       	subi	r18, 0xCB	; 203
     fd6:	3e 4f       	sbci	r19, 0xFE	; 254
     fd8:	f9 01       	movw	r30, r18
     fda:	80 83       	st	Z, r24
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	a2 83       	std	Z+2, r26	; 0x02
     fe0:	b3 83       	std	Z+3, r27	; 0x03
		Remaining_Ticks[Timer] = Calculated_Ticks[Timer];
     fe2:	88 a9       	ldd	r24, Y+48	; 0x30
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	88 a9       	ldd	r24, Y+48	; 0x30
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	8b 5c       	subi	r24, 0xCB	; 203
     ff8:	9e 4f       	sbci	r25, 0xFE	; 254
     ffa:	fc 01       	movw	r30, r24
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	a2 81       	ldd	r26, Z+2	; 0x02
    1002:	b3 81       	ldd	r27, Z+3	; 0x03
    1004:	22 0f       	add	r18, r18
    1006:	33 1f       	adc	r19, r19
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	2f 5b       	subi	r18, 0xBF	; 191
    100e:	3e 4f       	sbci	r19, 0xFE	; 254
    1010:	f9 01       	movw	r30, r18
    1012:	80 83       	st	Z, r24
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	a2 83       	std	Z+2, r26	; 0x02
    1018:	b3 83       	std	Z+3, r27	; 0x03
		
		switch(Timer){
    101a:	88 a9       	ldd	r24, Y+48	; 0x30
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	91 05       	cpc	r25, r1
    1024:	f9 f0       	breq	.+62     	; 0x1064 <Configure_Timer_Tick+0x4d2>
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	91 05       	cpc	r25, r1
    102a:	a9 f1       	breq	.+106    	; 0x1096 <Configure_Timer_Tick+0x504>
    102c:	89 2b       	or	r24, r25
    102e:	09 f0       	breq	.+2      	; 0x1032 <Configure_Timer_Tick+0x4a0>
    1030:	4b c0       	rjmp	.+150    	; 0x10c8 <Configure_Timer_Tick+0x536>
			
			case _16_bit:
				
				TCCR1B = (1 << CS12) | (1 << CS10) | (1 << WGM12); // Set prescaler to 1024, CTC mode (TCCR = Timer counter control register)
    1032:	81 e8       	ldi	r24, 0x81	; 129
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	2d e0       	ldi	r18, 0x0D	; 13
    1038:	fc 01       	movw	r30, r24
    103a:	20 83       	st	Z, r18
								
				OCR1AH = 0xFF;
    103c:	89 e8       	ldi	r24, 0x89	; 137
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	2f ef       	ldi	r18, 0xFF	; 255
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18
				OCR1AL = 0xFF; // Timer begins
    1046:	88 e8       	ldi	r24, 0x88	; 136
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	2f ef       	ldi	r18, 0xFF	; 255
    104c:	fc 01       	movw	r30, r24
    104e:	20 83       	st	Z, r18
				
				TIMSK1 |= (1 << OCIE1A); // Timer/Counter1 Interrupt Mask Register -> Enabled interrupt for progrm at TIMER1_COMPA_vect to be executed on compare match
    1050:	8f e6       	ldi	r24, 0x6F	; 111
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	2f e6       	ldi	r18, 0x6F	; 111
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	f9 01       	movw	r30, r18
    105a:	20 81       	ld	r18, Z
    105c:	22 60       	ori	r18, 0x02	; 2
    105e:	fc 01       	movw	r30, r24
    1060:	20 83       	st	Z, r18
				break;
    1062:	32 c0       	rjmp	.+100    	; 0x10c8 <Configure_Timer_Tick+0x536>
			
			case _8_bit1:
				
				TCCR0A = (1 << WGM01);
    1064:	84 e4       	ldi	r24, 0x44	; 68
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	22 e0       	ldi	r18, 0x02	; 2
    106a:	fc 01       	movw	r30, r24
    106c:	20 83       	st	Z, r18
				TCCR0B = (1 << CS02) | (1 << CS00);
    106e:	85 e4       	ldi	r24, 0x45	; 69
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	25 e0       	ldi	r18, 0x05	; 5
    1074:	fc 01       	movw	r30, r24
    1076:	20 83       	st	Z, r18
				
				TIMSK0 |= (1 << OCIE0A);
    1078:	8e e6       	ldi	r24, 0x6E	; 110
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	2e e6       	ldi	r18, 0x6E	; 110
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	f9 01       	movw	r30, r18
    1082:	20 81       	ld	r18, Z
    1084:	22 60       	ori	r18, 0x02	; 2
    1086:	fc 01       	movw	r30, r24
    1088:	20 83       	st	Z, r18
				OCR0A = 0xFF;
    108a:	87 e4       	ldi	r24, 0x47	; 71
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	2f ef       	ldi	r18, 0xFF	; 255
    1090:	fc 01       	movw	r30, r24
    1092:	20 83       	st	Z, r18
				break;
    1094:	19 c0       	rjmp	.+50     	; 0x10c8 <Configure_Timer_Tick+0x536>
			
			case _8_bit2:

				TCCR2A = (1 << WGM21);
    1096:	80 eb       	ldi	r24, 0xB0	; 176
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	22 e0       	ldi	r18, 0x02	; 2
    109c:	fc 01       	movw	r30, r24
    109e:	20 83       	st	Z, r18
				TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);
    10a0:	81 eb       	ldi	r24, 0xB1	; 177
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	27 e0       	ldi	r18, 0x07	; 7
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18

				TIMSK2 |= (1 << OCIE2A);
    10aa:	80 e7       	ldi	r24, 0x70	; 112
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	20 e7       	ldi	r18, 0x70	; 112
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	f9 01       	movw	r30, r18
    10b4:	20 81       	ld	r18, Z
    10b6:	22 60       	ori	r18, 0x02	; 2
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 83       	st	Z, r18
				
				OCR2A = 0xFF;
    10bc:	83 eb       	ldi	r24, 0xB3	; 179
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	2f ef       	ldi	r18, 0xFF	; 255
    10c2:	fc 01       	movw	r30, r24
    10c4:	20 83       	st	Z, r18
				break;
    10c6:	00 00       	nop
			
		}
		

		return true;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	e1 c1       	rjmp	.+962    	; 0x148e <Configure_Timer_Tick+0x8fc>
		
	}else{
		
		Calculated_Ticks[Timer] = 0;
    10cc:	88 a9       	ldd	r24, Y+48	; 0x30
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	8b 5c       	subi	r24, 0xCB	; 203
    10dc:	9e 4f       	sbci	r25, 0xFE	; 254
    10de:	fc 01       	movw	r30, r24
    10e0:	10 82       	st	Z, r1
    10e2:	11 82       	std	Z+1, r1	; 0x01
    10e4:	12 82       	std	Z+2, r1	; 0x02
    10e6:	13 82       	std	Z+3, r1	; 0x03
		
		uint16_t Clock_Dividers[5] = {1, 8, 64, 256, 1024}; 
    10e8:	8a e0       	ldi	r24, 0x0A	; 10
    10ea:	e6 e0       	ldi	r30, 0x06	; 6
    10ec:	f1 e0       	ldi	r31, 0x01	; 1
    10ee:	de 01       	movw	r26, r28
    10f0:	90 96       	adiw	r26, 0x20	; 32
    10f2:	01 90       	ld	r0, Z+
    10f4:	0d 92       	st	X+, r0
    10f6:	8a 95       	dec	r24
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <Configure_Timer_Tick+0x560>
		
		for(uint8_t i = 0; i <= 4; i++){  // Logic to ensure that the Raw_Count <= uint16_t
    10fa:	1f 82       	std	Y+7, r1	; 0x07
    10fc:	2e c0       	rjmp	.+92     	; 0x115a <Configure_Timer_Tick+0x5c8>
			
			if(Clock_Dividers[i] >= Calculated_Prescaler){
    10fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	9e 01       	movw	r18, r28
    110a:	2f 5f       	subi	r18, 0xFF	; 255
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	82 0f       	add	r24, r18
    1110:	93 1f       	adc	r25, r19
    1112:	4f 96       	adiw	r24, 0x1f	; 31
    1114:	fc 01       	movw	r30, r24
    1116:	80 81       	ld	r24, Z
    1118:	91 81       	ldd	r25, Z+1	; 0x01
    111a:	9c 01       	movw	r18, r24
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	ad 81       	ldd	r26, Y+5	; 0x05
    1126:	be 81       	ldd	r27, Y+6	; 0x06
    1128:	28 17       	cp	r18, r24
    112a:	39 07       	cpc	r19, r25
    112c:	4a 07       	cpc	r20, r26
    112e:	5b 07       	cpc	r21, r27
    1130:	88 f0       	brcs	.+34     	; 0x1154 <Configure_Timer_Tick+0x5c2>
				Prescaler = Clock_Dividers[i];
    1132:	8f 81       	ldd	r24, Y+7	; 0x07
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	9e 01       	movw	r18, r28
    113e:	2f 5f       	subi	r18, 0xFF	; 255
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	82 0f       	add	r24, r18
    1144:	93 1f       	adc	r25, r19
    1146:	4f 96       	adiw	r24, 0x1f	; 31
    1148:	fc 01       	movw	r30, r24
    114a:	80 81       	ld	r24, Z
    114c:	91 81       	ldd	r25, Z+1	; 0x01
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
				break;
    1152:	06 c0       	rjmp	.+12     	; 0x1160 <Configure_Timer_Tick+0x5ce>
		
		Calculated_Ticks[Timer] = 0;
		
		uint16_t Clock_Dividers[5] = {1, 8, 64, 256, 1024}; 
		
		for(uint8_t i = 0; i <= 4; i++){  // Logic to ensure that the Raw_Count <= uint16_t
    1154:	8f 81       	ldd	r24, Y+7	; 0x07
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	8f 83       	std	Y+7, r24	; 0x07
    115a:	8f 81       	ldd	r24, Y+7	; 0x07
    115c:	85 30       	cpi	r24, 0x05	; 5
    115e:	78 f2       	brcs	.-98     	; 0x10fe <Configure_Timer_Tick+0x56c>
			}
			
		}
	}
	
	uint32_t Denominator =  Prescaler * Unit;
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	9c 01       	movw	r18, r24
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	8c a5       	ldd	r24, Y+44	; 0x2c
    116c:	9d a5       	ldd	r25, Y+45	; 0x2d
    116e:	ae a5       	ldd	r26, Y+46	; 0x2e
    1170:	bf a5       	ldd	r27, Y+47	; 0x2f
    1172:	bc 01       	movw	r22, r24
    1174:	cd 01       	movw	r24, r26
    1176:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__mulsi3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	88 8f       	std	Y+24, r24	; 0x18
    1180:	99 8f       	std	Y+25, r25	; 0x19
    1182:	aa 8f       	std	Y+26, r26	; 0x1a
    1184:	bb 8f       	std	Y+27, r27	; 0x1b

	if(Denominator == 0) return false; // Unexpected error
    1186:	88 8d       	ldd	r24, Y+24	; 0x18
    1188:	99 8d       	ldd	r25, Y+25	; 0x19
    118a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    118c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    118e:	89 2b       	or	r24, r25
    1190:	8a 2b       	or	r24, r26
    1192:	8b 2b       	or	r24, r27
    1194:	11 f4       	brne	.+4      	; 0x119a <Configure_Timer_Tick+0x608>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	7a c1       	rjmp	.+756    	; 0x148e <Configure_Timer_Tick+0x8fc>
	
	//Adjusted_Cycles = (((TC_CLK + (F_CLK*Prescaler/2))/F_CLK*Prescaler) * Avg_ISR_Cycles); 
	
	// Rounding integer division (A new trick I learned) reduces error of Timer_Top ideally to +- 0.5:
	uint32_t Timer_Top = ((Numerator + (Denominator/2)) / Denominator); 
    119a:	88 8d       	ldd	r24, Y+24	; 0x18
    119c:	99 8d       	ldd	r25, Y+25	; 0x19
    119e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    11a0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    11a2:	b6 95       	lsr	r27
    11a4:	a7 95       	ror	r26
    11a6:	97 95       	ror	r25
    11a8:	87 95       	ror	r24
    11aa:	5c 01       	movw	r10, r24
    11ac:	6d 01       	movw	r12, r26
    11ae:	e1 2c       	mov	r14, r1
    11b0:	f1 2c       	mov	r15, r1
    11b2:	87 01       	movw	r16, r14
    11b4:	2a 2d       	mov	r18, r10
    11b6:	3b 2d       	mov	r19, r11
    11b8:	4c 2d       	mov	r20, r12
    11ba:	5d 2d       	mov	r21, r13
    11bc:	6e 2d       	mov	r22, r14
    11be:	7f 2d       	mov	r23, r15
    11c0:	80 2f       	mov	r24, r16
    11c2:	91 2f       	mov	r25, r17
    11c4:	a8 84       	ldd	r10, Y+8	; 0x08
    11c6:	b9 84       	ldd	r11, Y+9	; 0x09
    11c8:	ca 84       	ldd	r12, Y+10	; 0x0a
    11ca:	db 84       	ldd	r13, Y+11	; 0x0b
    11cc:	ec 84       	ldd	r14, Y+12	; 0x0c
    11ce:	fd 84       	ldd	r15, Y+13	; 0x0d
    11d0:	0e 85       	ldd	r16, Y+14	; 0x0e
    11d2:	1f 85       	ldd	r17, Y+15	; 0x0f
    11d4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__adddi3>
    11d8:	22 2e       	mov	r2, r18
    11da:	33 2e       	mov	r3, r19
    11dc:	44 2e       	mov	r4, r20
    11de:	55 2e       	mov	r5, r21
    11e0:	66 2e       	mov	r6, r22
    11e2:	77 2e       	mov	r7, r23
    11e4:	88 2e       	mov	r8, r24
    11e6:	99 2e       	mov	r9, r25
    11e8:	88 8d       	ldd	r24, Y+24	; 0x18
    11ea:	99 8d       	ldd	r25, Y+25	; 0x19
    11ec:	aa 8d       	ldd	r26, Y+26	; 0x1a
    11ee:	bb 8d       	ldd	r27, Y+27	; 0x1b
    11f0:	9c 01       	movw	r18, r24
    11f2:	ad 01       	movw	r20, r26
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	cb 01       	movw	r24, r22
    11fa:	a2 2e       	mov	r10, r18
    11fc:	b3 2e       	mov	r11, r19
    11fe:	c4 2e       	mov	r12, r20
    1200:	d5 2e       	mov	r13, r21
    1202:	e6 2e       	mov	r14, r22
    1204:	f7 2e       	mov	r15, r23
    1206:	08 2f       	mov	r16, r24
    1208:	19 2f       	mov	r17, r25
    120a:	22 2d       	mov	r18, r2
    120c:	33 2d       	mov	r19, r3
    120e:	44 2d       	mov	r20, r4
    1210:	55 2d       	mov	r21, r5
    1212:	66 2d       	mov	r22, r6
    1214:	77 2d       	mov	r23, r7
    1216:	88 2d       	mov	r24, r8
    1218:	99 2d       	mov	r25, r9
    121a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__udivdi3>
    121e:	a2 2e       	mov	r10, r18
    1220:	b3 2e       	mov	r11, r19
    1222:	c4 2e       	mov	r12, r20
    1224:	d5 2e       	mov	r13, r21
    1226:	e6 2e       	mov	r14, r22
    1228:	f7 2e       	mov	r15, r23
    122a:	08 2f       	mov	r16, r24
    122c:	19 2f       	mov	r17, r25
    122e:	2a 2d       	mov	r18, r10
    1230:	3b 2d       	mov	r19, r11
    1232:	4c 2d       	mov	r20, r12
    1234:	5d 2d       	mov	r21, r13
    1236:	6e 2d       	mov	r22, r14
    1238:	7f 2d       	mov	r23, r15
    123a:	80 2f       	mov	r24, r16
    123c:	91 2f       	mov	r25, r17
    123e:	2c 8f       	std	Y+28, r18	; 0x1c
    1240:	3d 8f       	std	Y+29, r19	; 0x1d
    1242:	4e 8f       	std	Y+30, r20	; 0x1e
    1244:	5f 8f       	std	Y+31, r21	; 0x1f
	
	if (Timer_Top == 0) return false; //Unexpected error
    1246:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1248:	9d 8d       	ldd	r25, Y+29	; 0x1d
    124a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    124c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    124e:	89 2b       	or	r24, r25
    1250:	8a 2b       	or	r24, r26
    1252:	8b 2b       	or	r24, r27
    1254:	11 f4       	brne	.+4      	; 0x125a <Configure_Timer_Tick+0x6c8>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	1a c1       	rjmp	.+564    	; 0x148e <Configure_Timer_Tick+0x8fc>

	if( (Timer == _8_bit1 || Timer == _8_bit2) && Timer_Top > 255 ){
    125a:	88 a9       	ldd	r24, Y+48	; 0x30
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	19 f0       	breq	.+6      	; 0x1266 <Configure_Timer_Tick+0x6d4>
    1260:	88 a9       	ldd	r24, Y+48	; 0x30
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	61 f4       	brne	.+24     	; 0x127e <Configure_Timer_Tick+0x6ec>
    1266:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1268:	9d 8d       	ldd	r25, Y+29	; 0x1d
    126a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    126c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    126e:	8f 3f       	cpi	r24, 0xFF	; 255
    1270:	91 05       	cpc	r25, r1
    1272:	a1 05       	cpc	r26, r1
    1274:	b1 05       	cpc	r27, r1
    1276:	19 f0       	breq	.+6      	; 0x127e <Configure_Timer_Tick+0x6ec>
    1278:	10 f0       	brcs	.+4      	; 0x127e <Configure_Timer_Tick+0x6ec>
		return false; // Unexpected error
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	08 c1       	rjmp	.+528    	; 0x148e <Configure_Timer_Tick+0x8fc>
	}else if(Timer == _16_bit && Timer_Top > 65535){
    127e:	88 a9       	ldd	r24, Y+48	; 0x30
    1280:	88 23       	and	r24, r24
    1282:	51 f4       	brne	.+20     	; 0x1298 <Configure_Timer_Tick+0x706>
    1284:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1286:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1288:	ae 8d       	ldd	r26, Y+30	; 0x1e
    128a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	a1 40       	sbci	r26, 0x01	; 1
    1290:	b1 05       	cpc	r27, r1
    1292:	10 f0       	brcs	.+4      	; 0x1298 <Configure_Timer_Tick+0x706>
		return false;
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	fb c0       	rjmp	.+502    	; 0x148e <Configure_Timer_Tick+0x8fc>
	}
	
	switch(Timer){
    1298:	88 a9       	ldd	r24, Y+48	; 0x30
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <Configure_Timer_Tick+0x714>
    12a4:	5f c0       	rjmp	.+190    	; 0x1364 <Configure_Timer_Tick+0x7d2>
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <Configure_Timer_Tick+0x71c>
    12ac:	a7 c0       	rjmp	.+334    	; 0x13fc <Configure_Timer_Tick+0x86a>
    12ae:	89 2b       	or	r24, r25
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <Configure_Timer_Tick+0x722>
    12b2:	ec c0       	rjmp	.+472    	; 0x148c <Configure_Timer_Tick+0x8fa>
		
		case _16_bit:
			
			switch(Prescaler){ // Don't need to clear TCCRxB, as it will be assigned:
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	80 34       	cpi	r24, 0x40	; 64
    12ba:	91 05       	cpc	r25, r1
    12bc:	e9 f0       	breq	.+58     	; 0x12f8 <Configure_Timer_Tick+0x766>
    12be:	81 34       	cpi	r24, 0x41	; 65
    12c0:	91 05       	cpc	r25, r1
    12c2:	30 f4       	brcc	.+12     	; 0x12d0 <Configure_Timer_Tick+0x73e>
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	59 f0       	breq	.+22     	; 0x12e0 <Configure_Timer_Tick+0x74e>
    12ca:	08 97       	sbiw	r24, 0x08	; 8
    12cc:	79 f0       	breq	.+30     	; 0x12ec <Configure_Timer_Tick+0x75a>
    12ce:	26 c0       	rjmp	.+76     	; 0x131c <Configure_Timer_Tick+0x78a>
    12d0:	81 15       	cp	r24, r1
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	92 07       	cpc	r25, r18
    12d6:	b1 f0       	breq	.+44     	; 0x1304 <Configure_Timer_Tick+0x772>
    12d8:	81 15       	cp	r24, r1
    12da:	94 40       	sbci	r25, 0x04	; 4
    12dc:	c9 f0       	breq	.+50     	; 0x1310 <Configure_Timer_Tick+0x77e>
    12de:	1e c0       	rjmp	.+60     	; 0x131c <Configure_Timer_Tick+0x78a>
					
				case 1:
				
					TCCR1B = (1 << CS10);
    12e0:	81 e8       	ldi	r24, 0x81	; 129
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	21 e0       	ldi	r18, 0x01	; 1
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18
					break;
    12ea:	18 c0       	rjmp	.+48     	; 0x131c <Configure_Timer_Tick+0x78a>
					
				case 8:
				
					TCCR1B = (1 << CS11);
    12ec:	81 e8       	ldi	r24, 0x81	; 129
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	22 e0       	ldi	r18, 0x02	; 2
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 83       	st	Z, r18
					break;
    12f6:	12 c0       	rjmp	.+36     	; 0x131c <Configure_Timer_Tick+0x78a>
					
				case 64:
				
					TCCR1B = (1 << CS11) | (1 << CS10);
    12f8:	81 e8       	ldi	r24, 0x81	; 129
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	23 e0       	ldi	r18, 0x03	; 3
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
					break;
    1302:	0c c0       	rjmp	.+24     	; 0x131c <Configure_Timer_Tick+0x78a>
					
				case 256:
				
					TCCR1B = (1 << CS12);
    1304:	81 e8       	ldi	r24, 0x81	; 129
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	24 e0       	ldi	r18, 0x04	; 4
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
					break;
    130e:	06 c0       	rjmp	.+12     	; 0x131c <Configure_Timer_Tick+0x78a>
					
				case 1024:
				
					TCCR1B = (1 << CS12) | (1 << CS10);
    1310:	81 e8       	ldi	r24, 0x81	; 129
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	25 e0       	ldi	r18, 0x05	; 5
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
					break;
    131a:	00 00       	nop
					
				}
				
			TCCR1B |= (1 << WGM12); 
    131c:	81 e8       	ldi	r24, 0x81	; 129
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	21 e8       	ldi	r18, 0x81	; 129
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	f9 01       	movw	r30, r18
    1326:	20 81       	ld	r18, Z
    1328:	28 60       	ori	r18, 0x08	; 8
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
			
			OCR1AH = (Timer_Top >> 8) & 0xFF;
    132e:	29 e8       	ldi	r18, 0x89	; 137
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1334:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1336:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1338:	bf 8d       	ldd	r27, Y+31	; 0x1f
    133a:	89 2f       	mov	r24, r25
    133c:	9a 2f       	mov	r25, r26
    133e:	ab 2f       	mov	r26, r27
    1340:	bb 27       	eor	r27, r27
    1342:	f9 01       	movw	r30, r18
    1344:	80 83       	st	Z, r24
			TIMSK1 |= (1 << OCIE1A); // Timer/Counter1 Interrupt Mask Register -> Enabled interrupt for progrm at TIMER1_COMPA_vect to be executed on compare match
    1346:	8f e6       	ldi	r24, 0x6F	; 111
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	2f e6       	ldi	r18, 0x6F	; 111
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	f9 01       	movw	r30, r18
    1350:	20 81       	ld	r18, Z
    1352:	22 60       	ori	r18, 0x02	; 2
    1354:	fc 01       	movw	r30, r24
    1356:	20 83       	st	Z, r18
			OCR1AL = (Timer_Top & 0xFF); // Timer begins
    1358:	88 e8       	ldi	r24, 0x88	; 136
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
				
			break;
    1362:	94 c0       	rjmp	.+296    	; 0x148c <Configure_Timer_Tick+0x8fa>
			
		case _8_bit1:
		
			switch(Prescaler){ 
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	80 34       	cpi	r24, 0x40	; 64
    136a:	91 05       	cpc	r25, r1
    136c:	e9 f0       	breq	.+58     	; 0x13a8 <Configure_Timer_Tick+0x816>
    136e:	81 34       	cpi	r24, 0x41	; 65
    1370:	91 05       	cpc	r25, r1
    1372:	30 f4       	brcc	.+12     	; 0x1380 <Configure_Timer_Tick+0x7ee>
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	59 f0       	breq	.+22     	; 0x1390 <Configure_Timer_Tick+0x7fe>
    137a:	08 97       	sbiw	r24, 0x08	; 8
    137c:	79 f0       	breq	.+30     	; 0x139c <Configure_Timer_Tick+0x80a>
    137e:	26 c0       	rjmp	.+76     	; 0x13cc <Configure_Timer_Tick+0x83a>
    1380:	81 15       	cp	r24, r1
    1382:	f1 e0       	ldi	r31, 0x01	; 1
    1384:	9f 07       	cpc	r25, r31
    1386:	b1 f0       	breq	.+44     	; 0x13b4 <Configure_Timer_Tick+0x822>
    1388:	81 15       	cp	r24, r1
    138a:	94 40       	sbci	r25, 0x04	; 4
    138c:	c9 f0       	breq	.+50     	; 0x13c0 <Configure_Timer_Tick+0x82e>
    138e:	1e c0       	rjmp	.+60     	; 0x13cc <Configure_Timer_Tick+0x83a>
				
				case 1:
				
					TCCR0B = (1 << CS00);
    1390:	85 e4       	ldi	r24, 0x45	; 69
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	21 e0       	ldi	r18, 0x01	; 1
    1396:	fc 01       	movw	r30, r24
    1398:	20 83       	st	Z, r18
					break;
    139a:	18 c0       	rjmp	.+48     	; 0x13cc <Configure_Timer_Tick+0x83a>
				
				case 8:
				
					TCCR0B = (1 << CS01);
    139c:	85 e4       	ldi	r24, 0x45	; 69
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	22 e0       	ldi	r18, 0x02	; 2
    13a2:	fc 01       	movw	r30, r24
    13a4:	20 83       	st	Z, r18
					break;
    13a6:	12 c0       	rjmp	.+36     	; 0x13cc <Configure_Timer_Tick+0x83a>
				
				case 64:
				
					TCCR0B = (1 << CS01) | (1 << CS00);
    13a8:	85 e4       	ldi	r24, 0x45	; 69
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	23 e0       	ldi	r18, 0x03	; 3
    13ae:	fc 01       	movw	r30, r24
    13b0:	20 83       	st	Z, r18
					break;
    13b2:	0c c0       	rjmp	.+24     	; 0x13cc <Configure_Timer_Tick+0x83a>
				
				case 256:
					
					TCCR0B = (1 << CS02);
    13b4:	85 e4       	ldi	r24, 0x45	; 69
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	24 e0       	ldi	r18, 0x04	; 4
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 83       	st	Z, r18
					break;
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <Configure_Timer_Tick+0x83a>
				
				case 1024:
				
					TCCR0B = (1 << CS02) | (1 << CS00);
    13c0:	85 e4       	ldi	r24, 0x45	; 69
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	25 e0       	ldi	r18, 0x05	; 5
    13c6:	fc 01       	movw	r30, r24
    13c8:	20 83       	st	Z, r18
					break;
    13ca:	00 00       	nop
				
			}
			

			TCCR0A |= (1 << WGM01); 	
    13cc:	84 e4       	ldi	r24, 0x44	; 68
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	24 e4       	ldi	r18, 0x44	; 68
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	f9 01       	movw	r30, r18
    13d6:	20 81       	ld	r18, Z
    13d8:	22 60       	ori	r18, 0x02	; 2
    13da:	fc 01       	movw	r30, r24
    13dc:	20 83       	st	Z, r18
						
			TIMSK0 |= (1 << OCIE0A);
    13de:	8e e6       	ldi	r24, 0x6E	; 110
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	2e e6       	ldi	r18, 0x6E	; 110
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	f9 01       	movw	r30, r18
    13e8:	20 81       	ld	r18, Z
    13ea:	22 60       	ori	r18, 0x02	; 2
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
			OCR0A = Timer_Top;		
    13f0:	87 e4       	ldi	r24, 0x47	; 71
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    13f6:	fc 01       	movw	r30, r24
    13f8:	20 83       	st	Z, r18
		
			break;
    13fa:	48 c0       	rjmp	.+144    	; 0x148c <Configure_Timer_Tick+0x8fa>
			
		case _8_bit2:

			switch(Prescaler){
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	80 34       	cpi	r24, 0x40	; 64
    1402:	91 05       	cpc	r25, r1
    1404:	e9 f0       	breq	.+58     	; 0x1440 <Configure_Timer_Tick+0x8ae>
    1406:	81 34       	cpi	r24, 0x41	; 65
    1408:	91 05       	cpc	r25, r1
    140a:	30 f4       	brcc	.+12     	; 0x1418 <Configure_Timer_Tick+0x886>
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	59 f0       	breq	.+22     	; 0x1428 <Configure_Timer_Tick+0x896>
    1412:	08 97       	sbiw	r24, 0x08	; 8
    1414:	79 f0       	breq	.+30     	; 0x1434 <Configure_Timer_Tick+0x8a2>
    1416:	26 c0       	rjmp	.+76     	; 0x1464 <Configure_Timer_Tick+0x8d2>
    1418:	81 15       	cp	r24, r1
    141a:	f1 e0       	ldi	r31, 0x01	; 1
    141c:	9f 07       	cpc	r25, r31
    141e:	b1 f0       	breq	.+44     	; 0x144c <Configure_Timer_Tick+0x8ba>
    1420:	81 15       	cp	r24, r1
    1422:	94 40       	sbci	r25, 0x04	; 4
    1424:	c9 f0       	breq	.+50     	; 0x1458 <Configure_Timer_Tick+0x8c6>
    1426:	1e c0       	rjmp	.+60     	; 0x1464 <Configure_Timer_Tick+0x8d2>
			
				case 1:
			
				TCCR2B = (1 << CS20);
    1428:	81 eb       	ldi	r24, 0xB1	; 177
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	21 e0       	ldi	r18, 0x01	; 1
    142e:	fc 01       	movw	r30, r24
    1430:	20 83       	st	Z, r18
				break;
    1432:	18 c0       	rjmp	.+48     	; 0x1464 <Configure_Timer_Tick+0x8d2>
			
				case 8:
			
				TCCR2B = (1 << CS21);
    1434:	81 eb       	ldi	r24, 0xB1	; 177
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	22 e0       	ldi	r18, 0x02	; 2
    143a:	fc 01       	movw	r30, r24
    143c:	20 83       	st	Z, r18
				break;
    143e:	12 c0       	rjmp	.+36     	; 0x1464 <Configure_Timer_Tick+0x8d2>
			
				case 64:
			
				TCCR2B = (1 << CS22);
    1440:	81 eb       	ldi	r24, 0xB1	; 177
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	24 e0       	ldi	r18, 0x04	; 4
    1446:	fc 01       	movw	r30, r24
    1448:	20 83       	st	Z, r18
				break;
    144a:	0c c0       	rjmp	.+24     	; 0x1464 <Configure_Timer_Tick+0x8d2>
			
				case 256:
			
				TCCR2B = (1 << CS22) |  (1<<CS21);
    144c:	81 eb       	ldi	r24, 0xB1	; 177
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	26 e0       	ldi	r18, 0x06	; 6
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
				break;
    1456:	06 c0       	rjmp	.+12     	; 0x1464 <Configure_Timer_Tick+0x8d2>
			
				case 1024:
			
				TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);
    1458:	81 eb       	ldi	r24, 0xB1	; 177
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	27 e0       	ldi	r18, 0x07	; 7
    145e:	fc 01       	movw	r30, r24
    1460:	20 83       	st	Z, r18
				break;
    1462:	00 00       	nop
			
			}
			
			TCCR2A = (1 << WGM21);		
    1464:	80 eb       	ldi	r24, 0xB0	; 176
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	22 e0       	ldi	r18, 0x02	; 2
    146a:	fc 01       	movw	r30, r24
    146c:	20 83       	st	Z, r18
				
			TIMSK2 |= (1 << OCIE2A);
    146e:	80 e7       	ldi	r24, 0x70	; 112
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	20 e7       	ldi	r18, 0x70	; 112
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	f9 01       	movw	r30, r18
    1478:	20 81       	ld	r18, Z
    147a:	22 60       	ori	r18, 0x02	; 2
    147c:	fc 01       	movw	r30, r24
    147e:	20 83       	st	Z, r18
			OCR2A = Timer_Top; 
    1480:	83 eb       	ldi	r24, 0xB3	; 179
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1486:	fc 01       	movw	r30, r24
    1488:	20 83       	st	Z, r18
		
			break;
    148a:	00 00       	nop
				
	}
	
	return true;
    148c:	81 e0       	ldi	r24, 0x01	; 1

}
    148e:	e0 96       	adiw	r28, 0x30	; 48
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	cf 90       	pop	r12
    14aa:	bf 90       	pop	r11
    14ac:	af 90       	pop	r10
    14ae:	9f 90       	pop	r9
    14b0:	8f 90       	pop	r8
    14b2:	7f 90       	pop	r7
    14b4:	6f 90       	pop	r6
    14b6:	5f 90       	pop	r5
    14b8:	4f 90       	pop	r4
    14ba:	3f 90       	pop	r3
    14bc:	2f 90       	pop	r2
    14be:	08 95       	ret

000014c0 <__mulsi3>:
    14c0:	db 01       	movw	r26, r22
    14c2:	8f 93       	push	r24
    14c4:	9f 93       	push	r25
    14c6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__muluhisi3>
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	a2 9f       	mul	r26, r18
    14d0:	80 0d       	add	r24, r0
    14d2:	91 1d       	adc	r25, r1
    14d4:	a3 9f       	mul	r26, r19
    14d6:	90 0d       	add	r25, r0
    14d8:	b2 9f       	mul	r27, r18
    14da:	90 0d       	add	r25, r0
    14dc:	11 24       	eor	r1, r1
    14de:	08 95       	ret

000014e0 <__muluhisi3>:
    14e0:	0e 94 6f 0b 	call	0x16de	; 0x16de <__umulhisi3>
    14e4:	a5 9f       	mul	r26, r21
    14e6:	90 0d       	add	r25, r0
    14e8:	b4 9f       	mul	r27, r20
    14ea:	90 0d       	add	r25, r0
    14ec:	a4 9f       	mul	r26, r20
    14ee:	80 0d       	add	r24, r0
    14f0:	91 1d       	adc	r25, r1
    14f2:	11 24       	eor	r1, r1
    14f4:	08 95       	ret

000014f6 <__muldi3>:
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	1f 93       	push	r17
    14fc:	0f 93       	push	r16
    14fe:	9a 9d       	mul	r25, r10
    1500:	f0 2d       	mov	r31, r0
    1502:	21 9f       	mul	r18, r17
    1504:	f0 0d       	add	r31, r0
    1506:	8b 9d       	mul	r24, r11
    1508:	f0 0d       	add	r31, r0
    150a:	8a 9d       	mul	r24, r10
    150c:	e0 2d       	mov	r30, r0
    150e:	f1 0d       	add	r31, r1
    1510:	03 9f       	mul	r16, r19
    1512:	f0 0d       	add	r31, r0
    1514:	02 9f       	mul	r16, r18
    1516:	e0 0d       	add	r30, r0
    1518:	f1 1d       	adc	r31, r1
    151a:	4e 9d       	mul	r20, r14
    151c:	e0 0d       	add	r30, r0
    151e:	f1 1d       	adc	r31, r1
    1520:	5e 9d       	mul	r21, r14
    1522:	f0 0d       	add	r31, r0
    1524:	4f 9d       	mul	r20, r15
    1526:	f0 0d       	add	r31, r0
    1528:	7f 93       	push	r23
    152a:	6f 93       	push	r22
    152c:	bf 92       	push	r11
    152e:	af 92       	push	r10
    1530:	5f 93       	push	r21
    1532:	4f 93       	push	r20
    1534:	d5 01       	movw	r26, r10
    1536:	0e 94 6f 0b 	call	0x16de	; 0x16de <__umulhisi3>
    153a:	8b 01       	movw	r16, r22
    153c:	ac 01       	movw	r20, r24
    153e:	d7 01       	movw	r26, r14
    1540:	0e 94 6f 0b 	call	0x16de	; 0x16de <__umulhisi3>
    1544:	eb 01       	movw	r28, r22
    1546:	e8 0f       	add	r30, r24
    1548:	f9 1f       	adc	r31, r25
    154a:	d6 01       	movw	r26, r12
    154c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__muldi3_6>
    1550:	2f 91       	pop	r18
    1552:	3f 91       	pop	r19
    1554:	d6 01       	movw	r26, r12
    1556:	0e 94 6f 0b 	call	0x16de	; 0x16de <__umulhisi3>
    155a:	c6 0f       	add	r28, r22
    155c:	d7 1f       	adc	r29, r23
    155e:	e8 1f       	adc	r30, r24
    1560:	f9 1f       	adc	r31, r25
    1562:	af 91       	pop	r26
    1564:	bf 91       	pop	r27
    1566:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__muldi3_6>
    156a:	2f 91       	pop	r18
    156c:	3f 91       	pop	r19
    156e:	0e 94 6f 0b 	call	0x16de	; 0x16de <__umulhisi3>
    1572:	c6 0f       	add	r28, r22
    1574:	d7 1f       	adc	r29, r23
    1576:	e8 1f       	adc	r30, r24
    1578:	f9 1f       	adc	r31, r25
    157a:	d6 01       	movw	r26, r12
    157c:	0e 94 6f 0b 	call	0x16de	; 0x16de <__umulhisi3>
    1580:	e6 0f       	add	r30, r22
    1582:	f7 1f       	adc	r31, r23
    1584:	98 01       	movw	r18, r16
    1586:	be 01       	movw	r22, r28
    1588:	cf 01       	movw	r24, r30
    158a:	11 24       	eor	r1, r1
    158c:	0f 91       	pop	r16
    158e:	1f 91       	pop	r17
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <__muldi3_6>:
    1596:	0e 94 6f 0b 	call	0x16de	; 0x16de <__umulhisi3>
    159a:	46 0f       	add	r20, r22
    159c:	57 1f       	adc	r21, r23
    159e:	c8 1f       	adc	r28, r24
    15a0:	d9 1f       	adc	r29, r25
    15a2:	08 f4       	brcc	.+2      	; 0x15a6 <__muldi3_6+0x10>
    15a4:	31 96       	adiw	r30, 0x01	; 1
    15a6:	08 95       	ret

000015a8 <__umoddi3>:
    15a8:	68 94       	set
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <__udivdi3_umoddi3>

000015ac <__udivdi3>:
    15ac:	e8 94       	clt

000015ae <__udivdi3_umoddi3>:
    15ae:	8f 92       	push	r8
    15b0:	9f 92       	push	r9
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__udivmod64>
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	9f 90       	pop	r9
    15c0:	8f 90       	pop	r8
    15c2:	08 95       	ret

000015c4 <__udivmod64>:
    15c4:	88 24       	eor	r8, r8
    15c6:	99 24       	eor	r9, r9
    15c8:	f4 01       	movw	r30, r8
    15ca:	e4 01       	movw	r28, r8
    15cc:	b0 e4       	ldi	r27, 0x40	; 64
    15ce:	9f 93       	push	r25
    15d0:	aa 27       	eor	r26, r26
    15d2:	9a 15       	cp	r25, r10
    15d4:	8b 04       	cpc	r8, r11
    15d6:	9c 04       	cpc	r9, r12
    15d8:	ed 05       	cpc	r30, r13
    15da:	fe 05       	cpc	r31, r14
    15dc:	cf 05       	cpc	r28, r15
    15de:	d0 07       	cpc	r29, r16
    15e0:	a1 07       	cpc	r26, r17
    15e2:	98 f4       	brcc	.+38     	; 0x160a <__udivmod64+0x46>
    15e4:	ad 2f       	mov	r26, r29
    15e6:	dc 2f       	mov	r29, r28
    15e8:	cf 2f       	mov	r28, r31
    15ea:	fe 2f       	mov	r31, r30
    15ec:	e9 2d       	mov	r30, r9
    15ee:	98 2c       	mov	r9, r8
    15f0:	89 2e       	mov	r8, r25
    15f2:	98 2f       	mov	r25, r24
    15f4:	87 2f       	mov	r24, r23
    15f6:	76 2f       	mov	r23, r22
    15f8:	65 2f       	mov	r22, r21
    15fa:	54 2f       	mov	r21, r20
    15fc:	43 2f       	mov	r20, r19
    15fe:	32 2f       	mov	r19, r18
    1600:	22 27       	eor	r18, r18
    1602:	b8 50       	subi	r27, 0x08	; 8
    1604:	31 f7       	brne	.-52     	; 0x15d2 <__udivmod64+0xe>
    1606:	bf 91       	pop	r27
    1608:	27 c0       	rjmp	.+78     	; 0x1658 <__udivmod64+0x94>
    160a:	1b 2e       	mov	r1, r27
    160c:	bf 91       	pop	r27
    160e:	bb 27       	eor	r27, r27
    1610:	22 0f       	add	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	44 1f       	adc	r20, r20
    1616:	55 1f       	adc	r21, r21
    1618:	66 1f       	adc	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	88 1c       	adc	r8, r8
    1622:	99 1c       	adc	r9, r9
    1624:	ee 1f       	adc	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	cc 1f       	adc	r28, r28
    162a:	dd 1f       	adc	r29, r29
    162c:	aa 1f       	adc	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	8a 14       	cp	r8, r10
    1632:	9b 04       	cpc	r9, r11
    1634:	ec 05       	cpc	r30, r12
    1636:	fd 05       	cpc	r31, r13
    1638:	ce 05       	cpc	r28, r14
    163a:	df 05       	cpc	r29, r15
    163c:	a0 07       	cpc	r26, r16
    163e:	b1 07       	cpc	r27, r17
    1640:	48 f0       	brcs	.+18     	; 0x1654 <__udivmod64+0x90>
    1642:	8a 18       	sub	r8, r10
    1644:	9b 08       	sbc	r9, r11
    1646:	ec 09       	sbc	r30, r12
    1648:	fd 09       	sbc	r31, r13
    164a:	ce 09       	sbc	r28, r14
    164c:	df 09       	sbc	r29, r15
    164e:	a0 0b       	sbc	r26, r16
    1650:	b1 0b       	sbc	r27, r17
    1652:	21 60       	ori	r18, 0x01	; 1
    1654:	1a 94       	dec	r1
    1656:	e1 f6       	brne	.-72     	; 0x1610 <__udivmod64+0x4c>
    1658:	2e f4       	brtc	.+10     	; 0x1664 <__udivmod64+0xa0>
    165a:	94 01       	movw	r18, r8
    165c:	af 01       	movw	r20, r30
    165e:	be 01       	movw	r22, r28
    1660:	cd 01       	movw	r24, r26
    1662:	00 0c       	add	r0, r0
    1664:	08 95       	ret

00001666 <__ashrdi3>:
    1666:	97 fb       	bst	r25, 7
    1668:	10 f8       	bld	r1, 0

0000166a <__lshrdi3>:
    166a:	16 94       	lsr	r1
    166c:	00 08       	sbc	r0, r0
    166e:	0f 93       	push	r16
    1670:	08 30       	cpi	r16, 0x08	; 8
    1672:	98 f0       	brcs	.+38     	; 0x169a <__lshrdi3+0x30>
    1674:	08 50       	subi	r16, 0x08	; 8
    1676:	23 2f       	mov	r18, r19
    1678:	34 2f       	mov	r19, r20
    167a:	45 2f       	mov	r20, r21
    167c:	56 2f       	mov	r21, r22
    167e:	67 2f       	mov	r22, r23
    1680:	78 2f       	mov	r23, r24
    1682:	89 2f       	mov	r24, r25
    1684:	90 2d       	mov	r25, r0
    1686:	f4 cf       	rjmp	.-24     	; 0x1670 <__lshrdi3+0x6>
    1688:	05 94       	asr	r0
    168a:	97 95       	ror	r25
    168c:	87 95       	ror	r24
    168e:	77 95       	ror	r23
    1690:	67 95       	ror	r22
    1692:	57 95       	ror	r21
    1694:	47 95       	ror	r20
    1696:	37 95       	ror	r19
    1698:	27 95       	ror	r18
    169a:	0a 95       	dec	r16
    169c:	aa f7       	brpl	.-22     	; 0x1688 <__lshrdi3+0x1e>
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <__adddi3>:
    16a2:	2a 0d       	add	r18, r10
    16a4:	3b 1d       	adc	r19, r11
    16a6:	4c 1d       	adc	r20, r12
    16a8:	5d 1d       	adc	r21, r13
    16aa:	6e 1d       	adc	r22, r14
    16ac:	7f 1d       	adc	r23, r15
    16ae:	80 1f       	adc	r24, r16
    16b0:	91 1f       	adc	r25, r17
    16b2:	08 95       	ret

000016b4 <__adddi3_s8>:
    16b4:	00 24       	eor	r0, r0
    16b6:	a7 fd       	sbrc	r26, 7
    16b8:	00 94       	com	r0
    16ba:	2a 0f       	add	r18, r26
    16bc:	30 1d       	adc	r19, r0
    16be:	40 1d       	adc	r20, r0
    16c0:	50 1d       	adc	r21, r0
    16c2:	60 1d       	adc	r22, r0
    16c4:	70 1d       	adc	r23, r0
    16c6:	80 1d       	adc	r24, r0
    16c8:	90 1d       	adc	r25, r0
    16ca:	08 95       	ret

000016cc <__cmpdi2>:
    16cc:	2a 15       	cp	r18, r10
    16ce:	3b 05       	cpc	r19, r11
    16d0:	4c 05       	cpc	r20, r12
    16d2:	5d 05       	cpc	r21, r13
    16d4:	6e 05       	cpc	r22, r14
    16d6:	7f 05       	cpc	r23, r15
    16d8:	80 07       	cpc	r24, r16
    16da:	91 07       	cpc	r25, r17
    16dc:	08 95       	ret

000016de <__umulhisi3>:
    16de:	a2 9f       	mul	r26, r18
    16e0:	b0 01       	movw	r22, r0
    16e2:	b3 9f       	mul	r27, r19
    16e4:	c0 01       	movw	r24, r0
    16e6:	a3 9f       	mul	r26, r19
    16e8:	70 0d       	add	r23, r0
    16ea:	81 1d       	adc	r24, r1
    16ec:	11 24       	eor	r1, r1
    16ee:	91 1d       	adc	r25, r1
    16f0:	b2 9f       	mul	r27, r18
    16f2:	70 0d       	add	r23, r0
    16f4:	81 1d       	adc	r24, r1
    16f6:	11 24       	eor	r1, r1
    16f8:	91 1d       	adc	r25, r1
    16fa:	08 95       	ret

000016fc <malloc>:
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	91 05       	cpc	r25, r1
    1708:	10 f4       	brcc	.+4      	; 0x170e <malloc+0x12>
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <__flp>
    1712:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <__flp+0x1>
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	a0 e0       	ldi	r26, 0x00	; 0
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	30 97       	sbiw	r30, 0x00	; 0
    1720:	19 f1       	breq	.+70     	; 0x1768 <malloc+0x6c>
    1722:	40 81       	ld	r20, Z
    1724:	51 81       	ldd	r21, Z+1	; 0x01
    1726:	02 81       	ldd	r16, Z+2	; 0x02
    1728:	13 81       	ldd	r17, Z+3	; 0x03
    172a:	48 17       	cp	r20, r24
    172c:	59 07       	cpc	r21, r25
    172e:	c8 f0       	brcs	.+50     	; 0x1762 <malloc+0x66>
    1730:	84 17       	cp	r24, r20
    1732:	95 07       	cpc	r25, r21
    1734:	69 f4       	brne	.+26     	; 0x1750 <malloc+0x54>
    1736:	10 97       	sbiw	r26, 0x00	; 0
    1738:	31 f0       	breq	.+12     	; 0x1746 <malloc+0x4a>
    173a:	12 96       	adiw	r26, 0x02	; 2
    173c:	0c 93       	st	X, r16
    173e:	12 97       	sbiw	r26, 0x02	; 2
    1740:	13 96       	adiw	r26, 0x03	; 3
    1742:	1c 93       	st	X, r17
    1744:	27 c0       	rjmp	.+78     	; 0x1794 <malloc+0x98>
    1746:	00 93 4f 01 	sts	0x014F, r16	; 0x80014f <__flp>
    174a:	10 93 50 01 	sts	0x0150, r17	; 0x800150 <__flp+0x1>
    174e:	22 c0       	rjmp	.+68     	; 0x1794 <malloc+0x98>
    1750:	21 15       	cp	r18, r1
    1752:	31 05       	cpc	r19, r1
    1754:	19 f0       	breq	.+6      	; 0x175c <malloc+0x60>
    1756:	42 17       	cp	r20, r18
    1758:	53 07       	cpc	r21, r19
    175a:	18 f4       	brcc	.+6      	; 0x1762 <malloc+0x66>
    175c:	9a 01       	movw	r18, r20
    175e:	bd 01       	movw	r22, r26
    1760:	ef 01       	movw	r28, r30
    1762:	df 01       	movw	r26, r30
    1764:	f8 01       	movw	r30, r16
    1766:	db cf       	rjmp	.-74     	; 0x171e <malloc+0x22>
    1768:	21 15       	cp	r18, r1
    176a:	31 05       	cpc	r19, r1
    176c:	f9 f0       	breq	.+62     	; 0x17ac <malloc+0xb0>
    176e:	28 1b       	sub	r18, r24
    1770:	39 0b       	sbc	r19, r25
    1772:	24 30       	cpi	r18, 0x04	; 4
    1774:	31 05       	cpc	r19, r1
    1776:	80 f4       	brcc	.+32     	; 0x1798 <malloc+0x9c>
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	9b 81       	ldd	r25, Y+3	; 0x03
    177c:	61 15       	cp	r22, r1
    177e:	71 05       	cpc	r23, r1
    1780:	21 f0       	breq	.+8      	; 0x178a <malloc+0x8e>
    1782:	fb 01       	movw	r30, r22
    1784:	93 83       	std	Z+3, r25	; 0x03
    1786:	82 83       	std	Z+2, r24	; 0x02
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <malloc+0x96>
    178a:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <__flp+0x1>
    178e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__flp>
    1792:	fe 01       	movw	r30, r28
    1794:	32 96       	adiw	r30, 0x02	; 2
    1796:	44 c0       	rjmp	.+136    	; 0x1820 <malloc+0x124>
    1798:	fe 01       	movw	r30, r28
    179a:	e2 0f       	add	r30, r18
    179c:	f3 1f       	adc	r31, r19
    179e:	81 93       	st	Z+, r24
    17a0:	91 93       	st	Z+, r25
    17a2:	22 50       	subi	r18, 0x02	; 2
    17a4:	31 09       	sbc	r19, r1
    17a6:	39 83       	std	Y+1, r19	; 0x01
    17a8:	28 83       	st	Y, r18
    17aa:	3a c0       	rjmp	.+116    	; 0x1820 <malloc+0x124>
    17ac:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <__brkval>
    17b0:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <__brkval+0x1>
    17b4:	23 2b       	or	r18, r19
    17b6:	41 f4       	brne	.+16     	; 0x17c8 <malloc+0xcc>
    17b8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    17bc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    17c0:	30 93 4e 01 	sts	0x014E, r19	; 0x80014e <__brkval+0x1>
    17c4:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__brkval>
    17c8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    17cc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    17d0:	21 15       	cp	r18, r1
    17d2:	31 05       	cpc	r19, r1
    17d4:	41 f4       	brne	.+16     	; 0x17e6 <malloc+0xea>
    17d6:	2d b7       	in	r18, 0x3d	; 61
    17d8:	3e b7       	in	r19, 0x3e	; 62
    17da:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    17de:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    17e2:	24 1b       	sub	r18, r20
    17e4:	35 0b       	sbc	r19, r21
    17e6:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <__brkval>
    17ea:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <__brkval+0x1>
    17ee:	e2 17       	cp	r30, r18
    17f0:	f3 07       	cpc	r31, r19
    17f2:	a0 f4       	brcc	.+40     	; 0x181c <malloc+0x120>
    17f4:	2e 1b       	sub	r18, r30
    17f6:	3f 0b       	sbc	r19, r31
    17f8:	28 17       	cp	r18, r24
    17fa:	39 07       	cpc	r19, r25
    17fc:	78 f0       	brcs	.+30     	; 0x181c <malloc+0x120>
    17fe:	ac 01       	movw	r20, r24
    1800:	4e 5f       	subi	r20, 0xFE	; 254
    1802:	5f 4f       	sbci	r21, 0xFF	; 255
    1804:	24 17       	cp	r18, r20
    1806:	35 07       	cpc	r19, r21
    1808:	48 f0       	brcs	.+18     	; 0x181c <malloc+0x120>
    180a:	4e 0f       	add	r20, r30
    180c:	5f 1f       	adc	r21, r31
    180e:	50 93 4e 01 	sts	0x014E, r21	; 0x80014e <__brkval+0x1>
    1812:	40 93 4d 01 	sts	0x014D, r20	; 0x80014d <__brkval>
    1816:	81 93       	st	Z+, r24
    1818:	91 93       	st	Z+, r25
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <malloc+0x124>
    181c:	e0 e0       	ldi	r30, 0x00	; 0
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	cf 01       	movw	r24, r30
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	08 95       	ret

0000182c <free>:
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	09 f4       	brne	.+2      	; 0x1836 <free+0xa>
    1834:	81 c0       	rjmp	.+258    	; 0x1938 <free+0x10c>
    1836:	fc 01       	movw	r30, r24
    1838:	32 97       	sbiw	r30, 0x02	; 2
    183a:	13 82       	std	Z+3, r1	; 0x03
    183c:	12 82       	std	Z+2, r1	; 0x02
    183e:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <__flp>
    1842:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <__flp+0x1>
    1846:	10 97       	sbiw	r26, 0x00	; 0
    1848:	81 f4       	brne	.+32     	; 0x186a <free+0x3e>
    184a:	20 81       	ld	r18, Z
    184c:	31 81       	ldd	r19, Z+1	; 0x01
    184e:	82 0f       	add	r24, r18
    1850:	93 1f       	adc	r25, r19
    1852:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <__brkval>
    1856:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <__brkval+0x1>
    185a:	28 17       	cp	r18, r24
    185c:	39 07       	cpc	r19, r25
    185e:	51 f5       	brne	.+84     	; 0x18b4 <free+0x88>
    1860:	f0 93 4e 01 	sts	0x014E, r31	; 0x80014e <__brkval+0x1>
    1864:	e0 93 4d 01 	sts	0x014D, r30	; 0x80014d <__brkval>
    1868:	67 c0       	rjmp	.+206    	; 0x1938 <free+0x10c>
    186a:	ed 01       	movw	r28, r26
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	ce 17       	cp	r28, r30
    1872:	df 07       	cpc	r29, r31
    1874:	40 f4       	brcc	.+16     	; 0x1886 <free+0x5a>
    1876:	4a 81       	ldd	r20, Y+2	; 0x02
    1878:	5b 81       	ldd	r21, Y+3	; 0x03
    187a:	9e 01       	movw	r18, r28
    187c:	41 15       	cp	r20, r1
    187e:	51 05       	cpc	r21, r1
    1880:	f1 f0       	breq	.+60     	; 0x18be <free+0x92>
    1882:	ea 01       	movw	r28, r20
    1884:	f5 cf       	rjmp	.-22     	; 0x1870 <free+0x44>
    1886:	d3 83       	std	Z+3, r29	; 0x03
    1888:	c2 83       	std	Z+2, r28	; 0x02
    188a:	40 81       	ld	r20, Z
    188c:	51 81       	ldd	r21, Z+1	; 0x01
    188e:	84 0f       	add	r24, r20
    1890:	95 1f       	adc	r25, r21
    1892:	c8 17       	cp	r28, r24
    1894:	d9 07       	cpc	r29, r25
    1896:	59 f4       	brne	.+22     	; 0x18ae <free+0x82>
    1898:	88 81       	ld	r24, Y
    189a:	99 81       	ldd	r25, Y+1	; 0x01
    189c:	84 0f       	add	r24, r20
    189e:	95 1f       	adc	r25, r21
    18a0:	02 96       	adiw	r24, 0x02	; 2
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	9b 81       	ldd	r25, Y+3	; 0x03
    18aa:	93 83       	std	Z+3, r25	; 0x03
    18ac:	82 83       	std	Z+2, r24	; 0x02
    18ae:	21 15       	cp	r18, r1
    18b0:	31 05       	cpc	r19, r1
    18b2:	29 f4       	brne	.+10     	; 0x18be <free+0x92>
    18b4:	f0 93 50 01 	sts	0x0150, r31	; 0x800150 <__flp+0x1>
    18b8:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <__flp>
    18bc:	3d c0       	rjmp	.+122    	; 0x1938 <free+0x10c>
    18be:	e9 01       	movw	r28, r18
    18c0:	fb 83       	std	Y+3, r31	; 0x03
    18c2:	ea 83       	std	Y+2, r30	; 0x02
    18c4:	49 91       	ld	r20, Y+
    18c6:	59 91       	ld	r21, Y+
    18c8:	c4 0f       	add	r28, r20
    18ca:	d5 1f       	adc	r29, r21
    18cc:	ec 17       	cp	r30, r28
    18ce:	fd 07       	cpc	r31, r29
    18d0:	61 f4       	brne	.+24     	; 0x18ea <free+0xbe>
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	84 0f       	add	r24, r20
    18d8:	95 1f       	adc	r25, r21
    18da:	02 96       	adiw	r24, 0x02	; 2
    18dc:	e9 01       	movw	r28, r18
    18de:	99 83       	std	Y+1, r25	; 0x01
    18e0:	88 83       	st	Y, r24
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	9b 83       	std	Y+3, r25	; 0x03
    18e8:	8a 83       	std	Y+2, r24	; 0x02
    18ea:	e0 e0       	ldi	r30, 0x00	; 0
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	12 96       	adiw	r26, 0x02	; 2
    18f0:	8d 91       	ld	r24, X+
    18f2:	9c 91       	ld	r25, X
    18f4:	13 97       	sbiw	r26, 0x03	; 3
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	19 f0       	breq	.+6      	; 0x1900 <free+0xd4>
    18fa:	fd 01       	movw	r30, r26
    18fc:	dc 01       	movw	r26, r24
    18fe:	f7 cf       	rjmp	.-18     	; 0x18ee <free+0xc2>
    1900:	8d 91       	ld	r24, X+
    1902:	9c 91       	ld	r25, X
    1904:	11 97       	sbiw	r26, 0x01	; 1
    1906:	9d 01       	movw	r18, r26
    1908:	2e 5f       	subi	r18, 0xFE	; 254
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	82 0f       	add	r24, r18
    190e:	93 1f       	adc	r25, r19
    1910:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <__brkval>
    1914:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <__brkval+0x1>
    1918:	28 17       	cp	r18, r24
    191a:	39 07       	cpc	r19, r25
    191c:	69 f4       	brne	.+26     	; 0x1938 <free+0x10c>
    191e:	30 97       	sbiw	r30, 0x00	; 0
    1920:	29 f4       	brne	.+10     	; 0x192c <free+0x100>
    1922:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__flp+0x1>
    1926:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <__flp>
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <free+0x104>
    192c:	13 82       	std	Z+3, r1	; 0x03
    192e:	12 82       	std	Z+2, r1	; 0x02
    1930:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <__brkval+0x1>
    1934:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <__brkval>
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	08 95       	ret

0000193e <realloc>:
    193e:	a0 e0       	ldi	r26, 0x00	; 0
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 ea       	ldi	r30, 0xA5	; 165
    1944:	fc e0       	ldi	r31, 0x0C	; 12
    1946:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__prologue_saves__+0x8>
    194a:	ec 01       	movw	r28, r24
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	21 f4       	brne	.+8      	; 0x1958 <realloc+0x1a>
    1950:	cb 01       	movw	r24, r22
    1952:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <malloc>
    1956:	b4 c0       	rjmp	.+360    	; 0x1ac0 <realloc+0x182>
    1958:	fc 01       	movw	r30, r24
    195a:	e6 0f       	add	r30, r22
    195c:	f7 1f       	adc	r31, r23
    195e:	9c 01       	movw	r18, r24
    1960:	22 50       	subi	r18, 0x02	; 2
    1962:	31 09       	sbc	r19, r1
    1964:	e2 17       	cp	r30, r18
    1966:	f3 07       	cpc	r31, r19
    1968:	08 f4       	brcc	.+2      	; 0x196c <realloc+0x2e>
    196a:	a8 c0       	rjmp	.+336    	; 0x1abc <realloc+0x17e>
    196c:	d9 01       	movw	r26, r18
    196e:	0d 91       	ld	r16, X+
    1970:	1c 91       	ld	r17, X
    1972:	11 97       	sbiw	r26, 0x01	; 1
    1974:	06 17       	cp	r16, r22
    1976:	17 07       	cpc	r17, r23
    1978:	b0 f0       	brcs	.+44     	; 0x19a6 <realloc+0x68>
    197a:	05 30       	cpi	r16, 0x05	; 5
    197c:	11 05       	cpc	r17, r1
    197e:	08 f4       	brcc	.+2      	; 0x1982 <realloc+0x44>
    1980:	9b c0       	rjmp	.+310    	; 0x1ab8 <realloc+0x17a>
    1982:	c8 01       	movw	r24, r16
    1984:	04 97       	sbiw	r24, 0x04	; 4
    1986:	86 17       	cp	r24, r22
    1988:	97 07       	cpc	r25, r23
    198a:	08 f4       	brcc	.+2      	; 0x198e <realloc+0x50>
    198c:	95 c0       	rjmp	.+298    	; 0x1ab8 <realloc+0x17a>
    198e:	02 50       	subi	r16, 0x02	; 2
    1990:	11 09       	sbc	r17, r1
    1992:	06 1b       	sub	r16, r22
    1994:	17 0b       	sbc	r17, r23
    1996:	01 93       	st	Z+, r16
    1998:	11 93       	st	Z+, r17
    199a:	6d 93       	st	X+, r22
    199c:	7c 93       	st	X, r23
    199e:	cf 01       	movw	r24, r30
    19a0:	0e 94 16 0c 	call	0x182c	; 0x182c <free>
    19a4:	89 c0       	rjmp	.+274    	; 0x1ab8 <realloc+0x17a>
    19a6:	5b 01       	movw	r10, r22
    19a8:	a0 1a       	sub	r10, r16
    19aa:	b1 0a       	sbc	r11, r17
    19ac:	4c 01       	movw	r8, r24
    19ae:	80 0e       	add	r8, r16
    19b0:	91 1e       	adc	r9, r17
    19b2:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <__flp>
    19b6:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <__flp+0x1>
    19ba:	61 2c       	mov	r6, r1
    19bc:	71 2c       	mov	r7, r1
    19be:	e1 2c       	mov	r14, r1
    19c0:	f1 2c       	mov	r15, r1
    19c2:	10 97       	sbiw	r26, 0x00	; 0
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <realloc+0x8a>
    19c6:	46 c0       	rjmp	.+140    	; 0x1a54 <realloc+0x116>
    19c8:	8d 91       	ld	r24, X+
    19ca:	9c 91       	ld	r25, X
    19cc:	11 97       	sbiw	r26, 0x01	; 1
    19ce:	a8 15       	cp	r26, r8
    19d0:	b9 05       	cpc	r27, r9
    19d2:	b1 f5       	brne	.+108    	; 0x1a40 <realloc+0x102>
    19d4:	6c 01       	movw	r12, r24
    19d6:	42 e0       	ldi	r20, 0x02	; 2
    19d8:	c4 0e       	add	r12, r20
    19da:	d1 1c       	adc	r13, r1
    19dc:	ca 14       	cp	r12, r10
    19de:	db 04       	cpc	r13, r11
    19e0:	78 f1       	brcs	.+94     	; 0x1a40 <realloc+0x102>
    19e2:	4c 01       	movw	r8, r24
    19e4:	8a 18       	sub	r8, r10
    19e6:	9b 08       	sbc	r9, r11
    19e8:	64 01       	movw	r12, r8
    19ea:	42 e0       	ldi	r20, 0x02	; 2
    19ec:	c4 0e       	add	r12, r20
    19ee:	d1 1c       	adc	r13, r1
    19f0:	12 96       	adiw	r26, 0x02	; 2
    19f2:	bc 90       	ld	r11, X
    19f4:	12 97       	sbiw	r26, 0x02	; 2
    19f6:	13 96       	adiw	r26, 0x03	; 3
    19f8:	ac 91       	ld	r26, X
    19fa:	b5 e0       	ldi	r27, 0x05	; 5
    19fc:	cb 16       	cp	r12, r27
    19fe:	d1 04       	cpc	r13, r1
    1a00:	40 f0       	brcs	.+16     	; 0x1a12 <realloc+0xd4>
    1a02:	b2 82       	std	Z+2, r11	; 0x02
    1a04:	a3 83       	std	Z+3, r26	; 0x03
    1a06:	91 82       	std	Z+1, r9	; 0x01
    1a08:	80 82       	st	Z, r8
    1a0a:	d9 01       	movw	r26, r18
    1a0c:	6d 93       	st	X+, r22
    1a0e:	7c 93       	st	X, r23
    1a10:	09 c0       	rjmp	.+18     	; 0x1a24 <realloc+0xe6>
    1a12:	0e 5f       	subi	r16, 0xFE	; 254
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	80 0f       	add	r24, r16
    1a18:	91 1f       	adc	r25, r17
    1a1a:	f9 01       	movw	r30, r18
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	80 83       	st	Z, r24
    1a20:	eb 2d       	mov	r30, r11
    1a22:	fa 2f       	mov	r31, r26
    1a24:	e1 14       	cp	r14, r1
    1a26:	f1 04       	cpc	r15, r1
    1a28:	31 f0       	breq	.+12     	; 0x1a36 <realloc+0xf8>
    1a2a:	d7 01       	movw	r26, r14
    1a2c:	13 96       	adiw	r26, 0x03	; 3
    1a2e:	fc 93       	st	X, r31
    1a30:	ee 93       	st	-X, r30
    1a32:	12 97       	sbiw	r26, 0x02	; 2
    1a34:	41 c0       	rjmp	.+130    	; 0x1ab8 <realloc+0x17a>
    1a36:	f0 93 50 01 	sts	0x0150, r31	; 0x800150 <__flp+0x1>
    1a3a:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <__flp>
    1a3e:	3c c0       	rjmp	.+120    	; 0x1ab8 <realloc+0x17a>
    1a40:	68 16       	cp	r6, r24
    1a42:	79 06       	cpc	r7, r25
    1a44:	08 f4       	brcc	.+2      	; 0x1a48 <realloc+0x10a>
    1a46:	3c 01       	movw	r6, r24
    1a48:	7d 01       	movw	r14, r26
    1a4a:	12 96       	adiw	r26, 0x02	; 2
    1a4c:	0d 90       	ld	r0, X+
    1a4e:	bc 91       	ld	r27, X
    1a50:	a0 2d       	mov	r26, r0
    1a52:	b7 cf       	rjmp	.-146    	; 0x19c2 <realloc+0x84>
    1a54:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__brkval>
    1a58:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__brkval+0x1>
    1a5c:	88 16       	cp	r8, r24
    1a5e:	99 06       	cpc	r9, r25
    1a60:	e1 f4       	brne	.+56     	; 0x1a9a <realloc+0x15c>
    1a62:	66 16       	cp	r6, r22
    1a64:	77 06       	cpc	r7, r23
    1a66:	c8 f4       	brcc	.+50     	; 0x1a9a <realloc+0x15c>
    1a68:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1a6c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	41 f4       	brne	.+16     	; 0x1a84 <realloc+0x146>
    1a74:	8d b7       	in	r24, 0x3d	; 61
    1a76:	9e b7       	in	r25, 0x3e	; 62
    1a78:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1a7c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1a80:	84 1b       	sub	r24, r20
    1a82:	95 0b       	sbc	r25, r21
    1a84:	e8 17       	cp	r30, r24
    1a86:	f9 07       	cpc	r31, r25
    1a88:	c8 f4       	brcc	.+50     	; 0x1abc <realloc+0x17e>
    1a8a:	f0 93 4e 01 	sts	0x014E, r31	; 0x80014e <__brkval+0x1>
    1a8e:	e0 93 4d 01 	sts	0x014D, r30	; 0x80014d <__brkval>
    1a92:	f9 01       	movw	r30, r18
    1a94:	71 83       	std	Z+1, r23	; 0x01
    1a96:	60 83       	st	Z, r22
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <realloc+0x17a>
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <malloc>
    1aa0:	7c 01       	movw	r14, r24
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	59 f0       	breq	.+22     	; 0x1abc <realloc+0x17e>
    1aa6:	a8 01       	movw	r20, r16
    1aa8:	be 01       	movw	r22, r28
    1aaa:	0e 94 65 0d 	call	0x1aca	; 0x1aca <memcpy>
    1aae:	ce 01       	movw	r24, r28
    1ab0:	0e 94 16 0c 	call	0x182c	; 0x182c <free>
    1ab4:	c7 01       	movw	r24, r14
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <realloc+0x182>
    1ab8:	ce 01       	movw	r24, r28
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <realloc+0x182>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	ee e0       	ldi	r30, 0x0E	; 14
    1ac6:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__epilogue_restores__+0x8>

00001aca <memcpy>:
    1aca:	fb 01       	movw	r30, r22
    1acc:	dc 01       	movw	r26, r24
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <memcpy+0xa>
    1ad0:	01 90       	ld	r0, Z+
    1ad2:	0d 92       	st	X+, r0
    1ad4:	41 50       	subi	r20, 0x01	; 1
    1ad6:	50 40       	sbci	r21, 0x00	; 0
    1ad8:	d8 f7       	brcc	.-10     	; 0x1ad0 <memcpy+0x6>
    1ada:	08 95       	ret

00001adc <__prologue_saves__>:
    1adc:	2f 92       	push	r2
    1ade:	3f 92       	push	r3
    1ae0:	4f 92       	push	r4
    1ae2:	5f 92       	push	r5
    1ae4:	6f 92       	push	r6
    1ae6:	7f 92       	push	r7
    1ae8:	8f 92       	push	r8
    1aea:	9f 92       	push	r9
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	ca 1b       	sub	r28, r26
    1b06:	db 0b       	sbc	r29, r27
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	09 94       	ijmp

00001b14 <__epilogue_restores__>:
    1b14:	2a 88       	ldd	r2, Y+18	; 0x12
    1b16:	39 88       	ldd	r3, Y+17	; 0x11
    1b18:	48 88       	ldd	r4, Y+16	; 0x10
    1b1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b20:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b22:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b24:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b26:	b9 84       	ldd	r11, Y+9	; 0x09
    1b28:	c8 84       	ldd	r12, Y+8	; 0x08
    1b2a:	df 80       	ldd	r13, Y+7	; 0x07
    1b2c:	ee 80       	ldd	r14, Y+6	; 0x06
    1b2e:	fd 80       	ldd	r15, Y+5	; 0x05
    1b30:	0c 81       	ldd	r16, Y+4	; 0x04
    1b32:	1b 81       	ldd	r17, Y+3	; 0x03
    1b34:	aa 81       	ldd	r26, Y+2	; 0x02
    1b36:	b9 81       	ldd	r27, Y+1	; 0x01
    1b38:	ce 0f       	add	r28, r30
    1b3a:	d1 1d       	adc	r29, r1
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	ed 01       	movw	r28, r26
    1b48:	08 95       	ret

00001b4a <_exit>:
    1b4a:	f8 94       	cli

00001b4c <__stop_program>:
    1b4c:	ff cf       	rjmp	.-2      	; 0x1b4c <__stop_program>
