
SuperCapBike-Firmware-ATMEGA328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00002d96  00002e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  0080014c  0080014c  00002e76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00002ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023cc  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2f  00000000  00000000  0000545c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cf5  00000000  00000000  0000628b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000674  00000000  00000000  00007f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c4b  00000000  00000000  000085f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de1  00000000  00000000  0000923f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000a020  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__vector_1>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__vector_7>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__vector_11>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_14>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_22>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_24>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      68:	59 01       	movw	r10, r18
      6a:	77 01       	movw	r14, r14
      6c:	9c 01       	movw	r18, r24
      6e:	c0 01       	movw	r24, r0
      70:	ea 01       	movw	r28, r20
      72:	0d 02       	muls	r16, r29
      74:	4e 02       	muls	r20, r30
      76:	5c 02       	muls	r21, r28
      78:	58 02       	muls	r21, r24

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e6 e9       	ldi	r30, 0x96	; 150
      8e:	fd e2       	ldi	r31, 0x2D	; 45
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	ac 34       	cpi	r26, 0x4C	; 76
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	21 e0       	ldi	r18, 0x01	; 1
      9e:	ac e4       	ldi	r26, 0x4C	; 76
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a7 3a       	cpi	r26, 0xA7	; 167
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <main>
      b0:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <EEPROM_Ready_ERROR>:

 EEPROM_Ready_ERROR:
	
	; Pop EEPROM_READ / EEPROM_WRITE return address

	POP r18
      b8:	2f 91       	pop	r18
	POP r19 
      ba:	3f 91       	pop	r19

	; Note: R18-R27, R30, R31 are call clobbered (no need to preserve their contents).

	LDI R24, 0xFF 	
      bc:	8f ef       	ldi	r24, 0xFF	; 255
	LDI R25, 0xFF ; Returns -1
      be:	9f ef       	ldi	r25, 0xFF	; 255

	RET
      c0:	08 95       	ret

000000c2 <Check_Address>:


Check_Address:

	LDI r18, ATMEGA328_Address_Mask ; Requested address exceeds EEPROM address space
      c2:	2c ef       	ldi	r18, 0xFC	; 252

	AND r18, Address_H
      c4:	29 23       	and	r18, r25

	CPI r18, 0
      c6:	20 30       	cpi	r18, 0x00	; 0

	BRNE EEPROM_Ready_ERROR
      c8:	b9 f7       	brne	.-18     	; 0xb8 <EEPROM_Ready_ERROR>

	RET
      ca:	08 95       	ret

000000cc <EEPROM_Wait>:

EEPROM_Wait:

	IN r18, EECR
      cc:	2f b3       	in	r18, 0x1f	; 31
	SBRC r18, 1
      ce:	21 fd       	sbrc	r18, 1
	RJMP EEPROM_Wait
      d0:	fd cf       	rjmp	.-6      	; 0xcc <EEPROM_Wait>
	RET 
      d2:	08 95       	ret

000000d4 <Check_EEPROM_State>:

Check_EEPROM_State:

	LDS r19, EEPROM_Enabled
      d4:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <EEPROM_Enabled>

	CPI r19, 0
      d8:	30 30       	cpi	r19, 0x00	; 0

	BREQ EEPROM_Ready_ERROR
      da:	71 f3       	breq	.-36     	; 0xb8 <EEPROM_Ready_ERROR>

	SBIC EECR, 1 ; Ensure EEPROM is not being written to
      dc:	f9 99       	sbic	0x1f, 1	; 31
	
	RJMP EEPROM_Ready_ERROR
      de:	ec cf       	rjmp	.-40     	; 0xb8 <EEPROM_Ready_ERROR>

	IN r18, SPMCSR
      e0:	27 b7       	in	r18, 0x37	; 55

	SBRC r18, 0 ; Ensure flash is not being written to by the bootloader (not relevent but mind as well for the future)
      e2:	20 fd       	sbrc	r18, 0

	RJMP EEPROM_Ready_ERROR
      e4:	e9 cf       	rjmp	.-46     	; 0xb8 <EEPROM_Ready_ERROR>

	RJMP Check_Address
      e6:	ed cf       	rjmp	.-38     	; 0xc2 <Check_Address>

000000e8 <EEPROM_Read>:

EEPROM_Read:
	
	RCALL Check_EEPROM_State
      e8:	f5 df       	rcall	.-22     	; 0xd4 <Check_EEPROM_State>

	; valid EEPROM read request

	OUT EEARH, Address_H
      ea:	92 bd       	out	0x22, r25	; 34

	OUT EEARL, Address_L
      ec:	81 bd       	out	0x21, r24	; 33

	; SBI EECR, 3 ; Enable EEPROM interrupts

	CLI ; Disable global interrupt bit
      ee:	f8 94       	cli

	SBI EECR, 0 ; Set read bit
      f0:	f8 9a       	sbi	0x1f, 0	; 31

	; Reads the EEPROM...

	IN EEPROM_Data, EEDR
      f2:	60 b5       	in	r22, 0x20	; 32

	SEI ; Enable interrupts
      f4:	78 94       	sei

	MOV r24, EEPROM_Data 
      f6:	86 2f       	mov	r24, r22
	
	ldi r25, 0 ; return EEDR, EEPROM read successful
      f8:	90 e0       	ldi	r25, 0x00	; 0

	RET
      fa:	08 95       	ret

000000fc <EEPROM_Write>:
			
EEPROM_Write:

	RCALL Check_EEPROM_State
      fc:	eb df       	rcall	.-42     	; 0xd4 <Check_EEPROM_State>

	; valid EEPROM write request

	OUT EEARH, Address_H
      fe:	92 bd       	out	0x22, r25	; 34

	OUT EEARL, Address_L
     100:	81 bd       	out	0x21, r24	; 33

	OUT EEDR, EEPROM_Data
     102:	60 bd       	out	0x20, r22	; 32

	; SBI EECR, 3 ; Enable EEPROM interrupts
	
	CLI 
     104:	f8 94       	cli

	SBI EECR, 2; Set EEPROM master write enable
     106:	fa 9a       	sbi	0x1f, 2	; 31

	SBI EECR, 1 ; Write to EEPROM
     108:	f9 9a       	sbi	0x1f, 1	; 31
	
	; Writes to the EEPROM...

	SEI 
     10a:	78 94       	sei

	RCALL EEPROM_Wait
     10c:	df df       	rcall	.-66     	; 0xcc <EEPROM_Wait>

	ldi r25, 1 ; return 1, EEPROM write successful
     10e:	91 e0       	ldi	r25, 0x01	; 1

	RET
     110:	08 95       	ret

00000112 <__vector_22>:

volatile bool EEPROM_Ready = false; // Not used
volatile uint16_t EEPROM_Address = 0;
volatile bool EEPROM_Enabled = false;

ISR(EE_READY_vect){ // Not used
     112:	1f 92       	push	r1
     114:	0f 92       	push	r0
     116:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     11a:	0f 92       	push	r0
     11c:	11 24       	eor	r1, r1
     11e:	8f 93       	push	r24
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
	
	EEPROM_Ready = true;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
		
     12e:	00 00       	nop
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	8f 91       	pop	r24
     136:	0f 90       	pop	r0
     138:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     13c:	0f 90       	pop	r0
     13e:	1f 90       	pop	r1
     140:	18 95       	reti

00000142 <Log_Error>:
#include "Headers/Includes.h"
#include "Headers/I2C.h"
#include "Headers/Dynamic_Ring_Buffer.h"
#include "Headers/EEPROM.h"

void Log_Error(Error_Log* Error){
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	00 d0       	rcall	.+0      	; 0x148 <Log_Error+0x6>
     148:	00 d0       	rcall	.+0      	; 0x14a <Log_Error+0x8>
     14a:	00 d0       	rcall	.+0      	; 0x14c <Log_Error+0xa>
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	9e 83       	std	Y+6, r25	; 0x06
     152:	8d 83       	std	Y+5, r24	; 0x05
	
	for(int8_t i = 7; i >= 0; i--){ // Big endian, MSB first.
     154:	87 e0       	ldi	r24, 0x07	; 7
     156:	89 83       	std	Y+1, r24	; 0x01
     158:	2e c0       	rjmp	.+92     	; 0x1b6 <Log_Error+0x74>
		
		while(!EEPROM_Ready);
     15a:	00 00       	nop
     15c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     160:	88 23       	and	r24, r24
     162:	e1 f3       	breq	.-8      	; 0x15c <Log_Error+0x1a>
		
		if(Error->Message[i] == '\0') break;
     164:	89 81       	ldd	r24, Y+1	; 0x01
     166:	08 2e       	mov	r0, r24
     168:	00 0c       	add	r0, r0
     16a:	99 0b       	sbc	r25, r25
     16c:	2d 81       	ldd	r18, Y+5	; 0x05
     16e:	3e 81       	ldd	r19, Y+6	; 0x06
     170:	82 0f       	add	r24, r18
     172:	93 1f       	adc	r25, r19
     174:	fc 01       	movw	r30, r24
     176:	80 81       	ld	r24, Z
     178:	88 23       	and	r24, r24
     17a:	09 f1       	breq	.+66     	; 0x1be <Log_Error+0x7c>
		
		EEPROM_Write(EEPROM_Address, Error->Message[i]);
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	08 2e       	mov	r0, r24
     180:	00 0c       	add	r0, r0
     182:	99 0b       	sbc	r25, r25
     184:	2d 81       	ldd	r18, Y+5	; 0x05
     186:	3e 81       	ldd	r19, Y+6	; 0x06
     188:	82 0f       	add	r24, r18
     18a:	93 1f       	adc	r25, r19
     18c:	fc 01       	movw	r30, r24
     18e:	20 81       	ld	r18, Z
     190:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <EEPROM_Address>
     194:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <EEPROM_Address+0x1>
     198:	62 2f       	mov	r22, r18
     19a:	0e 94 7e 00 	call	0xfc	; 0xfc <EEPROM_Write>
		EEPROM_Address++;
     19e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <EEPROM_Address>
     1a2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <EEPROM_Address+0x1>
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <EEPROM_Address+0x1>
     1ac:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <EEPROM_Address>
#include "Headers/Dynamic_Ring_Buffer.h"
#include "Headers/EEPROM.h"

void Log_Error(Error_Log* Error){
	
	for(int8_t i = 7; i >= 0; i--){ // Big endian, MSB first.
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	81 50       	subi	r24, 0x01	; 1
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	88 23       	and	r24, r24
     1ba:	7c f6       	brge	.-98     	; 0x15a <Log_Error+0x18>
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <Log_Error+0x7e>
		
		while(!EEPROM_Ready);
		
		if(Error->Message[i] == '\0') break;
     1be:	00 00       	nop
		EEPROM_Write(EEPROM_Address, Error->Message[i]);
		EEPROM_Address++;
		
	}
	
	uint8_t* Time_Ptr = (uint8_t*)&(Error->Time);
     1c0:	8d 81       	ldd	r24, Y+5	; 0x05
     1c2:	9e 81       	ldd	r25, Y+6	; 0x06
     1c4:	08 96       	adiw	r24, 0x08	; 8
     1c6:	9c 83       	std	Y+4, r25	; 0x04
     1c8:	8b 83       	std	Y+3, r24	; 0x03
	
	for(int8_t i = 7; i >= 0; i--){
     1ca:	87 e0       	ldi	r24, 0x07	; 7
     1cc:	8a 83       	std	Y+2, r24	; 0x02
     1ce:	22 c0       	rjmp	.+68     	; 0x214 <Log_Error+0xd2>
		
		while(!EEPROM_Ready);
     1d0:	00 00       	nop
     1d2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     1d6:	88 23       	and	r24, r24
     1d8:	e1 f3       	breq	.-8      	; 0x1d2 <Log_Error+0x90>
		EEPROM_Write(EEPROM_Address, Time_Ptr[i]);
     1da:	8a 81       	ldd	r24, Y+2	; 0x02
     1dc:	08 2e       	mov	r0, r24
     1de:	00 0c       	add	r0, r0
     1e0:	99 0b       	sbc	r25, r25
     1e2:	2b 81       	ldd	r18, Y+3	; 0x03
     1e4:	3c 81       	ldd	r19, Y+4	; 0x04
     1e6:	82 0f       	add	r24, r18
     1e8:	93 1f       	adc	r25, r19
     1ea:	fc 01       	movw	r30, r24
     1ec:	20 81       	ld	r18, Z
     1ee:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <EEPROM_Address>
     1f2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <EEPROM_Address+0x1>
     1f6:	62 2f       	mov	r22, r18
     1f8:	0e 94 7e 00 	call	0xfc	; 0xfc <EEPROM_Write>
		EEPROM_Address++;
     1fc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <EEPROM_Address>
     200:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <EEPROM_Address+0x1>
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <EEPROM_Address+0x1>
     20a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <EEPROM_Address>
		
	}
	
	uint8_t* Time_Ptr = (uint8_t*)&(Error->Time);
	
	for(int8_t i = 7; i >= 0; i--){
     20e:	8a 81       	ldd	r24, Y+2	; 0x02
     210:	81 50       	subi	r24, 0x01	; 1
     212:	8a 83       	std	Y+2, r24	; 0x02
     214:	8a 81       	ldd	r24, Y+2	; 0x02
     216:	88 23       	and	r24, r24
     218:	dc f6       	brge	.-74     	; 0x1d0 <Log_Error+0x8e>
		EEPROM_Write(EEPROM_Address, Time_Ptr[i]);
		EEPROM_Address++;
		
	}
	
	TWI_Add_W_To_Queue(p_TWI_Buffer, MCP23017_Address, 0x00, 0b11101111);
     21a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <p_TWI_Buffer>
     21e:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <p_TWI_Buffer+0x1>
     222:	2f ee       	ldi	r18, 0xEF	; 239
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	60 e2       	ldi	r22, 0x20	; 32
     228:	0e 94 2c 08 	call	0x1058	; 0x1058 <TWI_Add_W_To_Queue>
	TWI_Add_W_To_Queue(p_TWI_Buffer, MCP23017_Address, 0x14, 0b00010000); // Turn on fault led
     22c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <p_TWI_Buffer>
     230:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <p_TWI_Buffer+0x1>
     234:	20 e1       	ldi	r18, 0x10	; 16
     236:	44 e1       	ldi	r20, 0x14	; 20
     238:	60 e2       	ldi	r22, 0x20	; 32
     23a:	0e 94 2c 08 	call	0x1058	; 0x1058 <TWI_Add_W_To_Queue>
		
     23e:	00 00       	nop
     240:	26 96       	adiw	r28, 0x06	; 6
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	de bf       	out	0x3e, r29	; 62
     248:	0f be       	out	0x3f, r0	; 63
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <__vector_24>:

volatile TWI_States Next_I2C_State = TWI_IDLE;

volatile TWI_Status I2C_Status = TWI_OK; // Useful for debugging and checking I suppose

ISR(TWI_vect){
     252:	1f 92       	push	r1
     254:	0f 92       	push	r0
     256:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     25a:	0f 92       	push	r0
     25c:	11 24       	eor	r1, r1
     25e:	2f 93       	push	r18
     260:	3f 93       	push	r19
     262:	4f 93       	push	r20
     264:	5f 93       	push	r21
     266:	6f 93       	push	r22
     268:	7f 93       	push	r23
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
     26e:	af 93       	push	r26
     270:	bf 93       	push	r27
     272:	ef 93       	push	r30
     274:	ff 93       	push	r31
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	1f 92       	push	r1
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t Transmit_Code = (1 << TWINT) | (1 << TWEN) | (1 << TWIE); // Clear the interrupt flag, enable TWI and TWI interrupts
     280:	85 e8       	ldi	r24, 0x85	; 133
     282:	89 83       	std	Y+1, r24	; 0x01
	
	switch(Next_I2C_State){
     284:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
     288:	88 2f       	mov	r24, r24
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	09 2e       	mov	r0, r25
     28e:	00 0c       	add	r0, r0
     290:	aa 0b       	sbc	r26, r26
     292:	bb 0b       	sbc	r27, r27
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	28 e0       	ldi	r18, 0x08	; 8
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	84 1b       	sub	r24, r20
     29e:	95 0b       	sbc	r25, r21
     2a0:	28 17       	cp	r18, r24
     2a2:	39 07       	cpc	r19, r25
     2a4:	08 f4       	brcc	.+2      	; 0x2a8 <__vector_24+0x56>
     2a6:	0b c1       	rjmp	.+534    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     2a8:	8c 5c       	subi	r24, 0xCC	; 204
     2aa:	9f 4f       	sbci	r25, 0xFF	; 255
     2ac:	fc 01       	movw	r30, r24
     2ae:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__tablejump2__>
		
		case TWI_REPEATED_START:
		
			switch(TWSR_Status){
     2b2:	89 eb       	ldi	r24, 0xB9	; 185
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	fc 01       	movw	r30, r24
     2b8:	80 81       	ld	r24, Z
     2ba:	88 2f       	mov	r24, r24
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	88 7f       	andi	r24, 0xF8	; 248
     2c0:	99 27       	eor	r25, r25
     2c2:	88 97       	sbiw	r24, 0x28	; 40
     2c4:	71 f4       	brne	.+28     	; 0x2e2 <__vector_24+0x90>
				
				case WRITE_DATA_ACK:
					
					Next_I2C_State = TWI_ADDRESS_READ;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
				
					break;
     2cc:	00 00       	nop
					I2C_Status = TWI_FAULT;
					return;
				
			}

			TWCR = Transmit_Code | (1 << TWSTA);
     2ce:	8c eb       	ldi	r24, 0xBC	; 188
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	29 81       	ldd	r18, Y+1	; 0x01
     2d4:	20 62       	ori	r18, 0x20	; 32
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
			
			I2C_Status = TWI_OK;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2C_Status>
			return;
     2e0:	ee c0       	rjmp	.+476    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
				
					break;
				
				default:
				
					Next_I2C_State = TWI_STOP;
     2e2:	86 e0       	ldi	r24, 0x06	; 6
     2e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
					
					I2C_Status = TWI_FAULT;
     2e8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <I2C_Status>
					return;
     2ec:	e8 c0       	rjmp	.+464    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			I2C_Status = TWI_OK;
			return;
		
		case TWI_ADDRESS_READ:
		
			switch(TWSR_Status){
     2ee:	89 eb       	ldi	r24, 0xB9	; 185
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	fc 01       	movw	r30, r24
     2f4:	80 81       	ld	r24, Z
     2f6:	88 2f       	mov	r24, r24
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	88 7f       	andi	r24, 0xF8	; 248
     2fc:	99 27       	eor	r25, r25
     2fe:	40 97       	sbiw	r24, 0x10	; 16
     300:	a9 f4       	brne	.+42     	; 0x32c <__vector_24+0xda>
				
				case REPEATED_START:
				
					Next_I2C_State = TWI_READING;
     302:	85 e0       	ldi	r24, 0x05	; 5
     304:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
					break;
     308:	00 00       	nop
					return;
					
			}
			
			
			TWDR = (I2C_Data.Device_Address << 1) + 1;
     30a:	8b eb       	ldi	r24, 0xBB	; 187
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <I2C_Data>
     312:	22 0f       	add	r18, r18
     314:	2f 5f       	subi	r18, 0xFF	; 255
     316:	fc 01       	movw	r30, r24
     318:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     31a:	8c eb       	ldi	r24, 0xBC	; 188
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	29 81       	ldd	r18, Y+1	; 0x01
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
			
			I2C_Status = TWI_OK;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2C_Status>
			return;
     32a:	c9 c0       	rjmp	.+402    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
					break;
				
				
				default:
				
					Next_I2C_State = TWI_STOP;
     32c:	86 e0       	ldi	r24, 0x06	; 6
     32e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
					
					I2C_Status = TWI_FAULT;
     332:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <I2C_Status>
					return;
     336:	c3 c0       	rjmp	.+390    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			I2C_Status = TWI_OK;
			return;
		
		case TWI_ADDRESS_WRITE:
		
			switch(TWSR_Status){
     338:	89 eb       	ldi	r24, 0xB9	; 185
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	fc 01       	movw	r30, r24
     33e:	80 81       	ld	r24, Z
     340:	88 2f       	mov	r24, r24
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	88 7f       	andi	r24, 0xF8	; 248
     346:	99 27       	eor	r25, r25
     348:	08 97       	sbiw	r24, 0x08	; 8
     34a:	a1 f4       	brne	.+40     	; 0x374 <__vector_24+0x122>
				
				case START:
				
					Next_I2C_State = TWI_ADDRESS_REGISTER;
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
					break;
     352:	00 00       	nop
				
					I2C_Status = TWI_FAULT;
					return;
			}

			TWDR = (I2C_Data.Device_Address << 1);
     354:	8b eb       	ldi	r24, 0xBB	; 187
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <I2C_Data>
     35c:	22 0f       	add	r18, r18
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     362:	8c eb       	ldi	r24, 0xBC	; 188
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	29 81       	ldd	r18, Y+1	; 0x01
     368:	fc 01       	movw	r30, r24
     36a:	20 83       	st	Z, r18

			
			I2C_Status = TWI_OK;
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2C_Status>
			return;
     372:	a5 c0       	rjmp	.+330    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
					Next_I2C_State = TWI_ADDRESS_REGISTER;
					break;
				
				default:
				
					Next_I2C_State = TWI_STOP;
     374:	86 e0       	ldi	r24, 0x06	; 6
     376:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
				
					I2C_Status = TWI_FAULT;
     37a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <I2C_Status>
					return;
     37e:	9f c0       	rjmp	.+318    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			I2C_Status = TWI_OK;
			return;
		
		case TWI_ADDRESS_REGISTER:
		
			switch(TWSR_Status){
     380:	89 eb       	ldi	r24, 0xB9	; 185
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	80 81       	ld	r24, Z
     388:	88 2f       	mov	r24, r24
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	88 7f       	andi	r24, 0xF8	; 248
     38e:	99 27       	eor	r25, r25
     390:	48 97       	sbiw	r24, 0x18	; 24
     392:	59 f4       	brne	.+22     	; 0x3aa <__vector_24+0x158>

				case WRITE_ADDRESS_ACK: // Same code for sending device address and register address

					if (I2C_Data.Mode == READING_MODE){
     394:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <I2C_Data+0x2>
     398:	88 23       	and	r24, r24
     39a:	19 f4       	brne	.+6      	; 0x3a2 <__vector_24+0x150>
				
						Next_I2C_State = TWI_REPEATED_START;
     39c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Next_I2C_State>
				
						Next_I2C_State = TWI_WRITING;
				
					}
			
					break;
     3a0:	0a c0       	rjmp	.+20     	; 0x3b6 <__vector_24+0x164>
				
						Next_I2C_State = TWI_REPEATED_START;
				
					}else{
				
						Next_I2C_State = TWI_WRITING;
     3a2:	84 e0       	ldi	r24, 0x04	; 4
     3a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
				
					}
			
					break;
     3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <__vector_24+0x164>

				default:
			
					Next_I2C_State = TWI_STOP;
     3aa:	86 e0       	ldi	r24, 0x06	; 6
     3ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
			
					I2C_Status = TWI_FAULT;
     3b0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <I2C_Status>
					return;
     3b4:	84 c0       	rjmp	.+264    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
				
			}
		
			TWDR = I2C_Data.Register_Address;
     3b6:	8b eb       	ldi	r24, 0xBB	; 187
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <I2C_Data+0x1>
     3be:	fc 01       	movw	r30, r24
     3c0:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     3c2:	8c eb       	ldi	r24, 0xBC	; 188
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	29 81       	ldd	r18, Y+1	; 0x01
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
		
			I2C_Status = TWI_OK;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2C_Status>
			return;
     3d2:	75 c0       	rjmp	.+234    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		
		case TWI_WRITING:
		
			switch(TWSR_Status){
     3d4:	89 eb       	ldi	r24, 0xB9	; 185
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	fc 01       	movw	r30, r24
     3da:	80 81       	ld	r24, Z
     3dc:	88 2f       	mov	r24, r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	88 7f       	andi	r24, 0xF8	; 248
     3e2:	99 27       	eor	r25, r25
     3e4:	88 97       	sbiw	r24, 0x28	; 40
     3e6:	99 f4       	brne	.+38     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			
				case WRITE_DATA_ACK: // Same code for sending device address and register address
			
					Next_I2C_State = TWI_STOP;
     3e8:	86 e0       	ldi	r24, 0x06	; 6
     3ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
					break;
     3ee:	00 00       	nop
					I2C_Status = TWI_FAULT;
					return;
			
			}
		
			TWDR = I2C_Data.Data;
     3f0:	8b eb       	ldi	r24, 0xBB	; 187
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <I2C_Data+0x3>
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     3fc:	8c eb       	ldi	r24, 0xBC	; 188
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	29 81       	ldd	r18, Y+1	; 0x01
     402:	fc 01       	movw	r30, r24
     404:	20 83       	st	Z, r18
		
			I2C_Status = TWI_OK;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2C_Status>
			return;
     40c:	58 c0       	rjmp	.+176    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
					Next_I2C_State = TWI_STOP;
					break;
			
				default:
			
					Next_I2C_State = TWI_STOP;
     40e:	86 e0       	ldi	r24, 0x06	; 6
     410:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
			
					I2C_Status = TWI_FAULT;
     414:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <I2C_Status>
					return;
     418:	52 c0       	rjmp	.+164    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			I2C_Status = TWI_OK;
			return;
		
		case TWI_READING:
		
			switch(TWSR_Status){
     41a:	89 eb       	ldi	r24, 0xB9	; 185
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	fc 01       	movw	r30, r24
     420:	80 81       	ld	r24, Z
     422:	88 2f       	mov	r24, r24
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	88 7f       	andi	r24, 0xF8	; 248
     428:	99 27       	eor	r25, r25
     42a:	80 34       	cpi	r24, 0x40	; 64
     42c:	91 05       	cpc	r25, r1
     42e:	21 f0       	breq	.+8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     430:	88 35       	cpi	r24, 0x58	; 88
     432:	91 05       	cpc	r25, r1
     434:	51 f0       	breq	.+20     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     436:	2c c0       	rjmp	.+88     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
			
				case READ_ADDRESS_ACK:
			
					TWCR = Transmit_Code; // Ready to receive the 1 byte
     438:	8c eb       	ldi	r24, 0xBC	; 188
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	29 81       	ldd	r18, Y+1	; 0x01
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
			
					I2C_Status = TWI_OK;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2C_Status>
					return;
     448:	3a c0       	rjmp	.+116    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			
				case BYTE_RECEIVED:
			
					*(I2C_Data.Data_Out) = TWDR;
     44a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <I2C_Data+0x4>
     44e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <I2C_Data+0x5>
     452:	2b eb       	ldi	r18, 0xBB	; 187
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	f9 01       	movw	r30, r18
     458:	20 81       	ld	r18, Z
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
			
					//Next_I2C_State = TWI_STOP;
					
					I2C_Status = TWI_OK;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2C_Status>
					
					if(I2C_Data.Callback != NULL){
     464:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <I2C_Data+0x6>
     468:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <I2C_Data+0x7>
     46c:	89 2b       	or	r24, r25
     46e:	31 f0       	breq	.+12     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
						I2C_Data.Callback();
     470:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <I2C_Data+0x6>
     474:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <I2C_Data+0x7>
     478:	fc 01       	movw	r30, r24
     47a:	09 95       	icall
					}	
					
					TWCR = Transmit_Code | (1 << TWSTO);
     47c:	8c eb       	ldi	r24, 0xBC	; 188
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	29 81       	ldd	r18, Y+1	; 0x01
     482:	20 61       	ori	r18, 0x10	; 16
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
					Next_I2C_State = TWI_IDLE;
     488:	88 e0       	ldi	r24, 0x08	; 8
     48a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
					
					return;
     48e:	17 c0       	rjmp	.+46     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
					
				default:
			
					Next_I2C_State = TWI_STOP;
     490:	86 e0       	ldi	r24, 0x06	; 6
     492:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>

					I2C_Status = TWI_FAULT;
     496:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <I2C_Status>
					return;
     49a:	11 c0       	rjmp	.+34     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		
			break; // Just for correctness
		
		case TWI_STOP:
		
			TWCR = Transmit_Code | (1 << TWSTO); 
     49c:	8c eb       	ldi	r24, 0xBC	; 188
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	29 81       	ldd	r18, Y+1	; 0x01
     4a2:	20 61       	ori	r18, 0x10	; 16
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
			Next_I2C_State = TWI_IDLE;
     4a8:	88 e0       	ldi	r24, 0x08	; 8
     4aa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
			
			break;
     4ae:	07 c0       	rjmp	.+14     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		
		case TWI_IDLE:
			
			I2C_Status = TWI_OK;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2C_Status>
			return;
     4b6:	03 c0       	rjmp	.+6      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		
		case TWI_TIMEOUT:
		
			I2C_Status = TWI_FAULT;
     4b8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <I2C_Status>
			return;
     4bc:	00 00       	nop

	}

	
}
     4be:	0f 90       	pop	r0
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	ff 91       	pop	r31
     4c6:	ef 91       	pop	r30
     4c8:	bf 91       	pop	r27
     4ca:	af 91       	pop	r26
     4cc:	9f 91       	pop	r25
     4ce:	8f 91       	pop	r24
     4d0:	7f 91       	pop	r23
     4d2:	6f 91       	pop	r22
     4d4:	5f 91       	pop	r21
     4d6:	4f 91       	pop	r20
     4d8:	3f 91       	pop	r19
     4da:	2f 91       	pop	r18
     4dc:	0f 90       	pop	r0
     4de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <Start_TWI>:

void Start_TWI(void){
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	
	TWSR = 0x00;
     4f0:	89 eb       	ldi	r24, 0xB9	; 185
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	fc 01       	movw	r30, r24
     4f6:	10 82       	st	Z, r1
	TWBR = 39; // 12 = 400 kHz SCL frequency at F_CLK = 16MHZ, 17 at F_CLK = 20MHz 0 = 1.25Mhz @ F_CLK = 20MHz
     4f8:	88 eb       	ldi	r24, 0xB8	; 184
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	27 e2       	ldi	r18, 0x27	; 39
     4fe:	fc 01       	movw	r30, r24
     500:	20 83       	st	Z, r18
		
	Next_I2C_State = TWI_ADDRESS_WRITE;
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Next_I2C_State>
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWSTA); // Send start
     508:	8c eb       	ldi	r24, 0xBC	; 188
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	25 ea       	ldi	r18, 0xA5	; 165
     50e:	fc 01       	movw	r30, r24
     510:	20 83       	st	Z, r18
	
}
     512:	00 00       	nop
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <TWI_Write>:


TWI_Status TWI_Write(uint8_t Device_Address, uint8_t Register_Address, uint8_t Data){
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	00 d0       	rcall	.+0      	; 0x520 <TWI_Write+0x6>
     520:	1f 92       	push	r1
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	6a 83       	std	Y+2, r22	; 0x02
     52a:	4b 83       	std	Y+3, r20	; 0x03
	
	//while(Next_I2C_State != TWI_IDLE);
	
	I2C_Data.Device_Address = Device_Address;
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <I2C_Data>
	I2C_Data.Register_Address = Register_Address;
     532:	8a 81       	ldd	r24, Y+2	; 0x02
     534:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <I2C_Data+0x1>
	I2C_Data.Data = Data;
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <I2C_Data+0x3>
	
	I2C_Data.Mode = WRITING_MODE;
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_Data+0x2>
	
	Start_TWI();
     544:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Start_TWI>
	
	return TWI_OK;
     548:	81 e0       	ldi	r24, 0x01	; 1

}
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <TWI_Read>:

TWI_Status TWI_Read(uint8_t Device_Address, uint8_t Register_Address, volatile uint8_t* Data_Out, void (*Callback)(void)){
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	00 d0       	rcall	.+0      	; 0x55c <TWI_Read+0x6>
     55c:	00 d0       	rcall	.+0      	; 0x55e <TWI_Read+0x8>
     55e:	00 d0       	rcall	.+0      	; 0x560 <TWI_Read+0xa>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	6a 83       	std	Y+2, r22	; 0x02
     568:	5c 83       	std	Y+4, r21	; 0x04
     56a:	4b 83       	std	Y+3, r20	; 0x03
     56c:	3e 83       	std	Y+6, r19	; 0x06
     56e:	2d 83       	std	Y+5, r18	; 0x05
	
	//while(Next_I2C_State != TWI_IDLE);
	
	I2C_Data.Device_Address = Device_Address;
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <I2C_Data>
	I2C_Data.Register_Address = Register_Address;
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <I2C_Data+0x1>
	I2C_Data.Data_Out = Data_Out;
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	9c 81       	ldd	r25, Y+4	; 0x04
     580:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <I2C_Data+0x5>
     584:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <I2C_Data+0x4>
	I2C_Data.Callback = Callback;
     588:	8d 81       	ldd	r24, Y+5	; 0x05
     58a:	9e 81       	ldd	r25, Y+6	; 0x06
     58c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <I2C_Data+0x7>
     590:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <I2C_Data+0x6>
	
	I2C_Data.Mode = READING_MODE;
     594:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <I2C_Data+0x2>
	
	
	Start_TWI();
     598:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Start_TWI>
	
	return TWI_OK;
     59c:	81 e0       	ldi	r24, 0x01	; 1

     59e:	26 96       	adiw	r28, 0x06	; 6
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <main>:
const Timers Global_Timer = _8_bit2;

Ring_Buffer* p_TWI_Buffer;

int main(void)
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	a4 97       	sbiw	r28, 0x24	; 36
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
	sei();
     5c4:	78 94       	sei
	
	Motor_Status Motor_Setup = Init_Motor();
     5c6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <Init_Motor>
     5ca:	89 83       	std	Y+1, r24	; 0x01
	
	if(Motor_Setup == Motor_FAULT) return 1;
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	19 f4       	brne	.+6      	; 0x5d8 <main+0x28>
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	49 c0       	rjmp	.+146    	; 0x66a <main+0xba>
	
	MCUCR |= (1 << PUD); // Disable pull up resistors
     5d8:	85 e5       	ldi	r24, 0x55	; 85
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	25 e5       	ldi	r18, 0x55	; 85
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	f9 01       	movw	r30, r18
     5e2:	20 81       	ld	r18, Z
     5e4:	20 61       	ori	r18, 0x10	; 16
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
	
	//DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2) | (1 << DDB3);
	//DDRD |= (1 << DDD6)| (1 << DDD7) | (1 << DDD5) | (1 << DDD3);
	
	Timer_Status Timer1_Set = Configure_Timer(1, u_MiliSeconds, Global_Timer); // 8 bit2 is free in my case, not needed for PWM
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	28 2f       	mov	r18, r24
     5ee:	48 ee       	ldi	r20, 0xE8	; 232
     5f0:	53 e0       	ldi	r21, 0x03	; 3
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 c4 0c 	call	0x1988	; 0x1988 <Configure_Timer>
     5fe:	8a 83       	std	Y+2, r24	; 0x02
	
	if(!Timer1_Set){
     600:	8a 81       	ldd	r24, Y+2	; 0x02
     602:	88 23       	and	r24, r24
     604:	69 f4       	brne	.+26     	; 0x620 <main+0x70>
		
		Error_Log Timer_Error = {
     606:	80 e1       	ldi	r24, 0x10	; 16
     608:	ed e0       	ldi	r30, 0x0D	; 13
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	de 01       	movw	r26, r28
     60e:	55 96       	adiw	r26, 0x15	; 21
     610:	01 90       	ld	r0, Z+
     612:	0d 92       	st	X+, r0
     614:	8a 95       	dec	r24
     616:	e1 f7       	brne	.-8      	; 0x610 <main+0x60>
			.Message = "TIMER1",
			.Time = 0	
		};
		
		Log_Error(&Timer_Error);
     618:	ce 01       	movw	r24, r28
     61a:	45 96       	adiw	r24, 0x15	; 21
     61c:	0e 94 a1 00 	call	0x142	; 0x142 <Log_Error>
	//}*/
		//
	//uint8_t Received_Data = 0;
	//
	Ring_Buffer TWI_Buffer;
	Ring_Buffer* p_TWI_Buffer = &TWI_Buffer; 
     620:	ce 01       	movw	r24, r28
     622:	05 96       	adiw	r24, 0x05	; 5
     624:	9c 83       	std	Y+4, r25	; 0x04
     626:	8b 83       	std	Y+3, r24	; 0x03
	
	TWI_Buffer_Enabled = true;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <TWI_Buffer_Enabled>
	
	Init_Buffer(p_TWI_Buffer, 25, 25);
     62e:	8b 81       	ldd	r24, Y+3	; 0x03
     630:	9c 81       	ldd	r25, Y+4	; 0x04
     632:	49 e1       	ldi	r20, 0x19	; 25
     634:	69 e1       	ldi	r22, 0x19	; 25
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Init_Buffer>
	
	//TWI_Read(MCP23017_Address, 0x00, &Received_Data, NULL);
	
	while(1){
		
		if(TWI_Buffer_Enabled && Current_Speed <= 20 && !IsEmpty(p_TWI_Buffer) && Next_I2C_State == TWI_IDLE){
     63c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <TWI_Buffer_Enabled>
     640:	88 23       	and	r24, r24
     642:	e1 f3       	breq	.-8      	; 0x63c <main+0x8c>
     644:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Current_Speed>
     648:	85 31       	cpi	r24, 0x15	; 21
     64a:	c0 f7       	brcc	.-16     	; 0x63c <main+0x8c>
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	9c 81       	ldd	r25, Y+4	; 0x04
     650:	0e 94 93 06 	call	0xd26	; 0xd26 <IsEmpty>
     654:	88 23       	and	r24, r24
     656:	91 f7       	brne	.-28     	; 0x63c <main+0x8c>
     658:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
     65c:	88 30       	cpi	r24, 0x08	; 8
     65e:	71 f7       	brne	.-36     	; 0x63c <main+0x8c>
			Fetch_TWI(p_TWI_Buffer);
     660:	8b 81       	ldd	r24, Y+3	; 0x03
     662:	9c 81       	ldd	r25, Y+4	; 0x04
     664:	0e 94 9b 08 	call	0x1136	; 0x1136 <Fetch_TWI>
		}

		
	}
     668:	e9 cf       	rjmp	.-46     	; 0x63c <main+0x8c>
		//}
	//
	//} // Part of TWI_Old
	
	return 0;
}
     66a:	a4 96       	adiw	r28, 0x24	; 36
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <__vector_1>:
	[0b011] = {Phase_C, Phase_B, Phase_A},
	[0b111] = {Phase_Invalid, Phase_Invalid, Phase_Invalid}
	
};

ISR(INT0_vect){
     67c:	1f 92       	push	r1
     67e:	0f 92       	push	r0
     680:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     684:	0f 92       	push	r0
     686:	11 24       	eor	r1, r1
     688:	2f 93       	push	r18
     68a:	3f 93       	push	r19
     68c:	4f 93       	push	r20
     68e:	5f 93       	push	r21
     690:	6f 93       	push	r22
     692:	7f 93       	push	r23
     694:	8f 93       	push	r24
     696:	9f 93       	push	r25
     698:	af 93       	push	r26
     69a:	bf 93       	push	r27
     69c:	ef 93       	push	r30
     69e:	ff 93       	push	r31
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
	
	if(Next_I2C_State == TWI_IDLE){
     6a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
     6ac:	88 30       	cpi	r24, 0x08	; 8
     6ae:	59 f4       	brne	.+22     	; 0x6c6 <__vector_1+0x4a>
		Status = TWI_Read(MCP23017_Address, 0x11, &Hall_State, &Update_Commutation); // Clear interrupt flag (read INTCAPB register)
     6b0:	2a e7       	ldi	r18, 0x7A	; 122
     6b2:	33 e0       	ldi	r19, 0x03	; 3
     6b4:	49 e5       	ldi	r20, 0x59	; 89
     6b6:	51 e0       	ldi	r21, 0x01	; 1
     6b8:	61 e1       	ldi	r22, 0x11	; 17
     6ba:	80 e2       	ldi	r24, 0x20	; 32
     6bc:	0e 94 ab 02 	call	0x556	; 0x556 <TWI_Read>
     6c0:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <Status>
	}else{
		Status = TWI_FAULT;
	}	
}
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <__vector_1+0x4e>
ISR(INT0_vect){
	
	if(Next_I2C_State == TWI_IDLE){
		Status = TWI_Read(MCP23017_Address, 0x11, &Hall_State, &Update_Commutation); // Clear interrupt flag (read INTCAPB register)
	}else{
		Status = TWI_FAULT;
     6c6:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <Status>
	}	
}
     6ca:	00 00       	nop
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	ff 91       	pop	r31
     6d2:	ef 91       	pop	r30
     6d4:	bf 91       	pop	r27
     6d6:	af 91       	pop	r26
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	7f 91       	pop	r23
     6de:	6f 91       	pop	r22
     6e0:	5f 91       	pop	r21
     6e2:	4f 91       	pop	r20
     6e4:	3f 91       	pop	r19
     6e6:	2f 91       	pop	r18
     6e8:	0f 90       	pop	r0
     6ea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     6ee:	0f 90       	pop	r0
     6f0:	1f 90       	pop	r1
     6f2:	18 95       	reti

000006f4 <Update_Commutation>:

void Update_Commutation(void){
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	63 97       	sbiw	r28, 0x13	; 19
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
	
	if(!Motor_Enabled) return;
     708:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Motor_Enabled>
     70c:	88 23       	and	r24, r24
     70e:	09 f4       	brne	.+2      	; 0x712 <Update_Commutation+0x1e>
     710:	42 c1       	rjmp	.+644    	; 0x996 <__stack+0x97>
	
	if(Status == TWI_FAULT){
     712:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <Status>
     716:	88 23       	and	r24, r24
     718:	59 f5       	brne	.+86     	; 0x770 <Update_Commutation+0x7c>
		
		Error_Log Motor_Error = {
     71a:	86 e0       	ldi	r24, 0x06	; 6
     71c:	ed e1       	ldi	r30, 0x1D	; 29
     71e:	f1 e0       	ldi	r31, 0x01	; 1
     720:	de 01       	movw	r26, r28
     722:	14 96       	adiw	r26, 0x04	; 4
     724:	01 90       	ld	r0, Z+
     726:	0d 92       	st	X+, r0
     728:	8a 95       	dec	r24
     72a:	e1 f7       	brne	.-8      	; 0x724 <Update_Commutation+0x30>
     72c:	1b 86       	std	Y+11, r1	; 0x0b
     72e:	1a 86       	std	Y+10, r1	; 0x0a
     730:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Global_Timer>
     734:	28 2f       	mov	r18, r24
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	cb 01       	movw	r24, r22
     742:	2c 87       	std	Y+12, r18	; 0x0c
     744:	3d 87       	std	Y+13, r19	; 0x0d
     746:	4e 87       	std	Y+14, r20	; 0x0e
     748:	5f 87       	std	Y+15, r21	; 0x0f
     74a:	68 8b       	std	Y+16, r22	; 0x10
     74c:	79 8b       	std	Y+17, r23	; 0x11
     74e:	8a 8b       	std	Y+18, r24	; 0x12
     750:	9b 8b       	std	Y+19, r25	; 0x13
			.Message = "MOTOR",
			.Time = Global_Timer
			
		};
		
		Log_Error(&Motor_Error);
     752:	ce 01       	movw	r24, r28
     754:	04 96       	adiw	r24, 0x04	; 4
     756:	0e 94 a1 00 	call	0x142	; 0x142 <Log_Error>
		
		EICRA &= ~(1 << ISC01); // Disable INT0
     75a:	89 e6       	ldi	r24, 0x69	; 105
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	29 e6       	ldi	r18, 0x69	; 105
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	f9 01       	movw	r30, r18
     764:	20 81       	ld	r18, Z
     766:	2d 7f       	andi	r18, 0xFD	; 253
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
		Motor_Enabled = false;
     76c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Motor_Enabled>
		
	; // Error state -> Will add error flag and error handling
		
	// ^ Yeah this really slows things down. Design mistake.
	
	uint8_t Phase_Index = (Hall_State>>3) & 0b111;
     770:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <Hall_State>
     774:	86 95       	lsr	r24
     776:	86 95       	lsr	r24
     778:	86 95       	lsr	r24
     77a:	87 70       	andi	r24, 0x07	; 7
     77c:	89 83       	std	Y+1, r24	; 0x01
	
	if(Phase_Index == 7 || Phase_Index == 0){
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	87 30       	cpi	r24, 0x07	; 7
     782:	09 f4       	brne	.+2      	; 0x786 <Update_Commutation+0x92>
     784:	0a c1       	rjmp	.+532    	; 0x99a <__stack+0x9b>
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	88 23       	and	r24, r24
     78a:	09 f4       	brne	.+2      	; 0x78e <Update_Commutation+0x9a>
     78c:	06 c1       	rjmp	.+524    	; 0x99a <__stack+0x9b>
		return; // Error state
	}
			
	const Phase_Logic* Current_Phase = &Commutation_LUT[Phase_Index]; // Not checking for out of bounds. Mask GPB5-3.
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	28 2f       	mov	r18, r24
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	c9 01       	movw	r24, r18
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	82 0f       	add	r24, r18
     79c:	93 1f       	adc	r25, r19
     79e:	8c 5c       	subi	r24, 0xCC	; 204
     7a0:	9e 4f       	sbci	r25, 0xFE	; 254
     7a2:	9b 83       	std	Y+3, r25	; 0x03
     7a4:	8a 83       	std	Y+2, r24	; 0x02
	
	PORTD &= ~((1 << PORTD0) | (1 << PORTD1) | (1 << PORTD4)); // Ensure all IR2014's are in shutdown state
     7a6:	8b e2       	ldi	r24, 0x2B	; 43
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	2b e2       	ldi	r18, 0x2B	; 43
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	f9 01       	movw	r30, r18
     7b0:	20 81       	ld	r18, Z
     7b2:	2c 7e       	andi	r18, 0xEC	; 236
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 83       	st	Z, r18
	
	DDRD &= ~((1 << DDD5) | (1 << DDD6));
     7b8:	8a e2       	ldi	r24, 0x2A	; 42
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	2a e2       	ldi	r18, 0x2A	; 42
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	f9 01       	movw	r30, r18
     7c2:	20 81       	ld	r18, Z
     7c4:	2f 79       	andi	r18, 0x9F	; 159
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
	DDRB &= ~(1<<DDB1); // Set IN_1, IN_2 and IN_3 as High-Z
     7ca:	84 e2       	ldi	r24, 0x24	; 36
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	24 e2       	ldi	r18, 0x24	; 36
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	f9 01       	movw	r30, r18
     7d4:	20 81       	ld	r18, Z
     7d6:	2d 7f       	andi	r18, 0xFD	; 253
     7d8:	fc 01       	movw	r30, r24
     7da:	20 83       	st	Z, r18
	
	switch(Current_Phase->High){
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	9b 81       	ldd	r25, Y+3	; 0x03
     7e0:	fc 01       	movw	r30, r24
     7e2:	80 81       	ld	r24, Z
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	82 30       	cpi	r24, 0x02	; 2
     7ea:	91 05       	cpc	r25, r1
     7ec:	a9 f0       	breq	.+42     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     7ee:	83 30       	cpi	r24, 0x03	; 3
     7f0:	91 05       	cpc	r25, r1
     7f2:	09 f1       	breq	.+66     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	09 f0       	breq	.+2      	; 0x7fa <Update_Commutation+0x106>
			
			break;
			
		default:
		
			return; // Error state
     7f8:	d1 c0       	rjmp	.+418    	; 0x99c <__stack+0x9d>
	
	switch(Current_Phase->High){
		
		case Phase_A:
			
			Toggle_PWM(&IN_1, ON);
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	81 ea       	ldi	r24, 0xA1	; 161
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 10 11 	call	0x2220	; 0x2220 <Toggle_PWM>
			PORTD |= (1 << PORTD6); // IN_1
     804:	8b e2       	ldi	r24, 0x2B	; 43
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	2b e2       	ldi	r18, 0x2B	; 43
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	20 64       	ori	r18, 0x40	; 64
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
			
			break;
     816:	1e c0       	rjmp	.+60     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
		
		case Phase_B:
			
			Toggle_PWM(&IN_1, ON);
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	81 ea       	ldi	r24, 0xA1	; 161
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0e 94 10 11 	call	0x2220	; 0x2220 <Toggle_PWM>
			PORTD |= (1 << PORTD5); // IN_2
     822:	8b e2       	ldi	r24, 0x2B	; 43
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	2b e2       	ldi	r18, 0x2B	; 43
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	f9 01       	movw	r30, r18
     82c:	20 81       	ld	r18, Z
     82e:	20 62       	ori	r18, 0x20	; 32
     830:	fc 01       	movw	r30, r24
     832:	20 83       	st	Z, r18
			
			break;
     834:	0f c0       	rjmp	.+30     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
			
		case Phase_C:
			
			Toggle_PWM(&IN_1, ON);
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	81 ea       	ldi	r24, 0xA1	; 161
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 10 11 	call	0x2220	; 0x2220 <Toggle_PWM>
			PORTB |= (1 << PORTB1); // IN_3
     840:	85 e2       	ldi	r24, 0x25	; 37
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	25 e2       	ldi	r18, 0x25	; 37
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	f9 01       	movw	r30, r18
     84a:	20 81       	ld	r18, Z
     84c:	22 60       	ori	r18, 0x02	; 2
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
			
			break;
     852:	00 00       	nop
		
			return; // Error state
			
	}
	
	switch(Current_Phase->Low){
     854:	8a 81       	ldd	r24, Y+2	; 0x02
     856:	9b 81       	ldd	r25, Y+3	; 0x03
     858:	fc 01       	movw	r30, r24
     85a:	81 81       	ldd	r24, Z+1	; 0x01
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 30       	cpi	r24, 0x02	; 2
     862:	91 05       	cpc	r25, r1
     864:	f1 f0       	breq	.+60     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     866:	83 30       	cpi	r24, 0x03	; 3
     868:	91 05       	cpc	r25, r1
     86a:	99 f1       	breq	.+102    	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	09 f0       	breq	.+2      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
		
			break;
		
		default:
		
			return; // Error state
     870:	95 c0       	rjmp	.+298    	; 0x99c <__stack+0x9d>
	
	switch(Current_Phase->Low){
		
		case Phase_A:
		
			Toggle_PWM(&IN_1, OFF); // Note: if the COMnX bit(s) are set, the functionality of the PORTx register is overridden
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	81 ea       	ldi	r24, 0xA1	; 161
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 10 11 	call	0x2220	; 0x2220 <Toggle_PWM>
			
			DDRD &= ~(1 << DDD6); // Set the pin low
     87c:	8a e2       	ldi	r24, 0x2A	; 42
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	2a e2       	ldi	r18, 0x2A	; 42
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	f9 01       	movw	r30, r18
     886:	20 81       	ld	r18, Z
     888:	2f 7b       	andi	r18, 0xBF	; 191
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
			
			PORTD |= (1 << PORTD6); // IN_1
     88e:	8b e2       	ldi	r24, 0x2B	; 43
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	2b e2       	ldi	r18, 0x2B	; 43
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	f9 01       	movw	r30, r18
     898:	20 81       	ld	r18, Z
     89a:	20 64       	ori	r18, 0x40	; 64
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
		
			break;
     8a0:	30 c0       	rjmp	.+96     	; 0x902 <__stack+0x3>
		
		case Phase_B:
		
			Toggle_PWM(&IN_2, OFF);
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	80 ea       	ldi	r24, 0xA0	; 160
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 10 11 	call	0x2220	; 0x2220 <Toggle_PWM>
			
			DDRD &= ~(1 << DDD5);
     8ac:	8a e2       	ldi	r24, 0x2A	; 42
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	2a e2       	ldi	r18, 0x2A	; 42
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	f9 01       	movw	r30, r18
     8b6:	20 81       	ld	r18, Z
     8b8:	2f 7d       	andi	r18, 0xDF	; 223
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
			
			PORTD |= (1 << PORTD5); // IN_2
     8be:	8b e2       	ldi	r24, 0x2B	; 43
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	2b e2       	ldi	r18, 0x2B	; 43
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	20 62       	ori	r18, 0x20	; 32
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 83       	st	Z, r18
		
			break;
     8d0:	18 c0       	rjmp	.+48     	; 0x902 <__stack+0x3>
		
		case Phase_C:
		
			Toggle_PWM(&IN_3, OFF);
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	82 ea       	ldi	r24, 0xA2	; 162
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 10 11 	call	0x2220	; 0x2220 <Toggle_PWM>
			
			DDRB &= ~(1 << DDB1);
     8dc:	84 e2       	ldi	r24, 0x24	; 36
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	24 e2       	ldi	r18, 0x24	; 36
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	f9 01       	movw	r30, r18
     8e6:	20 81       	ld	r18, Z
     8e8:	2d 7f       	andi	r18, 0xFD	; 253
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
			
			PORTB |= (1 << PORTB1); // IN_3
     8ee:	85 e2       	ldi	r24, 0x25	; 37
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	25 e2       	ldi	r18, 0x25	; 37
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	f9 01       	movw	r30, r18
     8f8:	20 81       	ld	r18, Z
     8fa:	22 60       	ori	r18, 0x02	; 2
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
		
			break;
     900:	00 00       	nop
		
			return; // Error state
		
	}
	
	switch(Current_Phase->High_Z){ 
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	9b 81       	ldd	r25, Y+3	; 0x03
     906:	fc 01       	movw	r30, r24
     908:	82 81       	ldd	r24, Z+2	; 0x02
     90a:	88 2f       	mov	r24, r24
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	91 05       	cpc	r25, r1
     912:	c9 f0       	breq	.+50     	; 0x946 <__stack+0x47>
     914:	83 30       	cpi	r24, 0x03	; 3
     916:	91 05       	cpc	r25, r1
     918:	49 f1       	breq	.+82     	; 0x96c <__stack+0x6d>
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	09 f0       	breq	.+2      	; 0x920 <__stack+0x21>
			
			break;
			
		default:
		
			return; // Error state
     91e:	3e c0       	rjmp	.+124    	; 0x99c <__stack+0x9d>
	
	switch(Current_Phase->High_Z){ 
		
		case Phase_A: // Shutdown U1 IR2104
			
			PORTD &= ~(1 << PORTD0); //D0: U1
     920:	8b e2       	ldi	r24, 0x2B	; 43
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	2b e2       	ldi	r18, 0x2B	; 43
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	f9 01       	movw	r30, r18
     92a:	20 81       	ld	r18, Z
     92c:	2e 7f       	andi	r18, 0xFE	; 254
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
			
			PORTD |= (1 << PORTD1) | (1 << PORTD4); // D1: U3, D4: U2
     932:	8b e2       	ldi	r24, 0x2B	; 43
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	2b e2       	ldi	r18, 0x2B	; 43
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	f9 01       	movw	r30, r18
     93c:	20 81       	ld	r18, Z
     93e:	22 61       	ori	r18, 0x12	; 18
     940:	fc 01       	movw	r30, r24
     942:	20 83       	st	Z, r18
			
			break;
     944:	26 c0       	rjmp	.+76     	; 0x992 <__stack+0x93>
			
		case Phase_B: // Shutdown U2 
			
			PORTD &= ~(1 << PORTD4); 
     946:	8b e2       	ldi	r24, 0x2B	; 43
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	2b e2       	ldi	r18, 0x2B	; 43
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	f9 01       	movw	r30, r18
     950:	20 81       	ld	r18, Z
     952:	2f 7e       	andi	r18, 0xEF	; 239
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
			
			PORTD |= (1 << PORTD1) | (1 << PORTD0);
     958:	8b e2       	ldi	r24, 0x2B	; 43
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	2b e2       	ldi	r18, 0x2B	; 43
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	f9 01       	movw	r30, r18
     962:	20 81       	ld	r18, Z
     964:	23 60       	ori	r18, 0x03	; 3
     966:	fc 01       	movw	r30, r24
     968:	20 83       	st	Z, r18
			
			break;
     96a:	13 c0       	rjmp	.+38     	; 0x992 <__stack+0x93>
				
		case Phase_C: // Shutdown U3
			
			PORTD &= ~(1 << PORTD1); 
     96c:	8b e2       	ldi	r24, 0x2B	; 43
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	2b e2       	ldi	r18, 0x2B	; 43
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	f9 01       	movw	r30, r18
     976:	20 81       	ld	r18, Z
     978:	2d 7f       	andi	r18, 0xFD	; 253
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
			
			PORTD |= (1 << PORTD0) | (1 << PORTD4);
     97e:	8b e2       	ldi	r24, 0x2B	; 43
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	2b e2       	ldi	r18, 0x2B	; 43
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	f9 01       	movw	r30, r18
     988:	20 81       	ld	r18, Z
     98a:	21 61       	ori	r18, 0x11	; 17
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
			
			break;
     990:	00 00       	nop
			return; // Error state
			
	}
	
	
	return;
     992:	00 00       	nop
     994:	03 c0       	rjmp	.+6      	; 0x99c <__stack+0x9d>
	}	
}

void Update_Commutation(void){
	
	if(!Motor_Enabled) return;
     996:	00 00       	nop
     998:	01 c0       	rjmp	.+2      	; 0x99c <__stack+0x9d>
	// ^ Yeah this really slows things down. Design mistake.
	
	uint8_t Phase_Index = (Hall_State>>3) & 0b111;
	
	if(Phase_Index == 7 || Phase_Index == 0){
		return; // Error state
     99a:	00 00       	nop
	}
	
	
	return;
	
}
     99c:	63 96       	adiw	r28, 0x13	; 19
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <Init_Motor>:

Motor_Status Init_Motor(void){
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	27 97       	sbiw	r28, 0x07	; 7
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
	
	DDRB |= (1 << DDB4) | (1 << DDB1); // Set MOS_DRIVER, IN_3 as a outputs	
     9c2:	84 e2       	ldi	r24, 0x24	; 36
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	24 e2       	ldi	r18, 0x24	; 36
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	f9 01       	movw	r30, r18
     9cc:	20 81       	ld	r18, Z
     9ce:	22 61       	ori	r18, 0x12	; 18
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 83       	st	Z, r18
	DDRD |= (1 << DDD7) | (1 <<DDD5) | (1 << DDD6) | (1 << DDD0) | (1 << DDD1) | (1 << DDD4); // Set RELAYS, IN_2, IN_1 , SD_U1, SD_U3, SD_U2 as outputs
     9d4:	8a e2       	ldi	r24, 0x2A	; 42
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	2a e2       	ldi	r18, 0x2A	; 42
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	f9 01       	movw	r30, r18
     9de:	20 81       	ld	r18, Z
     9e0:	23 6f       	ori	r18, 0xF3	; 243
     9e2:	fc 01       	movw	r30, r24
     9e4:	20 83       	st	Z, r18
	
	PORTD &= ~((1 << PORTD0) | (1 << PORTD1) | (1 << PORTD4)); // Ensure all IR2014's are in shutdown state
     9e6:	8b e2       	ldi	r24, 0x2B	; 43
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	2b e2       	ldi	r18, 0x2B	; 43
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	f9 01       	movw	r30, r18
     9f0:	20 81       	ld	r18, Z
     9f2:	2c 7e       	andi	r18, 0xEC	; 236
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
	
	DDRD &= ~((1 << DDD5) | (1 << DDD6));
     9f8:	8a e2       	ldi	r24, 0x2A	; 42
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	2a e2       	ldi	r18, 0x2A	; 42
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	f9 01       	movw	r30, r18
     a02:	20 81       	ld	r18, Z
     a04:	2f 79       	andi	r18, 0x9F	; 159
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
	DDRB &= ~(1<<DDB1); // Set IN_1, IN_2 and IN_3 as High-Z
     a0a:	84 e2       	ldi	r24, 0x24	; 36
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	24 e2       	ldi	r18, 0x24	; 36
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	f9 01       	movw	r30, r18
     a14:	20 81       	ld	r18, Z
     a16:	2d 7f       	andi	r18, 0xFD	; 253
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
	
	TWI_Write(MCP23017_Address, 0x01, 0xFF);         // IODIRB: Set all Port B to inputs
     a1c:	4f ef       	ldi	r20, 0xFF	; 255
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	80 e2       	ldi	r24, 0x20	; 32
     a22:	0e 94 8d 02 	call	0x51a	; 0x51a <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     a26:	00 00       	nop
     a28:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
     a2c:	88 30       	cpi	r24, 0x08	; 8
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <Init_Motor+0x7a>

	TWI_Write(MCP23017_Address, 0x0B, 0b00000010);   // IOCON: INTB is active-high, push-pull
     a30:	42 e0       	ldi	r20, 0x02	; 2
     a32:	6b e0       	ldi	r22, 0x0B	; 11
     a34:	80 e2       	ldi	r24, 0x20	; 32
     a36:	0e 94 8d 02 	call	0x51a	; 0x51a <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     a3a:	00 00       	nop
     a3c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
     a40:	88 30       	cpi	r24, 0x08	; 8
     a42:	e1 f7       	brne	.-8      	; 0xa3c <Init_Motor+0x8e>
	
	TWI_Write(MCP23017_Address, 0x0B, 0b00000100); // Active-low, open-drain
     a44:	44 e0       	ldi	r20, 0x04	; 4
     a46:	6b e0       	ldi	r22, 0x0B	; 11
     a48:	80 e2       	ldi	r24, 0x20	; 32
     a4a:	0e 94 8d 02 	call	0x51a	; 0x51a <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     a4e:	00 00       	nop
     a50:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
     a54:	88 30       	cpi	r24, 0x08	; 8
     a56:	e1 f7       	brne	.-8      	; 0xa50 <Init_Motor+0xa2>

	TWI_Write(MCP23017_Address, 0x07, 0b00000010);   // DEFVALB: Set compare value for GPIOB1 to HIGH
     a58:	42 e0       	ldi	r20, 0x02	; 2
     a5a:	67 e0       	ldi	r22, 0x07	; 7
     a5c:	80 e2       	ldi	r24, 0x20	; 32
     a5e:	0e 94 8d 02 	call	0x51a	; 0x51a <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     a62:	00 00       	nop
     a64:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
     a68:	88 30       	cpi	r24, 0x08	; 8
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <Init_Motor+0xb6>

	TWI_Write(MCP23017_Address, 0x09, 0b00000010);   // INTCONB: Compare GPIOB1 against DEFVALB
     a6c:	42 e0       	ldi	r20, 0x02	; 2
     a6e:	69 e0       	ldi	r22, 0x09	; 9
     a70:	80 e2       	ldi	r24, 0x20	; 32
     a72:	0e 94 8d 02 	call	0x51a	; 0x51a <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     a76:	00 00       	nop
     a78:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
     a7c:	88 30       	cpi	r24, 0x08	; 8
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <Init_Motor+0xca>

	uint8_t dummy_read;
	TWI_Read(MCP23017_Address, 0x11, &dummy_read, NULL);  // Read INTCAPB to clear interrupt flag
     a80:	ce 01       	movw	r24, r28
     a82:	07 96       	adiw	r24, 0x07	; 7
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	ac 01       	movw	r20, r24
     a8a:	61 e1       	ldi	r22, 0x11	; 17
     a8c:	80 e2       	ldi	r24, 0x20	; 32
     a8e:	0e 94 ab 02 	call	0x556	; 0x556 <TWI_Read>
	while(Next_I2C_State != TWI_IDLE);
     a92:	00 00       	nop
     a94:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
     a98:	88 30       	cpi	r24, 0x08	; 8
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <Init_Motor+0xe6>
	
	TWI_Write(MCP23017_Address, 0x05, 0b00111000); 
     a9c:	48 e3       	ldi	r20, 0x38	; 56
     a9e:	65 e0       	ldi	r22, 0x05	; 5
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	0e 94 8d 02 	call	0x51a	; 0x51a <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     aa6:	00 00       	nop
     aa8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
     aac:	88 30       	cpi	r24, 0x08	; 8
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <Init_Motor+0xfa>

	IN_1.Pin = PD6_OC0A;
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <IN_1>
	
	Timer_Status Timer1_Set = Toggle_PWM(&IN_1, OFF); // Just to make sure the pin can be toggled, and to have the pin initalized in a safe state
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	81 ea       	ldi	r24, 0xA1	; 161
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 10 11 	call	0x2220	; 0x2220 <Toggle_PWM>
     ac0:	89 83       	std	Y+1, r24	; 0x01
	
	Timer_Status Timer1_Config = Configure_PWM(&IN_1, 1, 10); // Testing with 10% duty cycle
     ac2:	4a e0       	ldi	r20, 0x0A	; 10
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	81 ea       	ldi	r24, 0xA1	; 161
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Configure_PWM>
     ad0:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Timer1_Set == TIMER_FAULT || Timer1_Config == TIMER_FAULT) return Motor_FAULT;
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	88 23       	and	r24, r24
     ad6:	19 f0       	breq	.+6      	; 0xade <Init_Motor+0x130>
     ad8:	8a 81       	ldd	r24, Y+2	; 0x02
     ada:	88 23       	and	r24, r24
     adc:	11 f4       	brne	.+4      	; 0xae2 <Init_Motor+0x134>
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	3c c0       	rjmp	.+120    	; 0xb5a <Init_Motor+0x1ac>
	
	IN_2.Pin = PD5_OC0B;
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <IN_2>
	
	Timer_Status Timer2_Set = Toggle_PWM(&IN_2, OFF);
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	80 ea       	ldi	r24, 0xA0	; 160
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 10 11 	call	0x2220	; 0x2220 <Toggle_PWM>
     af2:	8b 83       	std	Y+3, r24	; 0x03
	
	Timer_Status Timer2_Config = Configure_PWM(&IN_2, 1, 10);
     af4:	4a e0       	ldi	r20, 0x0A	; 10
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 ea       	ldi	r24, 0xA0	; 160
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Configure_PWM>
     b02:	8c 83       	std	Y+4, r24	; 0x04

	if(Timer2_Set == TIMER_FAULT || Timer2_Config == TIMER_FAULT) return Motor_FAULT;
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	88 23       	and	r24, r24
     b08:	19 f0       	breq	.+6      	; 0xb10 <Init_Motor+0x162>
     b0a:	8c 81       	ldd	r24, Y+4	; 0x04
     b0c:	88 23       	and	r24, r24
     b0e:	11 f4       	brne	.+4      	; 0xb14 <Init_Motor+0x166>
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	23 c0       	rjmp	.+70     	; 0xb5a <Init_Motor+0x1ac>
	
	IN_3.Pin = PB1_OC1A;
     b14:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <IN_3>
	
	Timer_Status Timer3_Set = Toggle_PWM(&IN_3, OFF);
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	82 ea       	ldi	r24, 0xA2	; 162
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 10 11 	call	0x2220	; 0x2220 <Toggle_PWM>
     b22:	8d 83       	std	Y+5, r24	; 0x05
	
	Timer_Status Timer3_Config = Configure_PWM(&IN_3, 1, 10);
     b24:	4a e0       	ldi	r20, 0x0A	; 10
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	82 ea       	ldi	r24, 0xA2	; 162
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Configure_PWM>
     b32:	8e 83       	std	Y+6, r24	; 0x06
	
	if(Timer3_Set == TIMER_FAULT || Timer3_Config == TIMER_FAULT) return Motor_FAULT;
     b34:	8d 81       	ldd	r24, Y+5	; 0x05
     b36:	88 23       	and	r24, r24
     b38:	19 f0       	breq	.+6      	; 0xb40 <Init_Motor+0x192>
     b3a:	8e 81       	ldd	r24, Y+6	; 0x06
     b3c:	88 23       	and	r24, r24
     b3e:	11 f4       	brne	.+4      	; 0xb44 <Init_Motor+0x196>
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	0b c0       	rjmp	.+22     	; 0xb5a <Init_Motor+0x1ac>
	
	sei(); // Ensure interrupts are enabled
     b44:	78 94       	sei
		
	EICRA |= (1 << ISC01); // The falling edge of INT0 generates an interrupt
     b46:	89 e6       	ldi	r24, 0x69	; 105
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	29 e6       	ldi	r18, 0x69	; 105
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	22 60       	ori	r18, 0x02	; 2
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
	
	return Motor_OK;
     b58:	80 e0       	ldi	r24, 0x00	; 0
	
}
     b5a:	27 96       	adiw	r28, 0x07	; 7
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <Init_Buffer>:
	if(Status_Check == BUFFER_FAULT) return BUFFER_FAULT;
	
	return BUFFER_OK;
	
	
}
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	27 97       	sbiw	r28, 0x07	; 7
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	9c 83       	std	Y+4, r25	; 0x04
     b82:	8b 83       	std	Y+3, r24	; 0x03
     b84:	7e 83       	std	Y+6, r23	; 0x06
     b86:	6d 83       	std	Y+5, r22	; 0x05
     b88:	4f 83       	std	Y+7, r20	; 0x07
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	9e 81       	ldd	r25, Y+6	; 0x06
     b8e:	89 2b       	or	r24, r25
     b90:	19 f0       	breq	.+6      	; 0xb98 <Init_Buffer+0x2c>
     b92:	8f 81       	ldd	r24, Y+7	; 0x07
     b94:	88 23       	and	r24, r24
     b96:	11 f4       	brne	.+4      	; 0xb9c <Init_Buffer+0x30>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	51 c0       	rjmp	.+162    	; 0xc3e <Init_Buffer+0xd2>
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	99 23       	and	r25, r25
     ba2:	14 f4       	brge	.+4      	; 0xba8 <Init_Buffer+0x3c>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	4b c0       	rjmp	.+150    	; 0xc3e <Init_Buffer+0xd2>
     ba8:	2d 81       	ldd	r18, Y+5	; 0x05
     baa:	3e 81       	ldd	r19, Y+6	; 0x06
     bac:	c9 01       	movw	r24, r18
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
     bb6:	0e 94 a2 14 	call	0x2944	; 0x2944 <malloc>
     bba:	9a 83       	std	Y+2, r25	; 0x02
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	9a 81       	ldd	r25, Y+2	; 0x02
     bc2:	89 2b       	or	r24, r25
     bc4:	11 f4       	brne	.+4      	; 0xbca <Init_Buffer+0x5e>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	3a c0       	rjmp	.+116    	; 0xc3e <Init_Buffer+0xd2>
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	29 81       	ldd	r18, Y+1	; 0x01
     bd0:	3a 81       	ldd	r19, Y+2	; 0x02
     bd2:	fc 01       	movw	r30, r24
     bd4:	31 83       	std	Z+1, r19	; 0x01
     bd6:	20 83       	st	Z, r18
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	fc 01       	movw	r30, r24
     bde:	13 82       	std	Z+3, r1	; 0x03
     be0:	12 82       	std	Z+2, r1	; 0x02
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	fc 01       	movw	r30, r24
     be8:	15 82       	std	Z+5, r1	; 0x05
     bea:	14 82       	std	Z+4, r1	; 0x04
     bec:	2d 81       	ldd	r18, Y+5	; 0x05
     bee:	3e 81       	ldd	r19, Y+6	; 0x06
     bf0:	c9 01       	movw	r24, r18
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	28 0f       	add	r18, r24
     bf8:	39 1f       	adc	r19, r25
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	fc 01       	movw	r30, r24
     c00:	37 83       	std	Z+7, r19	; 0x07
     c02:	26 83       	std	Z+6, r18	; 0x06
     c04:	9f 81       	ldd	r25, Y+7	; 0x07
     c06:	89 2f       	mov	r24, r25
     c08:	88 0f       	add	r24, r24
     c0a:	28 2f       	mov	r18, r24
     c0c:	29 0f       	add	r18, r25
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	fc 01       	movw	r30, r24
     c14:	20 87       	std	Z+8, r18	; 0x08
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	fc 01       	movw	r30, r24
     c1c:	12 86       	std	Z+10, r1	; 0x0a
     c1e:	11 86       	std	Z+9, r1	; 0x09
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	fc 01       	movw	r30, r24
     c26:	14 86       	std	Z+12, r1	; 0x0c
     c28:	13 86       	std	Z+11, r1	; 0x0b
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	fc 01       	movw	r30, r24
     c30:	16 86       	std	Z+14, r1	; 0x0e
     c32:	15 86       	std	Z+13, r1	; 0x0d
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	fc 01       	movw	r30, r24
     c3a:	17 86       	std	Z+15, r1	; 0x0f
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	27 96       	adiw	r28, 0x07	; 7
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <Increase_Buffer>:
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	27 97       	sbiw	r28, 0x07	; 7
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	9f 83       	std	Y+7, r25	; 0x07
     c66:	8e 83       	std	Y+6, r24	; 0x06
     c68:	8e 81       	ldd	r24, Y+6	; 0x06
     c6a:	9f 81       	ldd	r25, Y+7	; 0x07
     c6c:	89 2b       	or	r24, r25
     c6e:	11 f4       	brne	.+4      	; 0xc74 <Increase_Buffer+0x24>
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	50 c0       	rjmp	.+160    	; 0xd14 <Increase_Buffer+0xc4>
     c74:	8e 81       	ldd	r24, Y+6	; 0x06
     c76:	9f 81       	ldd	r25, Y+7	; 0x07
     c78:	fc 01       	movw	r30, r24
     c7a:	86 81       	ldd	r24, Z+6	; 0x06
     c7c:	97 81       	ldd	r25, Z+7	; 0x07
     c7e:	9a 83       	std	Y+2, r25	; 0x02
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	8e 81       	ldd	r24, Y+6	; 0x06
     c84:	9f 81       	ldd	r25, Y+7	; 0x07
     c86:	fc 01       	movw	r30, r24
     c88:	80 85       	ldd	r24, Z+8	; 0x08
     c8a:	8b 83       	std	Y+3, r24	; 0x03
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	9c 01       	movw	r18, r24
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	88 2f       	mov	r24, r24
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	a0 e0       	ldi	r26, 0x00	; 0
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	82 0f       	add	r24, r18
     ca2:	93 1f       	adc	r25, r19
     ca4:	a4 1f       	adc	r26, r20
     ca6:	b5 1f       	adc	r27, r21
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	a1 40       	sbci	r26, 0x01	; 1
     cac:	b1 05       	cpc	r27, r1
     cae:	28 f4       	brcc	.+10     	; 0xcba <Increase_Buffer+0x6a>
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	81 15       	cp	r24, r1
     cb6:	98 40       	sbci	r25, 0x08	; 8
     cb8:	10 f0       	brcs	.+4      	; 0xcbe <Increase_Buffer+0x6e>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	2b c0       	rjmp	.+86     	; 0xd14 <Increase_Buffer+0xc4>
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	28 0f       	add	r18, r24
     cca:	39 1f       	adc	r19, r25
     ccc:	8e 81       	ldd	r24, Y+6	; 0x06
     cce:	9f 81       	ldd	r25, Y+7	; 0x07
     cd0:	fc 01       	movw	r30, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	b9 01       	movw	r22, r18
     cd8:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <realloc>
     cdc:	9d 83       	std	Y+5, r25	; 0x05
     cde:	8c 83       	std	Y+4, r24	; 0x04
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	9d 81       	ldd	r25, Y+5	; 0x05
     ce4:	89 2b       	or	r24, r25
     ce6:	11 f4       	brne	.+4      	; 0xcec <Increase_Buffer+0x9c>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	14 c0       	rjmp	.+40     	; 0xd14 <Increase_Buffer+0xc4>
     cec:	8e 81       	ldd	r24, Y+6	; 0x06
     cee:	9f 81       	ldd	r25, Y+7	; 0x07
     cf0:	2c 81       	ldd	r18, Y+4	; 0x04
     cf2:	3d 81       	ldd	r19, Y+5	; 0x05
     cf4:	fc 01       	movw	r30, r24
     cf6:	31 83       	std	Z+1, r19	; 0x01
     cf8:	20 83       	st	Z, r18
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	28 0f       	add	r18, r24
     d06:	39 1f       	adc	r19, r25
     d08:	8e 81       	ldd	r24, Y+6	; 0x06
     d0a:	9f 81       	ldd	r25, Y+7	; 0x07
     d0c:	fc 01       	movw	r30, r24
     d0e:	37 83       	std	Z+7, r19	; 0x07
     d10:	26 83       	std	Z+6, r18	; 0x06
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	27 96       	adiw	r28, 0x07	; 7
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <IsEmpty>:
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <IsEmpty+0x6>
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	9a 83       	std	Y+2, r25	; 0x02
     d32:	89 83       	std	Y+1, r24	; 0x01
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	fc 01       	movw	r30, r24
     d3a:	87 85       	ldd	r24, Z+15	; 0x0f
     d3c:	88 23       	and	r24, r24
     d3e:	79 f4       	brne	.+30     	; 0xd5e <IsEmpty+0x38>
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	fc 01       	movw	r30, r24
     d46:	22 81       	ldd	r18, Z+2	; 0x02
     d48:	33 81       	ldd	r19, Z+3	; 0x03
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	fc 01       	movw	r30, r24
     d50:	84 81       	ldd	r24, Z+4	; 0x04
     d52:	95 81       	ldd	r25, Z+5	; 0x05
     d54:	28 17       	cp	r18, r24
     d56:	39 07       	cpc	r19, r25
     d58:	11 f4       	brne	.+4      	; 0xd5e <IsEmpty+0x38>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <IsEmpty+0x3a>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <Write_to_Buffer>:
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	2a 97       	sbiw	r28, 0x0a	; 10
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	98 87       	std	Y+8, r25	; 0x08
     d80:	8f 83       	std	Y+7, r24	; 0x07
     d82:	7a 87       	std	Y+10, r23	; 0x0a
     d84:	69 87       	std	Y+9, r22	; 0x09
     d86:	8f 81       	ldd	r24, Y+7	; 0x07
     d88:	98 85       	ldd	r25, Y+8	; 0x08
     d8a:	fc 01       	movw	r30, r24
     d8c:	84 81       	ldd	r24, Z+4	; 0x04
     d8e:	95 81       	ldd	r25, Z+5	; 0x05
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	8f 81       	ldd	r24, Y+7	; 0x07
     d96:	98 85       	ldd	r25, Y+8	; 0x08
     d98:	fc 01       	movw	r30, r24
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	8b 83       	std	Y+3, r24	; 0x03
     da2:	8f 81       	ldd	r24, Y+7	; 0x07
     da4:	98 85       	ldd	r25, Y+8	; 0x08
     da6:	fc 01       	movw	r30, r24
     da8:	86 81       	ldd	r24, Z+6	; 0x06
     daa:	97 81       	ldd	r25, Z+7	; 0x07
     dac:	9e 83       	std	Y+6, r25	; 0x06
     dae:	8d 83       	std	Y+5, r24	; 0x05
     db0:	29 81       	ldd	r18, Y+1	; 0x01
     db2:	3a 81       	ldd	r19, Y+2	; 0x02
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	28 17       	cp	r18, r24
     dba:	39 07       	cpc	r19, r25
     dbc:	51 f4       	brne	.+20     	; 0xdd2 <Write_to_Buffer+0x68>
     dbe:	8f 81       	ldd	r24, Y+7	; 0x07
     dc0:	98 85       	ldd	r25, Y+8	; 0x08
     dc2:	fc 01       	movw	r30, r24
     dc4:	15 82       	std	Z+5, r1	; 0x05
     dc6:	14 82       	std	Z+4, r1	; 0x04
     dc8:	8f 81       	ldd	r24, Y+7	; 0x07
     dca:	98 85       	ldd	r25, Y+8	; 0x08
     dcc:	21 e0       	ldi	r18, 0x01	; 1
     dce:	fc 01       	movw	r30, r24
     dd0:	27 87       	std	Z+15, r18	; 0x0f
     dd2:	8f 81       	ldd	r24, Y+7	; 0x07
     dd4:	98 85       	ldd	r25, Y+8	; 0x08
     dd6:	fc 01       	movw	r30, r24
     dd8:	87 85       	ldd	r24, Z+15	; 0x0f
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	e1 f5       	brne	.+120    	; 0xe56 <Write_to_Buffer+0xec>
     dde:	2b 81       	ldd	r18, Y+3	; 0x03
     de0:	3c 81       	ldd	r19, Y+4	; 0x04
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	28 17       	cp	r18, r24
     de8:	39 07       	cpc	r19, r25
     dea:	a9 f5       	brne	.+106    	; 0xe56 <Write_to_Buffer+0xec>
     dec:	8f 81       	ldd	r24, Y+7	; 0x07
     dee:	98 85       	ldd	r25, Y+8	; 0x08
     df0:	0e 94 28 06 	call	0xc50	; 0xc50 <Increase_Buffer>
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	69 f5       	brne	.+90     	; 0xe52 <Write_to_Buffer+0xe8>
     df8:	8f 81       	ldd	r24, Y+7	; 0x07
     dfa:	98 85       	ldd	r25, Y+8	; 0x08
     dfc:	22 e0       	ldi	r18, 0x02	; 2
     dfe:	fc 01       	movw	r30, r24
     e00:	27 87       	std	Z+15, r18	; 0x0f
     e02:	8f 81       	ldd	r24, Y+7	; 0x07
     e04:	98 85       	ldd	r25, Y+8	; 0x08
     e06:	29 81       	ldd	r18, Y+1	; 0x01
     e08:	3a 81       	ldd	r19, Y+2	; 0x02
     e0a:	fc 01       	movw	r30, r24
     e0c:	36 87       	std	Z+14, r19	; 0x0e
     e0e:	25 87       	std	Z+13, r18	; 0x0d
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	98 85       	ldd	r25, Y+8	; 0x08
     e14:	2d 81       	ldd	r18, Y+5	; 0x05
     e16:	3e 81       	ldd	r19, Y+6	; 0x06
     e18:	fc 01       	movw	r30, r24
     e1a:	32 87       	std	Z+10, r19	; 0x0a
     e1c:	21 87       	std	Z+9, r18	; 0x09
     e1e:	8f 81       	ldd	r24, Y+7	; 0x07
     e20:	98 85       	ldd	r25, Y+8	; 0x08
     e22:	2d 81       	ldd	r18, Y+5	; 0x05
     e24:	3e 81       	ldd	r19, Y+6	; 0x06
     e26:	fc 01       	movw	r30, r24
     e28:	34 87       	std	Z+12, r19	; 0x0c
     e2a:	23 87       	std	Z+11, r18	; 0x0b
     e2c:	8f 81       	ldd	r24, Y+7	; 0x07
     e2e:	98 85       	ldd	r25, Y+8	; 0x08
     e30:	fc 01       	movw	r30, r24
     e32:	26 81       	ldd	r18, Z+6	; 0x06
     e34:	37 81       	ldd	r19, Z+7	; 0x07
     e36:	8f 81       	ldd	r24, Y+7	; 0x07
     e38:	98 85       	ldd	r25, Y+8	; 0x08
     e3a:	fc 01       	movw	r30, r24
     e3c:	80 85       	ldd	r24, Z+8	; 0x08
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	28 1b       	sub	r18, r24
     e44:	39 0b       	sbc	r19, r25
     e46:	8f 81       	ldd	r24, Y+7	; 0x07
     e48:	98 85       	ldd	r25, Y+8	; 0x08
     e4a:	fc 01       	movw	r30, r24
     e4c:	35 83       	std	Z+5, r19	; 0x05
     e4e:	24 83       	std	Z+4, r18	; 0x04
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <Write_to_Buffer+0xec>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	2a c0       	rjmp	.+84     	; 0xeaa <Write_to_Buffer+0x140>
     e56:	8f 81       	ldd	r24, Y+7	; 0x07
     e58:	98 85       	ldd	r25, Y+8	; 0x08
     e5a:	fc 01       	movw	r30, r24
     e5c:	40 81       	ld	r20, Z
     e5e:	51 81       	ldd	r21, Z+1	; 0x01
     e60:	8f 81       	ldd	r24, Y+7	; 0x07
     e62:	98 85       	ldd	r25, Y+8	; 0x08
     e64:	fc 01       	movw	r30, r24
     e66:	24 81       	ldd	r18, Z+4	; 0x04
     e68:	35 81       	ldd	r19, Z+5	; 0x05
     e6a:	c9 01       	movw	r24, r18
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	9a 01       	movw	r18, r20
     e76:	28 0f       	add	r18, r24
     e78:	39 1f       	adc	r19, r25
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	fc 01       	movw	r30, r24
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	a2 81       	ldd	r26, Z+2	; 0x02
     e86:	f9 01       	movw	r30, r18
     e88:	80 83       	st	Z, r24
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	a2 83       	std	Z+2, r26	; 0x02
     e8e:	8f 81       	ldd	r24, Y+7	; 0x07
     e90:	98 85       	ldd	r25, Y+8	; 0x08
     e92:	fc 01       	movw	r30, r24
     e94:	84 81       	ldd	r24, Z+4	; 0x04
     e96:	95 81       	ldd	r25, Z+5	; 0x05
     e98:	9c 01       	movw	r18, r24
     e9a:	2f 5f       	subi	r18, 0xFF	; 255
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ea0:	98 85       	ldd	r25, Y+8	; 0x08
     ea2:	fc 01       	movw	r30, r24
     ea4:	35 83       	std	Z+5, r19	; 0x05
     ea6:	24 83       	std	Z+4, r18	; 0x04
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	2a 96       	adiw	r28, 0x0a	; 10
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <Read_from_Buffer>:
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <Read_from_Buffer+0x6>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <Read_from_Buffer+0x8>
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <Read_from_Buffer+0xa>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9c 83       	std	Y+4, r25	; 0x04
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	7e 83       	std	Y+6, r23	; 0x06
     ed0:	6d 83       	std	Y+5, r22	; 0x05
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	fc 01       	movw	r30, r24
     ed8:	82 81       	ldd	r24, Z+2	; 0x02
     eda:	93 81       	ldd	r25, Z+3	; 0x03
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	0e 94 93 06 	call	0xd26	; 0xd26 <IsEmpty>
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	11 f4       	brne	.+4      	; 0xef0 <Read_from_Buffer+0x34>
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	ab c0       	rjmp	.+342    	; 0x1046 <Read_from_Buffer+0x18a>
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	9c 81       	ldd	r25, Y+4	; 0x04
     ef4:	fc 01       	movw	r30, r24
     ef6:	40 81       	ld	r20, Z
     ef8:	51 81       	ldd	r21, Z+1	; 0x01
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	9c 81       	ldd	r25, Y+4	; 0x04
     efe:	fc 01       	movw	r30, r24
     f00:	22 81       	ldd	r18, Z+2	; 0x02
     f02:	33 81       	ldd	r19, Z+3	; 0x03
     f04:	c9 01       	movw	r24, r18
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	82 0f       	add	r24, r18
     f0c:	93 1f       	adc	r25, r19
     f0e:	84 0f       	add	r24, r20
     f10:	95 1f       	adc	r25, r21
     f12:	2d 81       	ldd	r18, Y+5	; 0x05
     f14:	3e 81       	ldd	r19, Y+6	; 0x06
     f16:	fc 01       	movw	r30, r24
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	a2 81       	ldd	r26, Z+2	; 0x02
     f1e:	f9 01       	movw	r30, r18
     f20:	80 83       	st	Z, r24
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	a2 83       	std	Z+2, r26	; 0x02
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	fc 01       	movw	r30, r24
     f2c:	87 85       	ldd	r24, Z+15	; 0x0f
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	a1 f0       	breq	.+40     	; 0xf60 <Read_from_Buffer+0xa4>
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	91 05       	cpc	r25, r1
     f3c:	91 f1       	breq	.+100    	; 0xfa2 <Read_from_Buffer+0xe6>
     f3e:	89 2b       	or	r24, r25
     f40:	09 f0       	breq	.+2      	; 0xf44 <Read_from_Buffer+0x88>
     f42:	6d c0       	rjmp	.+218    	; 0x101e <Read_from_Buffer+0x162>
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	fc 01       	movw	r30, r24
     f4a:	82 81       	ldd	r24, Z+2	; 0x02
     f4c:	93 81       	ldd	r25, Z+3	; 0x03
     f4e:	9c 01       	movw	r18, r24
     f50:	2f 5f       	subi	r18, 0xFF	; 255
     f52:	3f 4f       	sbci	r19, 0xFF	; 255
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	fc 01       	movw	r30, r24
     f5a:	33 83       	std	Z+3, r19	; 0x03
     f5c:	22 83       	std	Z+2, r18	; 0x02
     f5e:	61 c0       	rjmp	.+194    	; 0x1022 <Read_from_Buffer+0x166>
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	fc 01       	movw	r30, r24
     f66:	86 81       	ldd	r24, Z+6	; 0x06
     f68:	97 81       	ldd	r25, Z+7	; 0x07
     f6a:	9c 01       	movw	r18, r24
     f6c:	21 50       	subi	r18, 0x01	; 1
     f6e:	31 09       	sbc	r19, r1
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	31 f4       	brne	.+12     	; 0xf86 <Read_from_Buffer+0xca>
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	fc 01       	movw	r30, r24
     f80:	13 82       	std	Z+3, r1	; 0x03
     f82:	12 82       	std	Z+2, r1	; 0x02
     f84:	4e c0       	rjmp	.+156    	; 0x1022 <Read_from_Buffer+0x166>
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	fc 01       	movw	r30, r24
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	9c 01       	movw	r18, r24
     f92:	2f 5f       	subi	r18, 0xFF	; 255
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	fc 01       	movw	r30, r24
     f9c:	33 83       	std	Z+3, r19	; 0x03
     f9e:	22 83       	std	Z+2, r18	; 0x02
     fa0:	40 c0       	rjmp	.+128    	; 0x1022 <Read_from_Buffer+0x166>
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	fc 01       	movw	r30, r24
     fa8:	81 85       	ldd	r24, Z+9	; 0x09
     faa:	92 85       	ldd	r25, Z+10	; 0x0a
     fac:	9c 01       	movw	r18, r24
     fae:	21 50       	subi	r18, 0x01	; 1
     fb0:	31 09       	sbc	r19, r1
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	28 17       	cp	r18, r24
     fb8:	39 07       	cpc	r19, r25
     fba:	31 f4       	brne	.+12     	; 0xfc8 <Read_from_Buffer+0x10c>
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	fc 01       	movw	r30, r24
     fc2:	13 82       	std	Z+3, r1	; 0x03
     fc4:	12 82       	std	Z+2, r1	; 0x02
     fc6:	2d c0       	rjmp	.+90     	; 0x1022 <Read_from_Buffer+0x166>
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	fc 01       	movw	r30, r24
     fce:	85 85       	ldd	r24, Z+13	; 0x0d
     fd0:	96 85       	ldd	r25, Z+14	; 0x0e
     fd2:	9c 01       	movw	r18, r24
     fd4:	21 50       	subi	r18, 0x01	; 1
     fd6:	31 09       	sbc	r19, r1
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	28 17       	cp	r18, r24
     fde:	39 07       	cpc	r19, r25
     fe0:	81 f4       	brne	.+32     	; 0x1002 <Read_from_Buffer+0x146>
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	fc 01       	movw	r30, r24
     fe8:	23 85       	ldd	r18, Z+11	; 0x0b
     fea:	34 85       	ldd	r19, Z+12	; 0x0c
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	fc 01       	movw	r30, r24
     ff2:	33 83       	std	Z+3, r19	; 0x03
     ff4:	22 83       	std	Z+2, r18	; 0x02
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	21 e0       	ldi	r18, 0x01	; 1
     ffc:	fc 01       	movw	r30, r24
     ffe:	27 87       	std	Z+15, r18	; 0x0f
    1000:	10 c0       	rjmp	.+32     	; 0x1022 <Read_from_Buffer+0x166>
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	fc 01       	movw	r30, r24
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	93 81       	ldd	r25, Z+3	; 0x03
    100c:	9c 01       	movw	r18, r24
    100e:	2f 5f       	subi	r18, 0xFF	; 255
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	fc 01       	movw	r30, r24
    1018:	33 83       	std	Z+3, r19	; 0x03
    101a:	22 83       	std	Z+2, r18	; 0x02
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <Read_from_Buffer+0x166>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	12 c0       	rjmp	.+36     	; 0x1046 <Read_from_Buffer+0x18a>
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	9c 81       	ldd	r25, Y+4	; 0x04
    1026:	fc 01       	movw	r30, r24
    1028:	22 81       	ldd	r18, Z+2	; 0x02
    102a:	33 81       	ldd	r19, Z+3	; 0x03
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	fc 01       	movw	r30, r24
    1032:	84 81       	ldd	r24, Z+4	; 0x04
    1034:	95 81       	ldd	r25, Z+5	; 0x05
    1036:	28 17       	cp	r18, r24
    1038:	39 07       	cpc	r19, r25
    103a:	21 f4       	brne	.+8      	; 0x1044 <Read_from_Buffer+0x188>
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	fc 01       	movw	r30, r24
    1042:	17 86       	std	Z+15, r1	; 0x0f
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	26 96       	adiw	r28, 0x06	; 6
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <TWI_Add_W_To_Queue>:
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	2c 97       	sbiw	r28, 0x0c	; 12
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	99 87       	std	Y+9, r25	; 0x09
    106e:	88 87       	std	Y+8, r24	; 0x08
    1070:	6a 87       	std	Y+10, r22	; 0x0a
    1072:	4b 87       	std	Y+11, r20	; 0x0b
    1074:	2c 87       	std	Y+12, r18	; 0x0c
    1076:	88 85       	ldd	r24, Y+8	; 0x08
    1078:	99 85       	ldd	r25, Y+9	; 0x09
    107a:	0e 94 93 06 	call	0xd26	; 0xd26 <IsEmpty>
    107e:	88 23       	and	r24, r24
    1080:	59 f0       	breq	.+22     	; 0x1098 <TWI_Add_W_To_Queue+0x40>
    1082:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Next_I2C_State>
    1086:	88 30       	cpi	r24, 0x08	; 8
    1088:	39 f4       	brne	.+14     	; 0x1098 <TWI_Add_W_To_Queue+0x40>
    108a:	4c 85       	ldd	r20, Y+12	; 0x0c
    108c:	6b 85       	ldd	r22, Y+11	; 0x0b
    108e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1090:	0e 94 8d 02 	call	0x51a	; 0x51a <TWI_Write>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	46 c0       	rjmp	.+140    	; 0x1124 <TWI_Add_W_To_Queue+0xcc>
    1098:	1d 82       	std	Y+5, r1	; 0x05
    109a:	1e 82       	std	Y+6, r1	; 0x06
    109c:	1f 82       	std	Y+7, r1	; 0x07
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	8d 83       	std	Y+5, r24	; 0x05
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	8e 83       	std	Y+6, r24	; 0x06
    10a6:	9e 01       	movw	r18, r28
    10a8:	2b 5f       	subi	r18, 0xFB	; 251
    10aa:	3f 4f       	sbci	r19, 0xFF	; 255
    10ac:	88 85       	ldd	r24, Y+8	; 0x08
    10ae:	99 85       	ldd	r25, Y+9	; 0x09
    10b0:	b9 01       	movw	r22, r18
    10b2:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Write_to_Buffer>
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	88 23       	and	r24, r24
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <TWI_Add_W_To_Queue+0x6a>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	31 c0       	rjmp	.+98     	; 0x1124 <TWI_Add_W_To_Queue+0xcc>
    10c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c4:	8e 83       	std	Y+6, r24	; 0x06
    10c6:	9e 01       	movw	r18, r28
    10c8:	2b 5f       	subi	r18, 0xFB	; 251
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	88 85       	ldd	r24, Y+8	; 0x08
    10ce:	99 85       	ldd	r25, Y+9	; 0x09
    10d0:	b9 01       	movw	r22, r18
    10d2:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Write_to_Buffer>
    10d6:	8a 83       	std	Y+2, r24	; 0x02
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	88 23       	and	r24, r24
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <TWI_Add_W_To_Queue+0x8a>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	21 c0       	rjmp	.+66     	; 0x1124 <TWI_Add_W_To_Queue+0xcc>
    10e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e4:	8e 83       	std	Y+6, r24	; 0x06
    10e6:	9e 01       	movw	r18, r28
    10e8:	2b 5f       	subi	r18, 0xFB	; 251
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	88 85       	ldd	r24, Y+8	; 0x08
    10ee:	99 85       	ldd	r25, Y+9	; 0x09
    10f0:	b9 01       	movw	r22, r18
    10f2:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Write_to_Buffer>
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	11 f4       	brne	.+4      	; 0x1102 <TWI_Add_W_To_Queue+0xaa>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	11 c0       	rjmp	.+34     	; 0x1124 <TWI_Add_W_To_Queue+0xcc>
    1102:	8c 85       	ldd	r24, Y+12	; 0x0c
    1104:	8e 83       	std	Y+6, r24	; 0x06
    1106:	9e 01       	movw	r18, r28
    1108:	2b 5f       	subi	r18, 0xFB	; 251
    110a:	3f 4f       	sbci	r19, 0xFF	; 255
    110c:	88 85       	ldd	r24, Y+8	; 0x08
    110e:	99 85       	ldd	r25, Y+9	; 0x09
    1110:	b9 01       	movw	r22, r18
    1112:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Write_to_Buffer>
    1116:	8c 83       	std	Y+4, r24	; 0x04
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	88 23       	and	r24, r24
    111c:	11 f4       	brne	.+4      	; 0x1122 <TWI_Add_W_To_Queue+0xca>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <TWI_Add_W_To_Queue+0xcc>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	2c 96       	adiw	r28, 0x0c	; 12
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <Fetch_TWI>:


Ring_Buffer_Status Fetch_TWI(Ring_Buffer* Buffer){
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	29 97       	sbiw	r28, 0x09	; 9
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	99 87       	std	Y+9, r25	; 0x09
    114c:	88 87       	std	Y+8, r24	; 0x08
	
	if(IsEmpty(Buffer) == true){ 
    114e:	88 85       	ldd	r24, Y+8	; 0x08
    1150:	99 85       	ldd	r25, Y+9	; 0x09
    1152:	0e 94 93 06 	call	0xd26	; 0xd26 <IsEmpty>
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	11 f4       	brne	.+4      	; 0x115e <Fetch_TWI+0x28>
		return BUFFER_EMPTY;
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	97 c0       	rjmp	.+302    	; 0x128c <Fetch_TWI+0x156>
	}
	
	Buffer_Item Buffer_Out;
	
	if(Buffer == NULL){
    115e:	88 85       	ldd	r24, Y+8	; 0x08
    1160:	99 85       	ldd	r25, Y+9	; 0x09
    1162:	89 2b       	or	r24, r25
    1164:	11 f4       	brne	.+4      	; 0x116a <Fetch_TWI+0x34>
		return BUFFER_FAULT;
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	91 c0       	rjmp	.+290    	; 0x128c <Fetch_TWI+0x156>
	uint8_t Device_Address;
	uint8_t Register_Address;
	
	TWI_Modes TWI_Mode;
	
	Ring_Buffer_Status Status_Check = Read_from_Buffer(Buffer, &Buffer_Out);
    116a:	9e 01       	movw	r18, r28
    116c:	2b 5f       	subi	r18, 0xFB	; 251
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	88 85       	ldd	r24, Y+8	; 0x08
    1172:	99 85       	ldd	r25, Y+9	; 0x09
    1174:	b9 01       	movw	r22, r18
    1176:	0e 94 5e 07 	call	0xebc	; 0xebc <Read_from_Buffer>
    117a:	89 83       	std	Y+1, r24	; 0x01
	if(Status_Check == BUFFER_FAULT || Status_Check == BUFFER_EMPTY) return BUFFER_FAULT;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	88 23       	and	r24, r24
    1180:	19 f0       	breq	.+6      	; 0x1188 <Fetch_TWI+0x52>
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	11 f4       	brne	.+4      	; 0x118c <Fetch_TWI+0x56>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	80 c0       	rjmp	.+256    	; 0x128c <Fetch_TWI+0x156>
	
	if(Buffer_Out.Item_Type == BUFFER_TYPE_PTR) return BUFFER_FAULT; // Maybe I check this too much, but better safe then sorry.
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	88 23       	and	r24, r24
    1190:	11 f4       	brne	.+4      	; 0x1196 <Fetch_TWI+0x60>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	7b c0       	rjmp	.+246    	; 0x128c <Fetch_TWI+0x156>
	
	if(Buffer_Out.Item.Byte != WRITING_MODE && Buffer_Out.Item.Byte != READING_MODE) return BUFFER_FAULT;
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	29 f0       	breq	.+10     	; 0x11a6 <Fetch_TWI+0x70>
    119c:	8e 81       	ldd	r24, Y+6	; 0x06
    119e:	88 23       	and	r24, r24
    11a0:	11 f0       	breq	.+4      	; 0x11a6 <Fetch_TWI+0x70>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	73 c0       	rjmp	.+230    	; 0x128c <Fetch_TWI+0x156>
	
	TWI_Mode = Buffer_Out.Item.Byte;
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	8a 83       	std	Y+2, r24	; 0x02
	
	Status_Check = Read_from_Buffer(Buffer, &Buffer_Out); // Probably should check if this fails... SO MANY TO CHECK.
    11aa:	9e 01       	movw	r18, r28
    11ac:	2b 5f       	subi	r18, 0xFB	; 251
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	88 85       	ldd	r24, Y+8	; 0x08
    11b2:	99 85       	ldd	r25, Y+9	; 0x09
    11b4:	b9 01       	movw	r22, r18
    11b6:	0e 94 5e 07 	call	0xebc	; 0xebc <Read_from_Buffer>
    11ba:	89 83       	std	Y+1, r24	; 0x01
	if(Status_Check == BUFFER_FAULT || Status_Check == BUFFER_EMPTY) return BUFFER_FAULT; // I can probably make this cleaner somehow. Low priority.
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	88 23       	and	r24, r24
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <Fetch_TWI+0x92>
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	82 30       	cpi	r24, 0x02	; 2
    11c6:	11 f4       	brne	.+4      	; 0x11cc <Fetch_TWI+0x96>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	60 c0       	rjmp	.+192    	; 0x128c <Fetch_TWI+0x156>
	
	if(Buffer_Out.Item_Type == BUFFER_TYPE_PTR) return BUFFER_FAULT;
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	88 23       	and	r24, r24
    11d0:	11 f4       	brne	.+4      	; 0x11d6 <Fetch_TWI+0xa0>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	5b c0       	rjmp	.+182    	; 0x128c <Fetch_TWI+0x156>
	
	Device_Address = Buffer_Out.Item.Byte;
    11d6:	8e 81       	ldd	r24, Y+6	; 0x06
    11d8:	8b 83       	std	Y+3, r24	; 0x03
	
	Status_Check = Read_from_Buffer(Buffer, &Buffer_Out);
    11da:	9e 01       	movw	r18, r28
    11dc:	2b 5f       	subi	r18, 0xFB	; 251
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	88 85       	ldd	r24, Y+8	; 0x08
    11e2:	99 85       	ldd	r25, Y+9	; 0x09
    11e4:	b9 01       	movw	r22, r18
    11e6:	0e 94 5e 07 	call	0xebc	; 0xebc <Read_from_Buffer>
    11ea:	89 83       	std	Y+1, r24	; 0x01
	if(Status_Check == BUFFER_FAULT || Status_Check == BUFFER_EMPTY) return BUFFER_FAULT;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	88 23       	and	r24, r24
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <Fetch_TWI+0xc2>
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	82 30       	cpi	r24, 0x02	; 2
    11f6:	11 f4       	brne	.+4      	; 0x11fc <Fetch_TWI+0xc6>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	48 c0       	rjmp	.+144    	; 0x128c <Fetch_TWI+0x156>
	
	if(Buffer_Out.Item_Type == BUFFER_TYPE_PTR) return BUFFER_FAULT;
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	88 23       	and	r24, r24
    1200:	11 f4       	brne	.+4      	; 0x1206 <Fetch_TWI+0xd0>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	43 c0       	rjmp	.+134    	; 0x128c <Fetch_TWI+0x156>
		
	Register_Address = Buffer_Out.Item.Byte;
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
    1208:	8c 83       	std	Y+4, r24	; 0x04
	
	
	if(TWI_Mode == READING_MODE){
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	88 23       	and	r24, r24
    120e:	09 f5       	brne	.+66     	; 0x1252 <Fetch_TWI+0x11c>
		
		Status_Check = Read_from_Buffer(Buffer, &Buffer_Out);
    1210:	9e 01       	movw	r18, r28
    1212:	2b 5f       	subi	r18, 0xFB	; 251
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	88 85       	ldd	r24, Y+8	; 0x08
    1218:	99 85       	ldd	r25, Y+9	; 0x09
    121a:	b9 01       	movw	r22, r18
    121c:	0e 94 5e 07 	call	0xebc	; 0xebc <Read_from_Buffer>
    1220:	89 83       	std	Y+1, r24	; 0x01
		if(Status_Check == BUFFER_FAULT || Status_Check == BUFFER_EMPTY) return BUFFER_FAULT;
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	88 23       	and	r24, r24
    1226:	19 f0       	breq	.+6      	; 0x122e <Fetch_TWI+0xf8>
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	11 f4       	brne	.+4      	; 0x1232 <Fetch_TWI+0xfc>
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	2d c0       	rjmp	.+90     	; 0x128c <Fetch_TWI+0x156>
		
		if(Buffer_Out.Item_Type == BUFFER_TYPE_BYTE) return BUFFER_FAULT;
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	11 f4       	brne	.+4      	; 0x123c <Fetch_TWI+0x106>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	28 c0       	rjmp	.+80     	; 0x128c <Fetch_TWI+0x156>
		
		TWI_Read(Device_Address, Register_Address, Buffer_Out.Item.Ptr, NULL);
    123c:	8e 81       	ldd	r24, Y+6	; 0x06
    123e:	9f 81       	ldd	r25, Y+7	; 0x07
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	ac 01       	movw	r20, r24
    1246:	6c 81       	ldd	r22, Y+4	; 0x04
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	0e 94 ab 02 	call	0x556	; 0x556 <TWI_Read>
		
		return BUFFER_OK;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	1d c0       	rjmp	.+58     	; 0x128c <Fetch_TWI+0x156>

	}
	
	Status_Check = Read_from_Buffer(Buffer, &Buffer_Out);
    1252:	9e 01       	movw	r18, r28
    1254:	2b 5f       	subi	r18, 0xFB	; 251
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	88 85       	ldd	r24, Y+8	; 0x08
    125a:	99 85       	ldd	r25, Y+9	; 0x09
    125c:	b9 01       	movw	r22, r18
    125e:	0e 94 5e 07 	call	0xebc	; 0xebc <Read_from_Buffer>
    1262:	89 83       	std	Y+1, r24	; 0x01
	if(Status_Check == BUFFER_FAULT || Status_Check == BUFFER_EMPTY) return BUFFER_FAULT;
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	88 23       	and	r24, r24
    1268:	19 f0       	breq	.+6      	; 0x1270 <Fetch_TWI+0x13a>
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	11 f4       	brne	.+4      	; 0x1274 <Fetch_TWI+0x13e>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	0c c0       	rjmp	.+24     	; 0x128c <Fetch_TWI+0x156>

	if(Buffer_Out.Item_Type == BUFFER_TYPE_PTR) return BUFFER_FAULT;
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	88 23       	and	r24, r24
    1278:	11 f4       	brne	.+4      	; 0x127e <Fetch_TWI+0x148>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	07 c0       	rjmp	.+14     	; 0x128c <Fetch_TWI+0x156>
	
	TWI_Write(Device_Address, Register_Address, Buffer_Out.Item.Byte);
    127e:	8e 81       	ldd	r24, Y+6	; 0x06
    1280:	48 2f       	mov	r20, r24
    1282:	6c 81       	ldd	r22, Y+4	; 0x04
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	0e 94 8d 02 	call	0x51a	; 0x51a <TWI_Write>
		
	return BUFFER_OK;
    128a:	81 e0       	ldi	r24, 0x01	; 1

}
    128c:	29 96       	adiw	r28, 0x09	; 9
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <__vector_14>:

//------- Timer Definitions:

const uint8_t Max_ISR_Cycles = 150; // Max time the ISR will take to increment System_Ticks.

ISR(TIMER0_COMPA_vect){
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    12a6:	0f 92       	push	r0
    12a8:	11 24       	eor	r1, r1
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	2f 93       	push	r18
    12b4:	3f 93       	push	r19
    12b6:	4f 93       	push	r20
    12b8:	5f 93       	push	r21
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	af 93       	push	r26
    12c0:	bf 93       	push	r27
    12c2:	ef 93       	push	r30
    12c4:	ff 93       	push	r31
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	1f 92       	push	r1
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
		
	if(Remaining_Ticks[_8_bit1] == 0){
    12d0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Remaining_Ticks+0x4>
    12d4:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Remaining_Ticks+0x5>
    12d8:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <Remaining_Ticks+0x6>
    12dc:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <Remaining_Ticks+0x7>
    12e0:	89 2b       	or	r24, r25
    12e2:	8a 2b       	or	r24, r26
    12e4:	8b 2b       	or	r24, r27
    12e6:	19 f5       	brne	.+70     	; 0x132e <__vector_14+0x90>
		
		//PORTD ^= (1 << PORTD6);
				
		if(Calculated_Ticks[_8_bit1] > 0){
    12e8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <Calculated_Ticks+0x4>
    12ec:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <Calculated_Ticks+0x5>
    12f0:	a0 91 79 01 	lds	r26, 0x0179	; 0x800179 <Calculated_Ticks+0x6>
    12f4:	b0 91 7a 01 	lds	r27, 0x017A	; 0x80017a <Calculated_Ticks+0x7>
    12f8:	89 2b       	or	r24, r25
    12fa:	8a 2b       	or	r24, r26
    12fc:	8b 2b       	or	r24, r27
    12fe:	09 f4       	brne	.+2      	; 0x1302 <__vector_14+0x64>
    1300:	51 c0       	rjmp	.+162    	; 0x13a4 <__vector_14+0x106>
			
			Remaining_Ticks[_8_bit1] = Calculated_Ticks[_8_bit1]; // Reset the counter
    1302:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <Calculated_Ticks+0x4>
    1306:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <Calculated_Ticks+0x5>
    130a:	a0 91 79 01 	lds	r26, 0x0179	; 0x800179 <Calculated_Ticks+0x6>
    130e:	b0 91 7a 01 	lds	r27, 0x017A	; 0x80017a <Calculated_Ticks+0x7>
    1312:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <Remaining_Ticks+0x4>
    1316:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <Remaining_Ticks+0x5>
    131a:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <Remaining_Ticks+0x6>
    131e:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <Remaining_Ticks+0x7>
			OCR0A = 0xFF;
    1322:	87 e4       	ldi	r24, 0x47	; 71
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	2f ef       	ldi	r18, 0xFF	; 255
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
		OCR0A = NextOCR;
		Remaining_Ticks[_8_bit1] -= NextOCR;
		
	}
	
}
    132c:	3b c0       	rjmp	.+118    	; 0x13a4 <__vector_14+0x106>
			
		}
		
	}else{

		uint8_t NextOCR = (Remaining_Ticks[_8_bit1] > 0xFF) ? 0xFF : (uint8_t)Remaining_Ticks[_8_bit1];
    132e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Remaining_Ticks+0x4>
    1332:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Remaining_Ticks+0x5>
    1336:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <Remaining_Ticks+0x6>
    133a:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <Remaining_Ticks+0x7>
    133e:	8f 3f       	cpi	r24, 0xFF	; 255
    1340:	91 05       	cpc	r25, r1
    1342:	a1 05       	cpc	r26, r1
    1344:	b1 05       	cpc	r27, r1
    1346:	09 f0       	breq	.+2      	; 0x134a <__vector_14+0xac>
    1348:	48 f4       	brcc	.+18     	; 0x135c <__vector_14+0xbe>
    134a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Remaining_Ticks+0x4>
    134e:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Remaining_Ticks+0x5>
    1352:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <Remaining_Ticks+0x6>
    1356:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <Remaining_Ticks+0x7>
    135a:	01 c0       	rjmp	.+2      	; 0x135e <__vector_14+0xc0>
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	89 83       	std	Y+1, r24	; 0x01

		OCR0A = NextOCR;
    1360:	87 e4       	ldi	r24, 0x47	; 71
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	29 81       	ldd	r18, Y+1	; 0x01
    1366:	fc 01       	movw	r30, r24
    1368:	20 83       	st	Z, r18
		Remaining_Ticks[_8_bit1] -= NextOCR;
    136a:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <Remaining_Ticks+0x4>
    136e:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <Remaining_Ticks+0x5>
    1372:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <Remaining_Ticks+0x6>
    1376:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <Remaining_Ticks+0x7>
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a0 e0       	ldi	r26, 0x00	; 0
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	79 01       	movw	r14, r18
    1386:	8a 01       	movw	r16, r20
    1388:	e8 1a       	sub	r14, r24
    138a:	f9 0a       	sbc	r15, r25
    138c:	0a 0b       	sbc	r16, r26
    138e:	1b 0b       	sbc	r17, r27
    1390:	d8 01       	movw	r26, r16
    1392:	c7 01       	movw	r24, r14
    1394:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <Remaining_Ticks+0x4>
    1398:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <Remaining_Ticks+0x5>
    139c:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <Remaining_Ticks+0x6>
    13a0:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <Remaining_Ticks+0x7>
		
	}
	
}
    13a4:	00 00       	nop
    13a6:	0f 90       	pop	r0
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	5f 91       	pop	r21
    13ba:	4f 91       	pop	r20
    13bc:	3f 91       	pop	r19
    13be:	2f 91       	pop	r18
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	0f 90       	pop	r0
    13ca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <__vector_7>:

ISR(TIMER2_COMPA_vect){
    13d4:	1f 92       	push	r1
    13d6:	0f 92       	push	r0
    13d8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	af 92       	push	r10
    13e2:	bf 92       	push	r11
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	2f 93       	push	r18
    13f2:	3f 93       	push	r19
    13f4:	4f 93       	push	r20
    13f6:	5f 93       	push	r21
    13f8:	6f 93       	push	r22
    13fa:	7f 93       	push	r23
    13fc:	8f 93       	push	r24
    13fe:	9f 93       	push	r25
    1400:	af 93       	push	r26
    1402:	bf 93       	push	r27
    1404:	ef 93       	push	r30
    1406:	ff 93       	push	r31
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	1f 92       	push	r1
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
	
	if(Remaining_Ticks[_8_bit2] == 0){
    1412:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <Remaining_Ticks+0x8>
    1416:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <Remaining_Ticks+0x9>
    141a:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <Remaining_Ticks+0xa>
    141e:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <Remaining_Ticks+0xb>
    1422:	89 2b       	or	r24, r25
    1424:	8a 2b       	or	r24, r26
    1426:	8b 2b       	or	r24, r27
    1428:	09 f0       	breq	.+2      	; 0x142c <__vector_7+0x58>
    142a:	56 c0       	rjmp	.+172    	; 0x14d8 <__vector_7+0x104>
		
		//PORTD ^= (1 << PORTD7);
		
		System_Ticks[_8_bit2]++; 
    142c:	a0 90 6b 01 	lds	r10, 0x016B	; 0x80016b <System_Ticks+0x10>
    1430:	b0 90 6c 01 	lds	r11, 0x016C	; 0x80016c <System_Ticks+0x11>
    1434:	c0 90 6d 01 	lds	r12, 0x016D	; 0x80016d <System_Ticks+0x12>
    1438:	d0 90 6e 01 	lds	r13, 0x016E	; 0x80016e <System_Ticks+0x13>
    143c:	e0 90 6f 01 	lds	r14, 0x016F	; 0x80016f <System_Ticks+0x14>
    1440:	f0 90 70 01 	lds	r15, 0x0170	; 0x800170 <System_Ticks+0x15>
    1444:	00 91 71 01 	lds	r16, 0x0171	; 0x800171 <System_Ticks+0x16>
    1448:	10 91 72 01 	lds	r17, 0x0172	; 0x800172 <System_Ticks+0x17>
    144c:	2a 2d       	mov	r18, r10
    144e:	3b 2d       	mov	r19, r11
    1450:	4c 2d       	mov	r20, r12
    1452:	5d 2d       	mov	r21, r13
    1454:	6e 2d       	mov	r22, r14
    1456:	7f 2d       	mov	r23, r15
    1458:	80 2f       	mov	r24, r16
    145a:	91 2f       	mov	r25, r17
    145c:	a1 e0       	ldi	r26, 0x01	; 1
    145e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__adddi3_s8>
    1462:	a2 2e       	mov	r10, r18
    1464:	b3 2e       	mov	r11, r19
    1466:	c4 2e       	mov	r12, r20
    1468:	d5 2e       	mov	r13, r21
    146a:	e6 2e       	mov	r14, r22
    146c:	f7 2e       	mov	r15, r23
    146e:	08 2f       	mov	r16, r24
    1470:	19 2f       	mov	r17, r25
    1472:	a0 92 6b 01 	sts	0x016B, r10	; 0x80016b <System_Ticks+0x10>
    1476:	b0 92 6c 01 	sts	0x016C, r11	; 0x80016c <System_Ticks+0x11>
    147a:	c0 92 6d 01 	sts	0x016D, r12	; 0x80016d <System_Ticks+0x12>
    147e:	d0 92 6e 01 	sts	0x016E, r13	; 0x80016e <System_Ticks+0x13>
    1482:	e0 92 6f 01 	sts	0x016F, r14	; 0x80016f <System_Ticks+0x14>
    1486:	f0 92 70 01 	sts	0x0170, r15	; 0x800170 <System_Ticks+0x15>
    148a:	00 93 71 01 	sts	0x0171, r16	; 0x800171 <System_Ticks+0x16>
    148e:	10 93 72 01 	sts	0x0172, r17	; 0x800172 <System_Ticks+0x17>

		if(Calculated_Ticks[_8_bit2] > 0){
    1492:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Calculated_Ticks+0x8>
    1496:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <Calculated_Ticks+0x9>
    149a:	a0 91 7d 01 	lds	r26, 0x017D	; 0x80017d <Calculated_Ticks+0xa>
    149e:	b0 91 7e 01 	lds	r27, 0x017E	; 0x80017e <Calculated_Ticks+0xb>
    14a2:	89 2b       	or	r24, r25
    14a4:	8a 2b       	or	r24, r26
    14a6:	8b 2b       	or	r24, r27
    14a8:	09 f4       	brne	.+2      	; 0x14ac <__vector_7+0xd8>
    14aa:	51 c0       	rjmp	.+162    	; 0x154e <__vector_7+0x17a>
			
			Remaining_Ticks[_8_bit2] = Calculated_Ticks[_8_bit2]; 
    14ac:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Calculated_Ticks+0x8>
    14b0:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <Calculated_Ticks+0x9>
    14b4:	a0 91 7d 01 	lds	r26, 0x017D	; 0x80017d <Calculated_Ticks+0xa>
    14b8:	b0 91 7e 01 	lds	r27, 0x017E	; 0x80017e <Calculated_Ticks+0xb>
    14bc:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <Remaining_Ticks+0x8>
    14c0:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <Remaining_Ticks+0x9>
    14c4:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <Remaining_Ticks+0xa>
    14c8:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <Remaining_Ticks+0xb>
			OCR2A = 0xFF;
    14cc:	83 eb       	ldi	r24, 0xB3	; 179
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	2f ef       	ldi	r18, 0xFF	; 255
    14d2:	fc 01       	movw	r30, r24
    14d4:	20 83       	st	Z, r18
		OCR2A = NextOCR;
		Remaining_Ticks[_8_bit2] -= NextOCR;
		
	}

}
    14d6:	3b c0       	rjmp	.+118    	; 0x154e <__vector_7+0x17a>
			
		}
		
	}else{

		uint8_t NextOCR = (Remaining_Ticks[_8_bit2] > 0xFF) ? 0xFF : (uint8_t)Remaining_Ticks[_8_bit2];
    14d8:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <Remaining_Ticks+0x8>
    14dc:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <Remaining_Ticks+0x9>
    14e0:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <Remaining_Ticks+0xa>
    14e4:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <Remaining_Ticks+0xb>
    14e8:	8f 3f       	cpi	r24, 0xFF	; 255
    14ea:	91 05       	cpc	r25, r1
    14ec:	a1 05       	cpc	r26, r1
    14ee:	b1 05       	cpc	r27, r1
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <__vector_7+0x120>
    14f2:	48 f4       	brcc	.+18     	; 0x1506 <__vector_7+0x132>
    14f4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <Remaining_Ticks+0x8>
    14f8:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <Remaining_Ticks+0x9>
    14fc:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <Remaining_Ticks+0xa>
    1500:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <Remaining_Ticks+0xb>
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <__vector_7+0x134>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	89 83       	std	Y+1, r24	; 0x01

		OCR2A = NextOCR;
    150a:	83 eb       	ldi	r24, 0xB3	; 179
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	29 81       	ldd	r18, Y+1	; 0x01
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
		Remaining_Ticks[_8_bit2] -= NextOCR;
    1514:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <Remaining_Ticks+0x8>
    1518:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <Remaining_Ticks+0x9>
    151c:	40 91 89 01 	lds	r20, 0x0189	; 0x800189 <Remaining_Ticks+0xa>
    1520:	50 91 8a 01 	lds	r21, 0x018A	; 0x80018a <Remaining_Ticks+0xb>
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e0       	ldi	r26, 0x00	; 0
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	79 01       	movw	r14, r18
    1530:	8a 01       	movw	r16, r20
    1532:	e8 1a       	sub	r14, r24
    1534:	f9 0a       	sbc	r15, r25
    1536:	0a 0b       	sbc	r16, r26
    1538:	1b 0b       	sbc	r17, r27
    153a:	d8 01       	movw	r26, r16
    153c:	c7 01       	movw	r24, r14
    153e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <Remaining_Ticks+0x8>
    1542:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <Remaining_Ticks+0x9>
    1546:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <Remaining_Ticks+0xa>
    154a:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <Remaining_Ticks+0xb>
		
	}

}
    154e:	00 00       	nop
    1550:	0f 90       	pop	r0
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	ff 91       	pop	r31
    1558:	ef 91       	pop	r30
    155a:	bf 91       	pop	r27
    155c:	af 91       	pop	r26
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	7f 91       	pop	r23
    1564:	6f 91       	pop	r22
    1566:	5f 91       	pop	r21
    1568:	4f 91       	pop	r20
    156a:	3f 91       	pop	r19
    156c:	2f 91       	pop	r18
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	bf 90       	pop	r11
    157c:	af 90       	pop	r10
    157e:	0f 90       	pop	r0
    1580:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <__vector_11>:


ISR(TIMER1_COMPA_vect){
    158a:	1f 92       	push	r1
    158c:	0f 92       	push	r0
    158e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1592:	0f 92       	push	r0
    1594:	11 24       	eor	r1, r1
    1596:	af 92       	push	r10
    1598:	bf 92       	push	r11
    159a:	cf 92       	push	r12
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	2f 93       	push	r18
    15a8:	3f 93       	push	r19
    15aa:	4f 93       	push	r20
    15ac:	5f 93       	push	r21
    15ae:	6f 93       	push	r22
    15b0:	7f 93       	push	r23
    15b2:	8f 93       	push	r24
    15b4:	9f 93       	push	r25
    15b6:	af 93       	push	r26
    15b8:	bf 93       	push	r27
    15ba:	ef 93       	push	r30
    15bc:	ff 93       	push	r31
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <__vector_11+0x3a>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	
	if(Remaining_Ticks[_16_bit] == 0){
    15c8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <Remaining_Ticks>
    15cc:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <Remaining_Ticks+0x1>
    15d0:	a0 91 81 01 	lds	r26, 0x0181	; 0x800181 <Remaining_Ticks+0x2>
    15d4:	b0 91 82 01 	lds	r27, 0x0182	; 0x800182 <Remaining_Ticks+0x3>
    15d8:	89 2b       	or	r24, r25
    15da:	8a 2b       	or	r24, r26
    15dc:	8b 2b       	or	r24, r27
    15de:	09 f0       	breq	.+2      	; 0x15e2 <__vector_11+0x58>
    15e0:	5b c0       	rjmp	.+182    	; 0x1698 <__vector_11+0x10e>
		
		//PORTB ^= (1 << PORTB0);
		
		System_Ticks[_16_bit]++;
    15e2:	a0 90 5b 01 	lds	r10, 0x015B	; 0x80015b <System_Ticks>
    15e6:	b0 90 5c 01 	lds	r11, 0x015C	; 0x80015c <System_Ticks+0x1>
    15ea:	c0 90 5d 01 	lds	r12, 0x015D	; 0x80015d <System_Ticks+0x2>
    15ee:	d0 90 5e 01 	lds	r13, 0x015E	; 0x80015e <System_Ticks+0x3>
    15f2:	e0 90 5f 01 	lds	r14, 0x015F	; 0x80015f <System_Ticks+0x4>
    15f6:	f0 90 60 01 	lds	r15, 0x0160	; 0x800160 <System_Ticks+0x5>
    15fa:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <System_Ticks+0x6>
    15fe:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <System_Ticks+0x7>
    1602:	2a 2d       	mov	r18, r10
    1604:	3b 2d       	mov	r19, r11
    1606:	4c 2d       	mov	r20, r12
    1608:	5d 2d       	mov	r21, r13
    160a:	6e 2d       	mov	r22, r14
    160c:	7f 2d       	mov	r23, r15
    160e:	80 2f       	mov	r24, r16
    1610:	91 2f       	mov	r25, r17
    1612:	a1 e0       	ldi	r26, 0x01	; 1
    1614:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__adddi3_s8>
    1618:	a2 2e       	mov	r10, r18
    161a:	b3 2e       	mov	r11, r19
    161c:	c4 2e       	mov	r12, r20
    161e:	d5 2e       	mov	r13, r21
    1620:	e6 2e       	mov	r14, r22
    1622:	f7 2e       	mov	r15, r23
    1624:	08 2f       	mov	r16, r24
    1626:	19 2f       	mov	r17, r25
    1628:	a0 92 5b 01 	sts	0x015B, r10	; 0x80015b <System_Ticks>
    162c:	b0 92 5c 01 	sts	0x015C, r11	; 0x80015c <System_Ticks+0x1>
    1630:	c0 92 5d 01 	sts	0x015D, r12	; 0x80015d <System_Ticks+0x2>
    1634:	d0 92 5e 01 	sts	0x015E, r13	; 0x80015e <System_Ticks+0x3>
    1638:	e0 92 5f 01 	sts	0x015F, r14	; 0x80015f <System_Ticks+0x4>
    163c:	f0 92 60 01 	sts	0x0160, r15	; 0x800160 <System_Ticks+0x5>
    1640:	00 93 61 01 	sts	0x0161, r16	; 0x800161 <System_Ticks+0x6>
    1644:	10 93 62 01 	sts	0x0162, r17	; 0x800162 <System_Ticks+0x7>
		
		if(Calculated_Ticks[_16_bit] > 0){
    1648:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Calculated_Ticks>
    164c:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <Calculated_Ticks+0x1>
    1650:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <Calculated_Ticks+0x2>
    1654:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <Calculated_Ticks+0x3>
    1658:	89 2b       	or	r24, r25
    165a:	8a 2b       	or	r24, r26
    165c:	8b 2b       	or	r24, r27
    165e:	09 f4       	brne	.+2      	; 0x1662 <__vector_11+0xd8>
    1660:	58 c0       	rjmp	.+176    	; 0x1712 <__vector_11+0x188>
			
			Remaining_Ticks[_16_bit] = Calculated_Ticks[_16_bit];
    1662:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Calculated_Ticks>
    1666:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <Calculated_Ticks+0x1>
    166a:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <Calculated_Ticks+0x2>
    166e:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <Calculated_Ticks+0x3>
    1672:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <Remaining_Ticks>
    1676:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <Remaining_Ticks+0x1>
    167a:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <Remaining_Ticks+0x2>
    167e:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <Remaining_Ticks+0x3>
			OCR1AH = 0xFF;
    1682:	89 e8       	ldi	r24, 0x89	; 137
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	2f ef       	ldi	r18, 0xFF	; 255
    1688:	fc 01       	movw	r30, r24
    168a:	20 83       	st	Z, r18
			OCR1AL = 0xFF;
    168c:	88 e8       	ldi	r24, 0x88	; 136
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	2f ef       	ldi	r18, 0xFF	; 255
    1692:	fc 01       	movw	r30, r24
    1694:	20 83       	st	Z, r18
		OCR1A = NextOCR;
		Remaining_Ticks[_16_bit] -= NextOCR;
		
	}
	
}
    1696:	3d c0       	rjmp	.+122    	; 0x1712 <__vector_11+0x188>
			
		}
		
	}else{
		
		uint16_t NextOCR = (Remaining_Ticks[_16_bit] > 0xFFFF) ? 0xFFFF : (uint16_t)Remaining_Ticks[_16_bit];
    1698:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <Remaining_Ticks>
    169c:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <Remaining_Ticks+0x1>
    16a0:	a0 91 81 01 	lds	r26, 0x0181	; 0x800181 <Remaining_Ticks+0x2>
    16a4:	b0 91 82 01 	lds	r27, 0x0182	; 0x800182 <Remaining_Ticks+0x3>
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	a1 40       	sbci	r26, 0x01	; 1
    16ac:	b1 05       	cpc	r27, r1
    16ae:	48 f4       	brcc	.+18     	; 0x16c2 <__vector_11+0x138>
    16b0:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <Remaining_Ticks>
    16b4:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <Remaining_Ticks+0x1>
    16b8:	a0 91 81 01 	lds	r26, 0x0181	; 0x800181 <Remaining_Ticks+0x2>
    16bc:	b0 91 82 01 	lds	r27, 0x0182	; 0x800182 <Remaining_Ticks+0x3>
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <__vector_11+0x13c>
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	9f ef       	ldi	r25, 0xFF	; 255
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
		
		OCR1A = NextOCR;
    16ca:	88 e8       	ldi	r24, 0x88	; 136
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	29 81       	ldd	r18, Y+1	; 0x01
    16d0:	3a 81       	ldd	r19, Y+2	; 0x02
    16d2:	fc 01       	movw	r30, r24
    16d4:	31 83       	std	Z+1, r19	; 0x01
    16d6:	20 83       	st	Z, r18
		Remaining_Ticks[_16_bit] -= NextOCR;
    16d8:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <Remaining_Ticks>
    16dc:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <Remaining_Ticks+0x1>
    16e0:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <Remaining_Ticks+0x2>
    16e4:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <Remaining_Ticks+0x3>
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	cc 01       	movw	r24, r24
    16ee:	a0 e0       	ldi	r26, 0x00	; 0
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	79 01       	movw	r14, r18
    16f4:	8a 01       	movw	r16, r20
    16f6:	e8 1a       	sub	r14, r24
    16f8:	f9 0a       	sbc	r15, r25
    16fa:	0a 0b       	sbc	r16, r26
    16fc:	1b 0b       	sbc	r17, r27
    16fe:	d8 01       	movw	r26, r16
    1700:	c7 01       	movw	r24, r14
    1702:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <Remaining_Ticks>
    1706:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <Remaining_Ticks+0x1>
    170a:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <Remaining_Ticks+0x2>
    170e:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <Remaining_Ticks+0x3>
		
	}
	
}
    1712:	00 00       	nop
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	ff 91       	pop	r31
    171e:	ef 91       	pop	r30
    1720:	bf 91       	pop	r27
    1722:	af 91       	pop	r26
    1724:	9f 91       	pop	r25
    1726:	8f 91       	pop	r24
    1728:	7f 91       	pop	r23
    172a:	6f 91       	pop	r22
    172c:	5f 91       	pop	r21
    172e:	4f 91       	pop	r20
    1730:	3f 91       	pop	r19
    1732:	2f 91       	pop	r18
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	bf 90       	pop	r11
    1742:	af 90       	pop	r10
    1744:	0f 90       	pop	r0
    1746:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    174a:	0f 90       	pop	r0
    174c:	1f 90       	pop	r1
    174e:	18 95       	reti

00001750 <Set_Prescaler>:

static Timer_Status Set_Prescaler(Timers Timer, uint16_t Prescaler){
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	00 d0       	rcall	.+0      	; 0x1756 <Set_Prescaler+0x6>
    1756:	1f 92       	push	r1
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	7b 83       	std	Y+3, r23	; 0x03
    1760:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Timer){
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	91 05       	cpc	r25, r1
    176c:	09 f4       	brne	.+2      	; 0x1770 <Set_Prescaler+0x20>
    176e:	5b c0       	rjmp	.+182    	; 0x1826 <Set_Prescaler+0xd6>
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	91 05       	cpc	r25, r1
    1774:	09 f4       	brne	.+2      	; 0x1778 <Set_Prescaler+0x28>
    1776:	ab c0       	rjmp	.+342    	; 0x18ce <Set_Prescaler+0x17e>
    1778:	89 2b       	or	r24, r25
    177a:	09 f0       	breq	.+2      	; 0x177e <Set_Prescaler+0x2e>
    177c:	fc c0       	rjmp	.+504    	; 0x1976 <Set_Prescaler+0x226>
		
		case _16_bit:
		
			TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // Clear previous prescaler bits
    177e:	81 e8       	ldi	r24, 0x81	; 129
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	21 e8       	ldi	r18, 0x81	; 129
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	f9 01       	movw	r30, r18
    1788:	20 81       	ld	r18, Z
    178a:	28 7f       	andi	r18, 0xF8	; 248
    178c:	fc 01       	movw	r30, r24
    178e:	20 83       	st	Z, r18
				
			switch(Prescaler){ // Don't need to clear TCCRxB, as it will be assigned:
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	9b 81       	ldd	r25, Y+3	; 0x03
    1794:	80 34       	cpi	r24, 0x40	; 64
    1796:	91 05       	cpc	r25, r1
    1798:	29 f1       	breq	.+74     	; 0x17e4 <Set_Prescaler+0x94>
    179a:	81 34       	cpi	r24, 0x41	; 65
    179c:	91 05       	cpc	r25, r1
    179e:	30 f4       	brcc	.+12     	; 0x17ac <Set_Prescaler+0x5c>
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	91 05       	cpc	r25, r1
    17a4:	59 f0       	breq	.+22     	; 0x17bc <Set_Prescaler+0x6c>
    17a6:	08 97       	sbiw	r24, 0x08	; 8
    17a8:	99 f0       	breq	.+38     	; 0x17d0 <Set_Prescaler+0x80>
    17aa:	3a c0       	rjmp	.+116    	; 0x1820 <Set_Prescaler+0xd0>
    17ac:	81 15       	cp	r24, r1
    17ae:	f1 e0       	ldi	r31, 0x01	; 1
    17b0:	9f 07       	cpc	r25, r31
    17b2:	11 f1       	breq	.+68     	; 0x17f8 <Set_Prescaler+0xa8>
    17b4:	81 15       	cp	r24, r1
    17b6:	94 40       	sbci	r25, 0x04	; 4
    17b8:	49 f1       	breq	.+82     	; 0x180c <Set_Prescaler+0xbc>
    17ba:	32 c0       	rjmp	.+100    	; 0x1820 <Set_Prescaler+0xd0>
				
				case 1:
				
					TCCR1B |= (1 << CS10);
    17bc:	81 e8       	ldi	r24, 0x81	; 129
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	21 e8       	ldi	r18, 0x81	; 129
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	f9 01       	movw	r30, r18
    17c6:	20 81       	ld	r18, Z
    17c8:	21 60       	ori	r18, 0x01	; 1
    17ca:	fc 01       	movw	r30, r24
    17cc:	20 83       	st	Z, r18
					break;
    17ce:	2a c0       	rjmp	.+84     	; 0x1824 <Set_Prescaler+0xd4>
				
				case 8:
					
					TCCR1B |= (1 << CS11);
    17d0:	81 e8       	ldi	r24, 0x81	; 129
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	21 e8       	ldi	r18, 0x81	; 129
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	f9 01       	movw	r30, r18
    17da:	20 81       	ld	r18, Z
    17dc:	22 60       	ori	r18, 0x02	; 2
    17de:	fc 01       	movw	r30, r24
    17e0:	20 83       	st	Z, r18
					break;
    17e2:	20 c0       	rjmp	.+64     	; 0x1824 <Set_Prescaler+0xd4>
				
				case 64:
				
					TCCR1B |= (1 << CS11) | (1 << CS10);
    17e4:	81 e8       	ldi	r24, 0x81	; 129
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	21 e8       	ldi	r18, 0x81	; 129
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	f9 01       	movw	r30, r18
    17ee:	20 81       	ld	r18, Z
    17f0:	23 60       	ori	r18, 0x03	; 3
    17f2:	fc 01       	movw	r30, r24
    17f4:	20 83       	st	Z, r18
					break;
    17f6:	16 c0       	rjmp	.+44     	; 0x1824 <Set_Prescaler+0xd4>
					
				case 256:
				
					TCCR1B |= (1 << CS12);
    17f8:	81 e8       	ldi	r24, 0x81	; 129
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	21 e8       	ldi	r18, 0x81	; 129
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	f9 01       	movw	r30, r18
    1802:	20 81       	ld	r18, Z
    1804:	24 60       	ori	r18, 0x04	; 4
    1806:	fc 01       	movw	r30, r24
    1808:	20 83       	st	Z, r18
					break;
    180a:	0c c0       	rjmp	.+24     	; 0x1824 <Set_Prescaler+0xd4>
				
				case 1024:
				
					TCCR1B |= (1 << CS12) | (1 << CS10);
    180c:	81 e8       	ldi	r24, 0x81	; 129
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	21 e8       	ldi	r18, 0x81	; 129
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	f9 01       	movw	r30, r18
    1816:	20 81       	ld	r18, Z
    1818:	25 60       	ori	r18, 0x05	; 5
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
					break;
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <Set_Prescaler+0xd4>
				
				default:
				
					return TIMER_FAULT;
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	ac c0       	rjmp	.+344    	; 0x197c <Set_Prescaler+0x22c>
				
			}
			
			break;
    1824:	aa c0       	rjmp	.+340    	; 0x197a <Set_Prescaler+0x22a>
		
		case _8_bit1:
		
			TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
    1826:	85 e4       	ldi	r24, 0x45	; 69
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	25 e4       	ldi	r18, 0x45	; 69
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	f9 01       	movw	r30, r18
    1830:	20 81       	ld	r18, Z
    1832:	28 7f       	andi	r18, 0xF8	; 248
    1834:	fc 01       	movw	r30, r24
    1836:	20 83       	st	Z, r18
		
			switch(Prescaler){
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	9b 81       	ldd	r25, Y+3	; 0x03
    183c:	80 34       	cpi	r24, 0x40	; 64
    183e:	91 05       	cpc	r25, r1
    1840:	29 f1       	breq	.+74     	; 0x188c <Set_Prescaler+0x13c>
    1842:	81 34       	cpi	r24, 0x41	; 65
    1844:	91 05       	cpc	r25, r1
    1846:	30 f4       	brcc	.+12     	; 0x1854 <Set_Prescaler+0x104>
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	59 f0       	breq	.+22     	; 0x1864 <Set_Prescaler+0x114>
    184e:	08 97       	sbiw	r24, 0x08	; 8
    1850:	99 f0       	breq	.+38     	; 0x1878 <Set_Prescaler+0x128>
    1852:	3a c0       	rjmp	.+116    	; 0x18c8 <Set_Prescaler+0x178>
    1854:	81 15       	cp	r24, r1
    1856:	f1 e0       	ldi	r31, 0x01	; 1
    1858:	9f 07       	cpc	r25, r31
    185a:	11 f1       	breq	.+68     	; 0x18a0 <Set_Prescaler+0x150>
    185c:	81 15       	cp	r24, r1
    185e:	94 40       	sbci	r25, 0x04	; 4
    1860:	49 f1       	breq	.+82     	; 0x18b4 <Set_Prescaler+0x164>
    1862:	32 c0       	rjmp	.+100    	; 0x18c8 <Set_Prescaler+0x178>
				
				case 1:
				
					TCCR0B |= (1 << CS00);
    1864:	85 e4       	ldi	r24, 0x45	; 69
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	25 e4       	ldi	r18, 0x45	; 69
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	f9 01       	movw	r30, r18
    186e:	20 81       	ld	r18, Z
    1870:	21 60       	ori	r18, 0x01	; 1
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18
					break;
    1876:	2a c0       	rjmp	.+84     	; 0x18cc <Set_Prescaler+0x17c>
				
				case 8:
				
					TCCR0B |= (1 << CS01);
    1878:	85 e4       	ldi	r24, 0x45	; 69
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	25 e4       	ldi	r18, 0x45	; 69
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	f9 01       	movw	r30, r18
    1882:	20 81       	ld	r18, Z
    1884:	22 60       	ori	r18, 0x02	; 2
    1886:	fc 01       	movw	r30, r24
    1888:	20 83       	st	Z, r18
					break;
    188a:	20 c0       	rjmp	.+64     	; 0x18cc <Set_Prescaler+0x17c>
				
				case 64:
				
					TCCR0B |= (1 << CS01) | (1 << CS00);
    188c:	85 e4       	ldi	r24, 0x45	; 69
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	25 e4       	ldi	r18, 0x45	; 69
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	f9 01       	movw	r30, r18
    1896:	20 81       	ld	r18, Z
    1898:	23 60       	ori	r18, 0x03	; 3
    189a:	fc 01       	movw	r30, r24
    189c:	20 83       	st	Z, r18
					break;
    189e:	16 c0       	rjmp	.+44     	; 0x18cc <Set_Prescaler+0x17c>
				
				case 256:
				
					TCCR0B |= (1 << CS02);
    18a0:	85 e4       	ldi	r24, 0x45	; 69
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	25 e4       	ldi	r18, 0x45	; 69
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	f9 01       	movw	r30, r18
    18aa:	20 81       	ld	r18, Z
    18ac:	24 60       	ori	r18, 0x04	; 4
    18ae:	fc 01       	movw	r30, r24
    18b0:	20 83       	st	Z, r18
					break;
    18b2:	0c c0       	rjmp	.+24     	; 0x18cc <Set_Prescaler+0x17c>
				
				case 1024:
				
					TCCR0B |= (1 << CS02) | (1 << CS00);
    18b4:	85 e4       	ldi	r24, 0x45	; 69
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	25 e4       	ldi	r18, 0x45	; 69
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	f9 01       	movw	r30, r18
    18be:	20 81       	ld	r18, Z
    18c0:	25 60       	ori	r18, 0x05	; 5
    18c2:	fc 01       	movw	r30, r24
    18c4:	20 83       	st	Z, r18
					break;
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <Set_Prescaler+0x17c>
				
				default:
				
					return TIMER_FAULT;
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	58 c0       	rjmp	.+176    	; 0x197c <Set_Prescaler+0x22c>
				
			}
			
			break;
    18cc:	56 c0       	rjmp	.+172    	; 0x197a <Set_Prescaler+0x22a>
		
		case _8_bit2:
		
			TCCR2B &= ~((1 << CS22) | (1 << CS21) | (1 << CS20));
    18ce:	81 eb       	ldi	r24, 0xB1	; 177
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	21 eb       	ldi	r18, 0xB1	; 177
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	f9 01       	movw	r30, r18
    18d8:	20 81       	ld	r18, Z
    18da:	28 7f       	andi	r18, 0xF8	; 248
    18dc:	fc 01       	movw	r30, r24
    18de:	20 83       	st	Z, r18
		
			switch(Prescaler){
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	9b 81       	ldd	r25, Y+3	; 0x03
    18e4:	80 34       	cpi	r24, 0x40	; 64
    18e6:	91 05       	cpc	r25, r1
    18e8:	29 f1       	breq	.+74     	; 0x1934 <Set_Prescaler+0x1e4>
    18ea:	81 34       	cpi	r24, 0x41	; 65
    18ec:	91 05       	cpc	r25, r1
    18ee:	30 f4       	brcc	.+12     	; 0x18fc <Set_Prescaler+0x1ac>
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	59 f0       	breq	.+22     	; 0x190c <Set_Prescaler+0x1bc>
    18f6:	08 97       	sbiw	r24, 0x08	; 8
    18f8:	99 f0       	breq	.+38     	; 0x1920 <Set_Prescaler+0x1d0>
    18fa:	3a c0       	rjmp	.+116    	; 0x1970 <Set_Prescaler+0x220>
    18fc:	81 15       	cp	r24, r1
    18fe:	f1 e0       	ldi	r31, 0x01	; 1
    1900:	9f 07       	cpc	r25, r31
    1902:	11 f1       	breq	.+68     	; 0x1948 <Set_Prescaler+0x1f8>
    1904:	81 15       	cp	r24, r1
    1906:	94 40       	sbci	r25, 0x04	; 4
    1908:	49 f1       	breq	.+82     	; 0x195c <Set_Prescaler+0x20c>
    190a:	32 c0       	rjmp	.+100    	; 0x1970 <Set_Prescaler+0x220>
				
				case 1:
				
					TCCR2B |= (1 << CS20);
    190c:	81 eb       	ldi	r24, 0xB1	; 177
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	21 eb       	ldi	r18, 0xB1	; 177
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	f9 01       	movw	r30, r18
    1916:	20 81       	ld	r18, Z
    1918:	21 60       	ori	r18, 0x01	; 1
    191a:	fc 01       	movw	r30, r24
    191c:	20 83       	st	Z, r18
					break;
    191e:	2a c0       	rjmp	.+84     	; 0x1974 <Set_Prescaler+0x224>
				
				case 8:
				
					TCCR2B |= (1 << CS21);
    1920:	81 eb       	ldi	r24, 0xB1	; 177
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	21 eb       	ldi	r18, 0xB1	; 177
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	f9 01       	movw	r30, r18
    192a:	20 81       	ld	r18, Z
    192c:	22 60       	ori	r18, 0x02	; 2
    192e:	fc 01       	movw	r30, r24
    1930:	20 83       	st	Z, r18
					break;
    1932:	20 c0       	rjmp	.+64     	; 0x1974 <Set_Prescaler+0x224>
				
				case 64:
				
					TCCR2B |= (1 << CS22);
    1934:	81 eb       	ldi	r24, 0xB1	; 177
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	21 eb       	ldi	r18, 0xB1	; 177
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	f9 01       	movw	r30, r18
    193e:	20 81       	ld	r18, Z
    1940:	24 60       	ori	r18, 0x04	; 4
    1942:	fc 01       	movw	r30, r24
    1944:	20 83       	st	Z, r18
					break;
    1946:	16 c0       	rjmp	.+44     	; 0x1974 <Set_Prescaler+0x224>
				
				case 256:
				
					TCCR2B |= (1 << CS22) |  (1<<CS21);
    1948:	81 eb       	ldi	r24, 0xB1	; 177
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	21 eb       	ldi	r18, 0xB1	; 177
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	f9 01       	movw	r30, r18
    1952:	20 81       	ld	r18, Z
    1954:	26 60       	ori	r18, 0x06	; 6
    1956:	fc 01       	movw	r30, r24
    1958:	20 83       	st	Z, r18
					break;
    195a:	0c c0       	rjmp	.+24     	; 0x1974 <Set_Prescaler+0x224>
				
				case 1024:
				
					TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
    195c:	81 eb       	ldi	r24, 0xB1	; 177
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	21 eb       	ldi	r18, 0xB1	; 177
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	f9 01       	movw	r30, r18
    1966:	20 81       	ld	r18, Z
    1968:	27 60       	ori	r18, 0x07	; 7
    196a:	fc 01       	movw	r30, r24
    196c:	20 83       	st	Z, r18
					break;
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <Set_Prescaler+0x224>
				
				default:
								
					return TIMER_FAULT;
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	04 c0       	rjmp	.+8      	; 0x197c <Set_Prescaler+0x22c>
				
			}
			
			break;
    1974:	02 c0       	rjmp	.+4      	; 0x197a <Set_Prescaler+0x22a>
		
		default:
		
			return TIMER_FAULT;
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	01 c0       	rjmp	.+2      	; 0x197c <Set_Prescaler+0x22c>
	}
	
	return TIMER_OK;
    197a:	81 e0       	ldi	r24, 0x01	; 1
	
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	08 95       	ret

00001988 <Configure_Timer>:


Timer_Status Configure_Timer(uint16_t Step, Timer_Units Unit, Timers Selected_Timer){ // All relevent types were optimized by calculating the largest possible values to Configure_Timer_Step()
    1988:	2f 92       	push	r2
    198a:	3f 92       	push	r3
    198c:	4f 92       	push	r4
    198e:	5f 92       	push	r5
    1990:	6f 92       	push	r6
    1992:	7f 92       	push	r7
    1994:	8f 92       	push	r8
    1996:	9f 92       	push	r9
    1998:	af 92       	push	r10
    199a:	bf 92       	push	r11
    199c:	cf 92       	push	r12
    199e:	df 92       	push	r13
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	e1 97       	sbiw	r28, 0x31	; 49
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	9c a7       	std	Y+44, r25	; 0x2c
    19be:	8b a7       	std	Y+43, r24	; 0x2b
    19c0:	4d a7       	std	Y+45, r20	; 0x2d
    19c2:	5e a7       	std	Y+46, r21	; 0x2e
    19c4:	6f a7       	std	Y+47, r22	; 0x2f
    19c6:	78 ab       	std	Y+48, r23	; 0x30
    19c8:	29 ab       	std	Y+49, r18	; 0x31
	
	if(TC_CLK == 0){ 
    19ca:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <TC_CLK>
    19ce:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <TC_CLK+0x1>
    19d2:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <TC_CLK+0x2>
    19d6:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <TC_CLK+0x3>
    19da:	89 2b       	or	r24, r25
    19dc:	8a 2b       	or	r24, r26
    19de:	8b 2b       	or	r24, r27
    19e0:	11 f4       	brne	.+4      	; 0x19e6 <Configure_Timer+0x5e>
		return TIMER_FAULT;
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	cf c3       	rjmp	.+1950   	; 0x2184 <Configure_Timer+0x7fc>
	}
	
	if(Unit == 0){
    19e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    19e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    19ea:	af a5       	ldd	r26, Y+47	; 0x2f
    19ec:	b8 a9       	ldd	r27, Y+48	; 0x30
    19ee:	89 2b       	or	r24, r25
    19f0:	8a 2b       	or	r24, r26
    19f2:	8b 2b       	or	r24, r27
    19f4:	11 f4       	brne	.+4      	; 0x19fa <Configure_Timer+0x72>
		return TIMER_FAULT;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	c5 c3       	rjmp	.+1930   	; 0x2184 <Configure_Timer+0x7fc>
	}
	
	if((uint64_t)TC_CLK * Step/Unit <= Max_ISR_Cycles){ // If the requested tick is shorter than or equal to the max time it takes to increment System_Ticks, return error state
    19fa:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <TC_CLK>
    19fe:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <TC_CLK+0x1>
    1a02:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <TC_CLK+0x2>
    1a06:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <TC_CLK+0x3>
    1a0a:	1c 01       	movw	r2, r24
    1a0c:	2d 01       	movw	r4, r26
    1a0e:	61 2c       	mov	r6, r1
    1a10:	71 2c       	mov	r7, r1
    1a12:	43 01       	movw	r8, r6
    1a14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a18:	9c 01       	movw	r18, r24
    1a1a:	40 e0       	ldi	r20, 0x00	; 0
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	cb 01       	movw	r24, r22
    1a24:	a2 2e       	mov	r10, r18
    1a26:	b3 2e       	mov	r11, r19
    1a28:	c4 2e       	mov	r12, r20
    1a2a:	d5 2e       	mov	r13, r21
    1a2c:	e6 2e       	mov	r14, r22
    1a2e:	f7 2e       	mov	r15, r23
    1a30:	08 2f       	mov	r16, r24
    1a32:	19 2f       	mov	r17, r25
    1a34:	22 2d       	mov	r18, r2
    1a36:	33 2d       	mov	r19, r3
    1a38:	44 2d       	mov	r20, r4
    1a3a:	55 2d       	mov	r21, r5
    1a3c:	66 2d       	mov	r22, r6
    1a3e:	77 2d       	mov	r23, r7
    1a40:	88 2d       	mov	r24, r8
    1a42:	99 2d       	mov	r25, r9
    1a44:	0e 94 8b 13 	call	0x2716	; 0x2716 <__muldi3>
    1a48:	a2 2e       	mov	r10, r18
    1a4a:	b3 2e       	mov	r11, r19
    1a4c:	c4 2e       	mov	r12, r20
    1a4e:	d5 2e       	mov	r13, r21
    1a50:	e6 2e       	mov	r14, r22
    1a52:	f7 2e       	mov	r15, r23
    1a54:	08 2f       	mov	r16, r24
    1a56:	19 2f       	mov	r17, r25
    1a58:	2a 2c       	mov	r2, r10
    1a5a:	3b 2c       	mov	r3, r11
    1a5c:	4c 2c       	mov	r4, r12
    1a5e:	5d 2c       	mov	r5, r13
    1a60:	6e 2c       	mov	r6, r14
    1a62:	7f 2c       	mov	r7, r15
    1a64:	80 2e       	mov	r8, r16
    1a66:	91 2e       	mov	r9, r17
    1a68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a6c:	af a5       	ldd	r26, Y+47	; 0x2f
    1a6e:	b8 a9       	ldd	r27, Y+48	; 0x30
    1a70:	9c 01       	movw	r18, r24
    1a72:	ad 01       	movw	r20, r26
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	cb 01       	movw	r24, r22
    1a7a:	a2 2e       	mov	r10, r18
    1a7c:	b3 2e       	mov	r11, r19
    1a7e:	c4 2e       	mov	r12, r20
    1a80:	d5 2e       	mov	r13, r21
    1a82:	e6 2e       	mov	r14, r22
    1a84:	f7 2e       	mov	r15, r23
    1a86:	08 2f       	mov	r16, r24
    1a88:	19 2f       	mov	r17, r25
    1a8a:	22 2d       	mov	r18, r2
    1a8c:	33 2d       	mov	r19, r3
    1a8e:	44 2d       	mov	r20, r4
    1a90:	55 2d       	mov	r21, r5
    1a92:	66 2d       	mov	r22, r6
    1a94:	77 2d       	mov	r23, r7
    1a96:	88 2d       	mov	r24, r8
    1a98:	99 2d       	mov	r25, r9
    1a9a:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__udivdi3>
    1a9e:	22 2e       	mov	r2, r18
    1aa0:	33 2e       	mov	r3, r19
    1aa2:	44 2e       	mov	r4, r20
    1aa4:	55 2e       	mov	r5, r21
    1aa6:	66 2e       	mov	r6, r22
    1aa8:	77 2e       	mov	r7, r23
    1aaa:	88 2e       	mov	r8, r24
    1aac:	99 2e       	mov	r9, r25
    1aae:	a2 2c       	mov	r10, r2
    1ab0:	b3 2c       	mov	r11, r3
    1ab2:	c4 2c       	mov	r12, r4
    1ab4:	d5 2c       	mov	r13, r5
    1ab6:	e6 2c       	mov	r14, r6
    1ab8:	f7 2c       	mov	r15, r7
    1aba:	08 2d       	mov	r16, r8
    1abc:	19 2d       	mov	r17, r9
    1abe:	86 e9       	ldi	r24, 0x96	; 150
    1ac0:	28 2e       	mov	r2, r24
    1ac2:	31 2c       	mov	r3, r1
    1ac4:	41 2c       	mov	r4, r1
    1ac6:	51 2c       	mov	r5, r1
    1ac8:	61 2c       	mov	r6, r1
    1aca:	71 2c       	mov	r7, r1
    1acc:	43 01       	movw	r8, r6
    1ace:	2a 2d       	mov	r18, r10
    1ad0:	3b 2d       	mov	r19, r11
    1ad2:	4c 2d       	mov	r20, r12
    1ad4:	5d 2d       	mov	r21, r13
    1ad6:	6e 2d       	mov	r22, r14
    1ad8:	7f 2d       	mov	r23, r15
    1ada:	80 2f       	mov	r24, r16
    1adc:	91 2f       	mov	r25, r17
    1ade:	a2 2c       	mov	r10, r2
    1ae0:	b3 2c       	mov	r11, r3
    1ae2:	c4 2c       	mov	r12, r4
    1ae4:	d5 2c       	mov	r13, r5
    1ae6:	e6 2c       	mov	r14, r6
    1ae8:	f7 2c       	mov	r15, r7
    1aea:	08 2d       	mov	r16, r8
    1aec:	19 2d       	mov	r17, r9
    1aee:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpdi2>
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <Configure_Timer+0x16e>
    1af4:	10 f4       	brcc	.+4      	; 0x1afa <Configure_Timer+0x172>
		return TIMER_FAULT;
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	45 c3       	rjmp	.+1674   	; 0x2184 <Configure_Timer+0x7fc>
		Adjusted_Cycles = ((TC_CLK + (F_CLK/2))/F_CLK) * Avg_ISR_Cycles;
	} */

	// Disable the timer interrupts as the timer is being re-configured:

	uint64_t Numerator = Step * TC_CLK;
    1afa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1afc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1afe:	9c 01       	movw	r18, r24
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <TC_CLK>
    1b08:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <TC_CLK+0x1>
    1b0c:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <TC_CLK+0x2>
    1b10:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <TC_CLK+0x3>
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 56 13 	call	0x26ac	; 0x26ac <__mulsi3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9c 01       	movw	r18, r24
    1b22:	ad 01       	movw	r20, r26
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	cb 01       	movw	r24, r22
    1b2a:	28 87       	std	Y+8, r18	; 0x08
    1b2c:	39 87       	std	Y+9, r19	; 0x09
    1b2e:	4a 87       	std	Y+10, r20	; 0x0a
    1b30:	5b 87       	std	Y+11, r21	; 0x0b
    1b32:	6c 87       	std	Y+12, r22	; 0x0c
    1b34:	7d 87       	std	Y+13, r23	; 0x0d
    1b36:	8e 87       	std	Y+14, r24	; 0x0e
    1b38:	9f 87       	std	Y+15, r25	; 0x0f
	uint64_t Scaled_Ticks = Numerator / Unit; // How many times we have to count for the requested time to have passed at the current clock frequency
    1b3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b3e:	af a5       	ldd	r26, Y+47	; 0x2f
    1b40:	b8 a9       	ldd	r27, Y+48	; 0x30
    1b42:	9c 01       	movw	r18, r24
    1b44:	ad 01       	movw	r20, r26
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	a2 2e       	mov	r10, r18
    1b4e:	b3 2e       	mov	r11, r19
    1b50:	c4 2e       	mov	r12, r20
    1b52:	d5 2e       	mov	r13, r21
    1b54:	e6 2e       	mov	r14, r22
    1b56:	f7 2e       	mov	r15, r23
    1b58:	08 2f       	mov	r16, r24
    1b5a:	19 2f       	mov	r17, r25
    1b5c:	28 85       	ldd	r18, Y+8	; 0x08
    1b5e:	39 85       	ldd	r19, Y+9	; 0x09
    1b60:	4a 85       	ldd	r20, Y+10	; 0x0a
    1b62:	5b 85       	ldd	r21, Y+11	; 0x0b
    1b64:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b66:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b68:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b6c:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__udivdi3>
    1b70:	a2 2e       	mov	r10, r18
    1b72:	b3 2e       	mov	r11, r19
    1b74:	c4 2e       	mov	r12, r20
    1b76:	d5 2e       	mov	r13, r21
    1b78:	e6 2e       	mov	r14, r22
    1b7a:	f7 2e       	mov	r15, r23
    1b7c:	08 2f       	mov	r16, r24
    1b7e:	19 2f       	mov	r17, r25
    1b80:	a8 8a       	std	Y+16, r10	; 0x10
    1b82:	b9 8a       	std	Y+17, r11	; 0x11
    1b84:	ca 8a       	std	Y+18, r12	; 0x12
    1b86:	db 8a       	std	Y+19, r13	; 0x13
    1b88:	ec 8a       	std	Y+20, r14	; 0x14
    1b8a:	fd 8a       	std	Y+21, r15	; 0x15
    1b8c:	0e 8b       	std	Y+22, r16	; 0x16
    1b8e:	1f 8b       	std	Y+23, r17	; 0x17
	
	uint16_t Prescaler = 0;
    1b90:	1a 82       	std	Y+2, r1	; 0x02
    1b92:	19 82       	std	Y+1, r1	; 0x01
	uint32_t Calculated_Prescaler = 0; // Ensures that OCRxA is <= (2^n - 1)
    1b94:	1b 82       	std	Y+3, r1	; 0x03
    1b96:	1c 82       	std	Y+4, r1	; 0x04
    1b98:	1d 82       	std	Y+5, r1	; 0x05
    1b9a:	1e 82       	std	Y+6, r1	; 0x06
	
	switch(Selected_Timer){
    1b9c:	89 a9       	ldd	r24, Y+49	; 0x31
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <Configure_Timer+0x222>
    1ba8:	51 c0       	rjmp	.+162    	; 0x1c4c <Configure_Timer+0x2c4>
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	91 05       	cpc	r25, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <Configure_Timer+0x22a>
    1bb0:	96 c0       	rjmp	.+300    	; 0x1cde <Configure_Timer+0x356>
    1bb2:	89 2b       	or	r24, r25
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <Configure_Timer+0x230>
    1bb6:	dc c0       	rjmp	.+440    	; 0x1d70 <Configure_Timer+0x3e8>
		
		case _16_bit:
			
			TIMSK1 = TIMSK1 & ~(1 << OCIE1A); // Disable the timer interrupt as it is being reconfigured.
    1bb8:	8f e6       	ldi	r24, 0x6F	; 111
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	2f e6       	ldi	r18, 0x6F	; 111
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	f9 01       	movw	r30, r18
    1bc2:	20 81       	ld	r18, Z
    1bc4:	2d 7f       	andi	r18, 0xFD	; 253
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	20 83       	st	Z, r18

			Calculated_Prescaler = (Scaled_Ticks+65534)/65535; // Ceiling function
    1bca:	28 89       	ldd	r18, Y+16	; 0x10
    1bcc:	39 89       	ldd	r19, Y+17	; 0x11
    1bce:	4a 89       	ldd	r20, Y+18	; 0x12
    1bd0:	5b 89       	ldd	r21, Y+19	; 0x13
    1bd2:	6c 89       	ldd	r22, Y+20	; 0x14
    1bd4:	7d 89       	ldd	r23, Y+21	; 0x15
    1bd6:	8e 89       	ldd	r24, Y+22	; 0x16
    1bd8:	9f 89       	ldd	r25, Y+23	; 0x17
    1bda:	22 50       	subi	r18, 0x02	; 2
    1bdc:	31 09       	sbc	r19, r1
    1bde:	4f 4f       	sbci	r20, 0xFF	; 255
    1be0:	5f 4f       	sbci	r21, 0xFF	; 255
    1be2:	6f 4f       	sbci	r22, 0xFF	; 255
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	8f 4f       	sbci	r24, 0xFF	; 255
    1be8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bea:	22 2e       	mov	r2, r18
    1bec:	33 2e       	mov	r3, r19
    1bee:	44 2e       	mov	r4, r20
    1bf0:	55 2e       	mov	r5, r21
    1bf2:	66 2e       	mov	r6, r22
    1bf4:	77 2e       	mov	r7, r23
    1bf6:	88 2e       	mov	r8, r24
    1bf8:	99 2e       	mov	r9, r25
    1bfa:	aa 24       	eor	r10, r10
    1bfc:	aa 94       	dec	r10
    1bfe:	bb 24       	eor	r11, r11
    1c00:	ba 94       	dec	r11
    1c02:	c1 2c       	mov	r12, r1
    1c04:	d1 2c       	mov	r13, r1
    1c06:	e1 2c       	mov	r14, r1
    1c08:	f1 2c       	mov	r15, r1
    1c0a:	00 e0       	ldi	r16, 0x00	; 0
    1c0c:	10 e0       	ldi	r17, 0x00	; 0
    1c0e:	22 2d       	mov	r18, r2
    1c10:	33 2d       	mov	r19, r3
    1c12:	44 2d       	mov	r20, r4
    1c14:	55 2d       	mov	r21, r5
    1c16:	66 2d       	mov	r22, r6
    1c18:	77 2d       	mov	r23, r7
    1c1a:	88 2d       	mov	r24, r8
    1c1c:	99 2d       	mov	r25, r9
    1c1e:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__udivdi3>
    1c22:	a2 2e       	mov	r10, r18
    1c24:	b3 2e       	mov	r11, r19
    1c26:	c4 2e       	mov	r12, r20
    1c28:	d5 2e       	mov	r13, r21
    1c2a:	e6 2e       	mov	r14, r22
    1c2c:	f7 2e       	mov	r15, r23
    1c2e:	08 2f       	mov	r16, r24
    1c30:	19 2f       	mov	r17, r25
    1c32:	2a 2d       	mov	r18, r10
    1c34:	3b 2d       	mov	r19, r11
    1c36:	4c 2d       	mov	r20, r12
    1c38:	5d 2d       	mov	r21, r13
    1c3a:	6e 2d       	mov	r22, r14
    1c3c:	7f 2d       	mov	r23, r15
    1c3e:	80 2f       	mov	r24, r16
    1c40:	91 2f       	mov	r25, r17
    1c42:	2b 83       	std	Y+3, r18	; 0x03
    1c44:	3c 83       	std	Y+4, r19	; 0x04
    1c46:	4d 83       	std	Y+5, r20	; 0x05
    1c48:	5e 83       	std	Y+6, r21	; 0x06

			break;
    1c4a:	94 c0       	rjmp	.+296    	; 0x1d74 <Configure_Timer+0x3ec>
		
		case _8_bit1:
			
			TIMSK0 = TIMSK0 & ~(1 << OCIE0A);
    1c4c:	8e e6       	ldi	r24, 0x6E	; 110
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	2e e6       	ldi	r18, 0x6E	; 110
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	f9 01       	movw	r30, r18
    1c56:	20 81       	ld	r18, Z
    1c58:	2d 7f       	andi	r18, 0xFD	; 253
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	20 83       	st	Z, r18
			
			Calculated_Prescaler = (Scaled_Ticks+254)/255;
    1c5e:	28 89       	ldd	r18, Y+16	; 0x10
    1c60:	39 89       	ldd	r19, Y+17	; 0x11
    1c62:	4a 89       	ldd	r20, Y+18	; 0x12
    1c64:	5b 89       	ldd	r21, Y+19	; 0x13
    1c66:	6c 89       	ldd	r22, Y+20	; 0x14
    1c68:	7d 89       	ldd	r23, Y+21	; 0x15
    1c6a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c6c:	9f 89       	ldd	r25, Y+23	; 0x17
    1c6e:	22 50       	subi	r18, 0x02	; 2
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	4f 4f       	sbci	r20, 0xFF	; 255
    1c74:	5f 4f       	sbci	r21, 0xFF	; 255
    1c76:	6f 4f       	sbci	r22, 0xFF	; 255
    1c78:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	22 2e       	mov	r2, r18
    1c80:	33 2e       	mov	r3, r19
    1c82:	44 2e       	mov	r4, r20
    1c84:	55 2e       	mov	r5, r21
    1c86:	66 2e       	mov	r6, r22
    1c88:	77 2e       	mov	r7, r23
    1c8a:	88 2e       	mov	r8, r24
    1c8c:	99 2e       	mov	r9, r25
    1c8e:	aa 24       	eor	r10, r10
    1c90:	aa 94       	dec	r10
    1c92:	b1 2c       	mov	r11, r1
    1c94:	c1 2c       	mov	r12, r1
    1c96:	d1 2c       	mov	r13, r1
    1c98:	e1 2c       	mov	r14, r1
    1c9a:	f1 2c       	mov	r15, r1
    1c9c:	00 e0       	ldi	r16, 0x00	; 0
    1c9e:	10 e0       	ldi	r17, 0x00	; 0
    1ca0:	22 2d       	mov	r18, r2
    1ca2:	33 2d       	mov	r19, r3
    1ca4:	44 2d       	mov	r20, r4
    1ca6:	55 2d       	mov	r21, r5
    1ca8:	66 2d       	mov	r22, r6
    1caa:	77 2d       	mov	r23, r7
    1cac:	88 2d       	mov	r24, r8
    1cae:	99 2d       	mov	r25, r9
    1cb0:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__udivdi3>
    1cb4:	a2 2e       	mov	r10, r18
    1cb6:	b3 2e       	mov	r11, r19
    1cb8:	c4 2e       	mov	r12, r20
    1cba:	d5 2e       	mov	r13, r21
    1cbc:	e6 2e       	mov	r14, r22
    1cbe:	f7 2e       	mov	r15, r23
    1cc0:	08 2f       	mov	r16, r24
    1cc2:	19 2f       	mov	r17, r25
    1cc4:	2a 2d       	mov	r18, r10
    1cc6:	3b 2d       	mov	r19, r11
    1cc8:	4c 2d       	mov	r20, r12
    1cca:	5d 2d       	mov	r21, r13
    1ccc:	6e 2d       	mov	r22, r14
    1cce:	7f 2d       	mov	r23, r15
    1cd0:	80 2f       	mov	r24, r16
    1cd2:	91 2f       	mov	r25, r17
    1cd4:	2b 83       	std	Y+3, r18	; 0x03
    1cd6:	3c 83       	std	Y+4, r19	; 0x04
    1cd8:	4d 83       	std	Y+5, r20	; 0x05
    1cda:	5e 83       	std	Y+6, r21	; 0x06
			
			break;
    1cdc:	4b c0       	rjmp	.+150    	; 0x1d74 <Configure_Timer+0x3ec>
			
		case _8_bit2:
			
			TIMSK2 = TIMSK2 & ~(1 << OCIE2A);
    1cde:	80 e7       	ldi	r24, 0x70	; 112
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	20 e7       	ldi	r18, 0x70	; 112
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	20 81       	ld	r18, Z
    1cea:	2d 7f       	andi	r18, 0xFD	; 253
    1cec:	fc 01       	movw	r30, r24
    1cee:	20 83       	st	Z, r18
			
			Calculated_Prescaler = (Scaled_Ticks+254)/255;
    1cf0:	28 89       	ldd	r18, Y+16	; 0x10
    1cf2:	39 89       	ldd	r19, Y+17	; 0x11
    1cf4:	4a 89       	ldd	r20, Y+18	; 0x12
    1cf6:	5b 89       	ldd	r21, Y+19	; 0x13
    1cf8:	6c 89       	ldd	r22, Y+20	; 0x14
    1cfa:	7d 89       	ldd	r23, Y+21	; 0x15
    1cfc:	8e 89       	ldd	r24, Y+22	; 0x16
    1cfe:	9f 89       	ldd	r25, Y+23	; 0x17
    1d00:	22 50       	subi	r18, 0x02	; 2
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	4f 4f       	sbci	r20, 0xFF	; 255
    1d06:	5f 4f       	sbci	r21, 0xFF	; 255
    1d08:	6f 4f       	sbci	r22, 0xFF	; 255
    1d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d10:	22 2e       	mov	r2, r18
    1d12:	33 2e       	mov	r3, r19
    1d14:	44 2e       	mov	r4, r20
    1d16:	55 2e       	mov	r5, r21
    1d18:	66 2e       	mov	r6, r22
    1d1a:	77 2e       	mov	r7, r23
    1d1c:	88 2e       	mov	r8, r24
    1d1e:	99 2e       	mov	r9, r25
    1d20:	aa 24       	eor	r10, r10
    1d22:	aa 94       	dec	r10
    1d24:	b1 2c       	mov	r11, r1
    1d26:	c1 2c       	mov	r12, r1
    1d28:	d1 2c       	mov	r13, r1
    1d2a:	e1 2c       	mov	r14, r1
    1d2c:	f1 2c       	mov	r15, r1
    1d2e:	00 e0       	ldi	r16, 0x00	; 0
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	22 2d       	mov	r18, r2
    1d34:	33 2d       	mov	r19, r3
    1d36:	44 2d       	mov	r20, r4
    1d38:	55 2d       	mov	r21, r5
    1d3a:	66 2d       	mov	r22, r6
    1d3c:	77 2d       	mov	r23, r7
    1d3e:	88 2d       	mov	r24, r8
    1d40:	99 2d       	mov	r25, r9
    1d42:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__udivdi3>
    1d46:	a2 2e       	mov	r10, r18
    1d48:	b3 2e       	mov	r11, r19
    1d4a:	c4 2e       	mov	r12, r20
    1d4c:	d5 2e       	mov	r13, r21
    1d4e:	e6 2e       	mov	r14, r22
    1d50:	f7 2e       	mov	r15, r23
    1d52:	08 2f       	mov	r16, r24
    1d54:	19 2f       	mov	r17, r25
    1d56:	2a 2d       	mov	r18, r10
    1d58:	3b 2d       	mov	r19, r11
    1d5a:	4c 2d       	mov	r20, r12
    1d5c:	5d 2d       	mov	r21, r13
    1d5e:	6e 2d       	mov	r22, r14
    1d60:	7f 2d       	mov	r23, r15
    1d62:	80 2f       	mov	r24, r16
    1d64:	91 2f       	mov	r25, r17
    1d66:	2b 83       	std	Y+3, r18	; 0x03
    1d68:	3c 83       	std	Y+4, r19	; 0x04
    1d6a:	4d 83       	std	Y+5, r20	; 0x05
    1d6c:	5e 83       	std	Y+6, r21	; 0x06
		
			break;
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <Configure_Timer+0x3ec>
			
		default:
		
			return TIMER_FAULT;
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	08 c2       	rjmp	.+1040   	; 0x2184 <Configure_Timer+0x7fc>
		
	}


	if(Calculated_Prescaler > 1024){  // The required count will overflow the selected timer, even with the largest available prescaler
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	ad 81       	ldd	r26, Y+5	; 0x05
    1d7a:	be 81       	ldd	r27, Y+6	; 0x06
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	94 40       	sbci	r25, 0x04	; 4
    1d80:	a1 05       	cpc	r26, r1
    1d82:	b1 05       	cpc	r27, r1
    1d84:	08 f4       	brcc	.+2      	; 0x1d88 <Configure_Timer+0x400>
    1d86:	90 c0       	rjmp	.+288    	; 0x1ea8 <Configure_Timer+0x520>

		Prescaler = 1024;
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	94 e0       	ldi	r25, 0x04	; 4
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
		
		//Adjusted_Cycles = (((TC_CLK + (F_CLK*Prescaler/2))/F_CLK*Prescaler) * Avg_ISR_Cycles); // I may revisit this. Quite challenging to get right, and even harder to get consistently right
		
		Calculated_Ticks[Selected_Timer] = (Scaled_Ticks >> 10);
    1d90:	89 a9       	ldd	r24, Y+49	; 0x31
    1d92:	e8 2f       	mov	r30, r24
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	28 89       	ldd	r18, Y+16	; 0x10
    1d98:	39 89       	ldd	r19, Y+17	; 0x11
    1d9a:	4a 89       	ldd	r20, Y+18	; 0x12
    1d9c:	5b 89       	ldd	r21, Y+19	; 0x13
    1d9e:	6c 89       	ldd	r22, Y+20	; 0x14
    1da0:	7d 89       	ldd	r23, Y+21	; 0x15
    1da2:	8e 89       	ldd	r24, Y+22	; 0x16
    1da4:	9f 89       	ldd	r25, Y+23	; 0x17
    1da6:	0a e0       	ldi	r16, 0x0A	; 10
    1da8:	0e 94 45 14 	call	0x288a	; 0x288a <__lshrdi3>
    1dac:	a2 2e       	mov	r10, r18
    1dae:	b3 2e       	mov	r11, r19
    1db0:	c4 2e       	mov	r12, r20
    1db2:	d5 2e       	mov	r13, r21
    1db4:	e6 2e       	mov	r14, r22
    1db6:	f7 2e       	mov	r15, r23
    1db8:	08 2f       	mov	r16, r24
    1dba:	19 2f       	mov	r17, r25
    1dbc:	d6 01       	movw	r26, r12
    1dbe:	c5 01       	movw	r24, r10
    1dc0:	9f 01       	movw	r18, r30
    1dc2:	22 0f       	add	r18, r18
    1dc4:	33 1f       	adc	r19, r19
    1dc6:	22 0f       	add	r18, r18
    1dc8:	33 1f       	adc	r19, r19
    1dca:	2d 58       	subi	r18, 0x8D	; 141
    1dcc:	3e 4f       	sbci	r19, 0xFE	; 254
    1dce:	f9 01       	movw	r30, r18
    1dd0:	80 83       	st	Z, r24
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	a2 83       	std	Z+2, r26	; 0x02
    1dd6:	b3 83       	std	Z+3, r27	; 0x03
		
		Remaining_Ticks[Selected_Timer] = Calculated_Ticks[Selected_Timer];
    1dd8:	89 a9       	ldd	r24, Y+49	; 0x31
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	89 a9       	ldd	r24, Y+49	; 0x31
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	8d 58       	subi	r24, 0x8D	; 141
    1dee:	9e 4f       	sbci	r25, 0xFE	; 254
    1df0:	fc 01       	movw	r30, r24
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	a2 81       	ldd	r26, Z+2	; 0x02
    1df8:	b3 81       	ldd	r27, Z+3	; 0x03
    1dfa:	22 0f       	add	r18, r18
    1dfc:	33 1f       	adc	r19, r19
    1dfe:	22 0f       	add	r18, r18
    1e00:	33 1f       	adc	r19, r19
    1e02:	21 58       	subi	r18, 0x81	; 129
    1e04:	3e 4f       	sbci	r19, 0xFE	; 254
    1e06:	f9 01       	movw	r30, r18
    1e08:	80 83       	st	Z, r24
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	a2 83       	std	Z+2, r26	; 0x02
    1e0e:	b3 83       	std	Z+3, r27	; 0x03
		
		switch(Selected_Timer){
    1e10:	89 a9       	ldd	r24, Y+49	; 0x31
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	81 30       	cpi	r24, 0x01	; 1
    1e18:	91 05       	cpc	r25, r1
    1e1a:	d9 f0       	breq	.+54     	; 0x1e52 <Configure_Timer+0x4ca>
    1e1c:	82 30       	cpi	r24, 0x02	; 2
    1e1e:	91 05       	cpc	r25, r1
    1e20:	69 f1       	breq	.+90     	; 0x1e7c <Configure_Timer+0x4f4>
    1e22:	89 2b       	or	r24, r25
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <Configure_Timer+0x4a0>
    1e26:	86 c1       	rjmp	.+780    	; 0x2134 <Configure_Timer+0x7ac>
			
			case _16_bit:
				
				TCCR1B = (1 << CS12) | (1 << CS10) | (1 << WGM12); // Set prescaler to 1024, CTC mode (TCCR = Timer counter control register)
    1e28:	81 e8       	ldi	r24, 0x81	; 129
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	2d e0       	ldi	r18, 0x0D	; 13
    1e2e:	fc 01       	movw	r30, r24
    1e30:	20 83       	st	Z, r18
								
				OCR1AH = 0xFF;
    1e32:	89 e8       	ldi	r24, 0x89	; 137
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	2f ef       	ldi	r18, 0xFF	; 255
    1e38:	fc 01       	movw	r30, r24
    1e3a:	20 83       	st	Z, r18
				OCR1AL = 0xFF; // Timer begins
    1e3c:	88 e8       	ldi	r24, 0x88	; 136
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	2f ef       	ldi	r18, 0xFF	; 255
    1e42:	fc 01       	movw	r30, r24
    1e44:	20 83       	st	Z, r18
				
				TIMSK1 = (1 << OCIE1A); // Timer/Counter1 Interrupt Mask Register -> Enabled interrupt for progrm at TIMER1_COMPA_vect to be executed on compare match
    1e46:	8f e6       	ldi	r24, 0x6F	; 111
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	22 e0       	ldi	r18, 0x02	; 2
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	20 83       	st	Z, r18
				break;
    1e50:	71 c1       	rjmp	.+738    	; 0x2134 <Configure_Timer+0x7ac>
			
			case _8_bit1:
				
				TCCR0A = (1 << WGM01);
    1e52:	84 e4       	ldi	r24, 0x44	; 68
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	22 e0       	ldi	r18, 0x02	; 2
    1e58:	fc 01       	movw	r30, r24
    1e5a:	20 83       	st	Z, r18
				TCCR0B = (1 << CS02) | (1 << CS00);
    1e5c:	85 e4       	ldi	r24, 0x45	; 69
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	25 e0       	ldi	r18, 0x05	; 5
    1e62:	fc 01       	movw	r30, r24
    1e64:	20 83       	st	Z, r18
				
				TIMSK0 = (1 << OCIE0A);
    1e66:	8e e6       	ldi	r24, 0x6E	; 110
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	22 e0       	ldi	r18, 0x02	; 2
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	20 83       	st	Z, r18
				
				OCR0A = 0xFF;
    1e70:	87 e4       	ldi	r24, 0x47	; 71
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	2f ef       	ldi	r18, 0xFF	; 255
    1e76:	fc 01       	movw	r30, r24
    1e78:	20 83       	st	Z, r18
				break;
    1e7a:	5c c1       	rjmp	.+696    	; 0x2134 <Configure_Timer+0x7ac>
			
			case _8_bit2:

				TCCR2A = (1 << WGM21);
    1e7c:	80 eb       	ldi	r24, 0xB0	; 176
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	22 e0       	ldi	r18, 0x02	; 2
    1e82:	fc 01       	movw	r30, r24
    1e84:	20 83       	st	Z, r18
				TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);
    1e86:	81 eb       	ldi	r24, 0xB1	; 177
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	27 e0       	ldi	r18, 0x07	; 7
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	20 83       	st	Z, r18

				TIMSK2 = (1 << OCIE2A);
    1e90:	80 e7       	ldi	r24, 0x70	; 112
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	22 e0       	ldi	r18, 0x02	; 2
    1e96:	fc 01       	movw	r30, r24
    1e98:	20 83       	st	Z, r18
	
				OCR2A = 0xFF;
    1e9a:	83 eb       	ldi	r24, 0xB3	; 179
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	2f ef       	ldi	r18, 0xFF	; 255
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	20 83       	st	Z, r18
				break;
    1ea4:	00 00       	nop
    1ea6:	46 c1       	rjmp	.+652    	; 0x2134 <Configure_Timer+0x7ac>
		}
		
		
	}else{
		
		Calculated_Ticks[Selected_Timer] = 0;
    1ea8:	89 a9       	ldd	r24, Y+49	; 0x31
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	8d 58       	subi	r24, 0x8D	; 141
    1eb8:	9e 4f       	sbci	r25, 0xFE	; 254
    1eba:	fc 01       	movw	r30, r24
    1ebc:	10 82       	st	Z, r1
    1ebe:	11 82       	std	Z+1, r1	; 0x01
    1ec0:	12 82       	std	Z+2, r1	; 0x02
    1ec2:	13 82       	std	Z+3, r1	; 0x03
		
		uint16_t Clock_Dividers[5] = {1, 8, 64, 256, 1024}; 
    1ec4:	8a e0       	ldi	r24, 0x0A	; 10
    1ec6:	e5 e2       	ldi	r30, 0x25	; 37
    1ec8:	f1 e0       	ldi	r31, 0x01	; 1
    1eca:	de 01       	movw	r26, r28
    1ecc:	91 96       	adiw	r26, 0x21	; 33
    1ece:	01 90       	ld	r0, Z+
    1ed0:	0d 92       	st	X+, r0
    1ed2:	8a 95       	dec	r24
    1ed4:	e1 f7       	brne	.-8      	; 0x1ece <Configure_Timer+0x546>
		
		for(uint8_t i = 0; i <= 4; i++){  // Logic to ensure that the Raw_Count <= uint16_t
    1ed6:	1f 82       	std	Y+7, r1	; 0x07
    1ed8:	2e c0       	rjmp	.+92     	; 0x1f36 <Configure_Timer+0x5ae>
			
			if(Clock_Dividers[i] >= Calculated_Prescaler){
    1eda:	8f 81       	ldd	r24, Y+7	; 0x07
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	9e 01       	movw	r18, r28
    1ee6:	2f 5f       	subi	r18, 0xFF	; 255
    1ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eea:	82 0f       	add	r24, r18
    1eec:	93 1f       	adc	r25, r19
    1eee:	80 96       	adiw	r24, 0x20	; 32
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	80 81       	ld	r24, Z
    1ef4:	91 81       	ldd	r25, Z+1	; 0x01
    1ef6:	9c 01       	movw	r18, r24
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	ad 81       	ldd	r26, Y+5	; 0x05
    1f02:	be 81       	ldd	r27, Y+6	; 0x06
    1f04:	28 17       	cp	r18, r24
    1f06:	39 07       	cpc	r19, r25
    1f08:	4a 07       	cpc	r20, r26
    1f0a:	5b 07       	cpc	r21, r27
    1f0c:	88 f0       	brcs	.+34     	; 0x1f30 <Configure_Timer+0x5a8>
				Prescaler = Clock_Dividers[i];
    1f0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f10:	88 2f       	mov	r24, r24
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	9e 01       	movw	r18, r28
    1f1a:	2f 5f       	subi	r18, 0xFF	; 255
    1f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1e:	82 0f       	add	r24, r18
    1f20:	93 1f       	adc	r25, r19
    1f22:	80 96       	adiw	r24, 0x20	; 32
    1f24:	fc 01       	movw	r30, r24
    1f26:	80 81       	ld	r24, Z
    1f28:	91 81       	ldd	r25, Z+1	; 0x01
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
				break;
    1f2e:	06 c0       	rjmp	.+12     	; 0x1f3c <Configure_Timer+0x5b4>
		
		Calculated_Ticks[Selected_Timer] = 0;
		
		uint16_t Clock_Dividers[5] = {1, 8, 64, 256, 1024}; 
		
		for(uint8_t i = 0; i <= 4; i++){  // Logic to ensure that the Raw_Count <= uint16_t
    1f30:	8f 81       	ldd	r24, Y+7	; 0x07
    1f32:	8f 5f       	subi	r24, 0xFF	; 255
    1f34:	8f 83       	std	Y+7, r24	; 0x07
    1f36:	8f 81       	ldd	r24, Y+7	; 0x07
    1f38:	85 30       	cpi	r24, 0x05	; 5
    1f3a:	78 f2       	brcs	.-98     	; 0x1eda <Configure_Timer+0x552>
				break;
			}
			
		}
	
		uint32_t Denominator =  Prescaler * Unit;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	9c 01       	movw	r18, r24
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f48:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f4a:	af a5       	ldd	r26, Y+47	; 0x2f
    1f4c:	b8 a9       	ldd	r27, Y+48	; 0x30
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 56 13 	call	0x26ac	; 0x26ac <__mulsi3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	88 8f       	std	Y+24, r24	; 0x18
    1f5c:	99 8f       	std	Y+25, r25	; 0x19
    1f5e:	aa 8f       	std	Y+26, r26	; 0x1a
    1f60:	bb 8f       	std	Y+27, r27	; 0x1b

		if(Denominator == 0) return TIMER_FAULT;
    1f62:	88 8d       	ldd	r24, Y+24	; 0x18
    1f64:	99 8d       	ldd	r25, Y+25	; 0x19
    1f66:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f68:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f6a:	89 2b       	or	r24, r25
    1f6c:	8a 2b       	or	r24, r26
    1f6e:	8b 2b       	or	r24, r27
    1f70:	11 f4       	brne	.+4      	; 0x1f76 <Configure_Timer+0x5ee>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	07 c1       	rjmp	.+526    	; 0x2184 <Configure_Timer+0x7fc>
	
		//Adjusted_Cycles = (((TC_CLK + (F_CLK*Prescaler/2))/F_CLK*Prescaler) * Avg_ISR_Cycles); 
	
		// Rounding integer division (A new trick I learned) reduces error of Timer_Top ideally to +- 0.5:
	
		uint32_t Timer_Top = ((Numerator + (Denominator/2)) / Denominator); 
    1f76:	88 8d       	ldd	r24, Y+24	; 0x18
    1f78:	99 8d       	ldd	r25, Y+25	; 0x19
    1f7a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f7c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f7e:	b6 95       	lsr	r27
    1f80:	a7 95       	ror	r26
    1f82:	97 95       	ror	r25
    1f84:	87 95       	ror	r24
    1f86:	5c 01       	movw	r10, r24
    1f88:	6d 01       	movw	r12, r26
    1f8a:	e1 2c       	mov	r14, r1
    1f8c:	f1 2c       	mov	r15, r1
    1f8e:	87 01       	movw	r16, r14
    1f90:	2a 2d       	mov	r18, r10
    1f92:	3b 2d       	mov	r19, r11
    1f94:	4c 2d       	mov	r20, r12
    1f96:	5d 2d       	mov	r21, r13
    1f98:	6e 2d       	mov	r22, r14
    1f9a:	7f 2d       	mov	r23, r15
    1f9c:	80 2f       	mov	r24, r16
    1f9e:	91 2f       	mov	r25, r17
    1fa0:	a8 84       	ldd	r10, Y+8	; 0x08
    1fa2:	b9 84       	ldd	r11, Y+9	; 0x09
    1fa4:	ca 84       	ldd	r12, Y+10	; 0x0a
    1fa6:	db 84       	ldd	r13, Y+11	; 0x0b
    1fa8:	ec 84       	ldd	r14, Y+12	; 0x0c
    1faa:	fd 84       	ldd	r15, Y+13	; 0x0d
    1fac:	0e 85       	ldd	r16, Y+14	; 0x0e
    1fae:	1f 85       	ldd	r17, Y+15	; 0x0f
    1fb0:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__adddi3>
    1fb4:	22 2e       	mov	r2, r18
    1fb6:	33 2e       	mov	r3, r19
    1fb8:	44 2e       	mov	r4, r20
    1fba:	55 2e       	mov	r5, r21
    1fbc:	66 2e       	mov	r6, r22
    1fbe:	77 2e       	mov	r7, r23
    1fc0:	88 2e       	mov	r8, r24
    1fc2:	99 2e       	mov	r9, r25
    1fc4:	88 8d       	ldd	r24, Y+24	; 0x18
    1fc6:	99 8d       	ldd	r25, Y+25	; 0x19
    1fc8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1fca:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1fcc:	9c 01       	movw	r18, r24
    1fce:	ad 01       	movw	r20, r26
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	a2 2e       	mov	r10, r18
    1fd8:	b3 2e       	mov	r11, r19
    1fda:	c4 2e       	mov	r12, r20
    1fdc:	d5 2e       	mov	r13, r21
    1fde:	e6 2e       	mov	r14, r22
    1fe0:	f7 2e       	mov	r15, r23
    1fe2:	08 2f       	mov	r16, r24
    1fe4:	19 2f       	mov	r17, r25
    1fe6:	22 2d       	mov	r18, r2
    1fe8:	33 2d       	mov	r19, r3
    1fea:	44 2d       	mov	r20, r4
    1fec:	55 2d       	mov	r21, r5
    1fee:	66 2d       	mov	r22, r6
    1ff0:	77 2d       	mov	r23, r7
    1ff2:	88 2d       	mov	r24, r8
    1ff4:	99 2d       	mov	r25, r9
    1ff6:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__udivdi3>
    1ffa:	a2 2e       	mov	r10, r18
    1ffc:	b3 2e       	mov	r11, r19
    1ffe:	c4 2e       	mov	r12, r20
    2000:	d5 2e       	mov	r13, r21
    2002:	e6 2e       	mov	r14, r22
    2004:	f7 2e       	mov	r15, r23
    2006:	08 2f       	mov	r16, r24
    2008:	19 2f       	mov	r17, r25
    200a:	2a 2d       	mov	r18, r10
    200c:	3b 2d       	mov	r19, r11
    200e:	4c 2d       	mov	r20, r12
    2010:	5d 2d       	mov	r21, r13
    2012:	6e 2d       	mov	r22, r14
    2014:	7f 2d       	mov	r23, r15
    2016:	80 2f       	mov	r24, r16
    2018:	91 2f       	mov	r25, r17
    201a:	2c 8f       	std	Y+28, r18	; 0x1c
    201c:	3d 8f       	std	Y+29, r19	; 0x1d
    201e:	4e 8f       	std	Y+30, r20	; 0x1e
    2020:	5f 8f       	std	Y+31, r21	; 0x1f
	
		if (Timer_Top == 0) return TIMER_FAULT;
    2022:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2024:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2026:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2028:	bf 8d       	ldd	r27, Y+31	; 0x1f
    202a:	89 2b       	or	r24, r25
    202c:	8a 2b       	or	r24, r26
    202e:	8b 2b       	or	r24, r27
    2030:	11 f4       	brne	.+4      	; 0x2036 <Configure_Timer+0x6ae>
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	a7 c0       	rjmp	.+334    	; 0x2184 <Configure_Timer+0x7fc>

		if( (Selected_Timer == _8_bit1 || Selected_Timer == _8_bit2) && Timer_Top > 255 ){
    2036:	89 a9       	ldd	r24, Y+49	; 0x31
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	19 f0       	breq	.+6      	; 0x2042 <Configure_Timer+0x6ba>
    203c:	89 a9       	ldd	r24, Y+49	; 0x31
    203e:	82 30       	cpi	r24, 0x02	; 2
    2040:	61 f4       	brne	.+24     	; 0x205a <Configure_Timer+0x6d2>
    2042:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2044:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2046:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2048:	bf 8d       	ldd	r27, Y+31	; 0x1f
    204a:	8f 3f       	cpi	r24, 0xFF	; 255
    204c:	91 05       	cpc	r25, r1
    204e:	a1 05       	cpc	r26, r1
    2050:	b1 05       	cpc	r27, r1
    2052:	19 f0       	breq	.+6      	; 0x205a <Configure_Timer+0x6d2>
    2054:	10 f0       	brcs	.+4      	; 0x205a <Configure_Timer+0x6d2>
		
			return TIMER_FAULT; 
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	95 c0       	rjmp	.+298    	; 0x2184 <Configure_Timer+0x7fc>
		
		}else if(Selected_Timer == _16_bit && Timer_Top > 65535){
    205a:	89 a9       	ldd	r24, Y+49	; 0x31
    205c:	88 23       	and	r24, r24
    205e:	51 f4       	brne	.+20     	; 0x2074 <Configure_Timer+0x6ec>
    2060:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2062:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2064:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2066:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	a1 40       	sbci	r26, 0x01	; 1
    206c:	b1 05       	cpc	r27, r1
    206e:	10 f0       	brcs	.+4      	; 0x2074 <Configure_Timer+0x6ec>
		
			return TIMER_FAULT;
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	88 c0       	rjmp	.+272    	; 0x2184 <Configure_Timer+0x7fc>
		
		}
	
		Timer_Status Status = Set_Prescaler(Selected_Timer, Prescaler);
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	bc 01       	movw	r22, r24
    207a:	89 a9       	ldd	r24, Y+49	; 0x31
    207c:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Set_Prescaler>
    2080:	88 a3       	std	Y+32, r24	; 0x20
	
		if(Status == TIMER_FAULT){
    2082:	88 a1       	ldd	r24, Y+32	; 0x20
    2084:	88 23       	and	r24, r24
    2086:	11 f4       	brne	.+4      	; 0x208c <Configure_Timer+0x704>
			return TIMER_FAULT;
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	7c c0       	rjmp	.+248    	; 0x2184 <Configure_Timer+0x7fc>
		}
	
		switch(Selected_Timer){
    208c:	89 a9       	ldd	r24, Y+49	; 0x31
    208e:	88 2f       	mov	r24, r24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	91 05       	cpc	r25, r1
    2096:	31 f1       	breq	.+76     	; 0x20e4 <Configure_Timer+0x75c>
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	91 05       	cpc	r25, r1
    209c:	b9 f1       	breq	.+110    	; 0x210c <Configure_Timer+0x784>
    209e:	89 2b       	or	r24, r25
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <Configure_Timer+0x71c>
    20a2:	48 c0       	rjmp	.+144    	; 0x2134 <Configure_Timer+0x7ac>
		
			case _16_bit:
				
				TCCR1B |= (1 << WGM12); 
    20a4:	81 e8       	ldi	r24, 0x81	; 129
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	21 e8       	ldi	r18, 0x81	; 129
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	f9 01       	movw	r30, r18
    20ae:	20 81       	ld	r18, Z
    20b0:	28 60       	ori	r18, 0x08	; 8
    20b2:	fc 01       	movw	r30, r24
    20b4:	20 83       	st	Z, r18
			
				OCR1AH = (Timer_Top >> 8) & 0xFF;
    20b6:	29 e8       	ldi	r18, 0x89	; 137
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20be:	ae 8d       	ldd	r26, Y+30	; 0x1e
    20c0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    20c2:	89 2f       	mov	r24, r25
    20c4:	9a 2f       	mov	r25, r26
    20c6:	ab 2f       	mov	r26, r27
    20c8:	bb 27       	eor	r27, r27
    20ca:	f9 01       	movw	r30, r18
    20cc:	80 83       	st	Z, r24
				TIMSK1 = (1 << OCIE1A); // Timer/Counter1 Interrupt Mask Register -> Enabled interrupt for progrm at TIMER1_COMPA_vect to be executed on compare match
    20ce:	8f e6       	ldi	r24, 0x6F	; 111
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	22 e0       	ldi	r18, 0x02	; 2
    20d4:	fc 01       	movw	r30, r24
    20d6:	20 83       	st	Z, r18
				OCR1AL = (Timer_Top & 0xFF); // Timer begins
    20d8:	88 e8       	ldi	r24, 0x88	; 136
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    20de:	fc 01       	movw	r30, r24
    20e0:	20 83       	st	Z, r18
			
				
				break;
    20e2:	28 c0       	rjmp	.+80     	; 0x2134 <Configure_Timer+0x7ac>
			
			case _8_bit1:

				TCCR0A |= (1 << WGM01); 	
    20e4:	84 e4       	ldi	r24, 0x44	; 68
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	24 e4       	ldi	r18, 0x44	; 68
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	f9 01       	movw	r30, r18
    20ee:	20 81       	ld	r18, Z
    20f0:	22 60       	ori	r18, 0x02	; 2
    20f2:	fc 01       	movw	r30, r24
    20f4:	20 83       	st	Z, r18
			
				TIMSK0 = (1 << OCIE0A);
    20f6:	8e e6       	ldi	r24, 0x6E	; 110
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	22 e0       	ldi	r18, 0x02	; 2
    20fc:	fc 01       	movw	r30, r24
    20fe:	20 83       	st	Z, r18
				OCR0A = Timer_Top;		
    2100:	87 e4       	ldi	r24, 0x47	; 71
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2106:	fc 01       	movw	r30, r24
    2108:	20 83       	st	Z, r18
		
				break;
    210a:	14 c0       	rjmp	.+40     	; 0x2134 <Configure_Timer+0x7ac>
			
			case _8_bit2:

				TCCR2A |= (1 << WGM21);		
    210c:	80 eb       	ldi	r24, 0xB0	; 176
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	20 eb       	ldi	r18, 0xB0	; 176
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	f9 01       	movw	r30, r18
    2116:	20 81       	ld	r18, Z
    2118:	22 60       	ori	r18, 0x02	; 2
    211a:	fc 01       	movw	r30, r24
    211c:	20 83       	st	Z, r18
			
				TIMSK2 = (1 << OCIE2A);
    211e:	80 e7       	ldi	r24, 0x70	; 112
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	22 e0       	ldi	r18, 0x02	; 2
    2124:	fc 01       	movw	r30, r24
    2126:	20 83       	st	Z, r18
				OCR2A = Timer_Top; 
    2128:	83 eb       	ldi	r24, 0xB3	; 179
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    212e:	fc 01       	movw	r30, r24
    2130:	20 83       	st	Z, r18
		
				break;
    2132:	00 00       	nop
				
		}
		
	}
	
	Timer_Mode[Selected_Timer] = TIMER_CTC;
    2134:	89 a9       	ldd	r24, Y+49	; 0x31
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	87 5f       	subi	r24, 0xF7	; 247
    213c:	9e 4f       	sbci	r25, 0xFE	; 254
    213e:	21 e0       	ldi	r18, 0x01	; 1
    2140:	fc 01       	movw	r30, r24
    2142:	20 83       	st	Z, r18
	Timer_Unit[Selected_Timer] = Unit;
    2144:	89 a9       	ldd	r24, Y+49	; 0x31
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	9c 01       	movw	r18, r24
    2154:	25 57       	subi	r18, 0x75	; 117
    2156:	3e 4f       	sbci	r19, 0xFE	; 254
    2158:	8d a5       	ldd	r24, Y+45	; 0x2d
    215a:	9e a5       	ldd	r25, Y+46	; 0x2e
    215c:	af a5       	ldd	r26, Y+47	; 0x2f
    215e:	b8 a9       	ldd	r27, Y+48	; 0x30
    2160:	f9 01       	movw	r30, r18
    2162:	80 83       	st	Z, r24
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	a2 83       	std	Z+2, r26	; 0x02
    2168:	b3 83       	std	Z+3, r27	; 0x03
	Timer_Step[Selected_Timer] = Step;
    216a:	89 a9       	ldd	r24, Y+49	; 0x31
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	89 56       	subi	r24, 0x69	; 105
    2176:	9e 4f       	sbci	r25, 0xFE	; 254
    2178:	2b a5       	ldd	r18, Y+43	; 0x2b
    217a:	3c a5       	ldd	r19, Y+44	; 0x2c
    217c:	fc 01       	movw	r30, r24
    217e:	31 83       	std	Z+1, r19	; 0x01
    2180:	20 83       	st	Z, r18
	return TIMER_OK;
    2182:	81 e0       	ldi	r24, 0x01	; 1

}
    2184:	e1 96       	adiw	r28, 0x31	; 49
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	1f 91       	pop	r17
    2196:	0f 91       	pop	r16
    2198:	ff 90       	pop	r15
    219a:	ef 90       	pop	r14
    219c:	df 90       	pop	r13
    219e:	cf 90       	pop	r12
    21a0:	bf 90       	pop	r11
    21a2:	af 90       	pop	r10
    21a4:	9f 90       	pop	r9
    21a6:	8f 90       	pop	r8
    21a8:	7f 90       	pop	r7
    21aa:	6f 90       	pop	r6
    21ac:	5f 90       	pop	r5
    21ae:	4f 90       	pop	r4
    21b0:	3f 90       	pop	r3
    21b2:	2f 90       	pop	r2
    21b4:	08 95       	ret

000021b6 <Reset_Timer_If_CTC>:

// f_PWM = f_clk/N*256

static void Reset_Timer_If_CTC(void) {
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
	
	switch(Selected_Timer) {
    21be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Selected_Timer>
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	91 05       	cpc	r25, r1
    21ca:	79 f0       	breq	.+30     	; 0x21ea <Reset_Timer_If_CTC+0x34>
    21cc:	82 30       	cpi	r24, 0x02	; 2
    21ce:	91 05       	cpc	r25, r1
    21d0:	a9 f0       	breq	.+42     	; 0x21fc <Reset_Timer_If_CTC+0x46>
    21d2:	89 2b       	or	r24, r25
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <Reset_Timer_If_CTC+0x22>
			}
			
			break;
	}
	
}
    21d6:	20 c0       	rjmp	.+64     	; 0x2218 <Reset_Timer_If_CTC+0x62>
	
	switch(Selected_Timer) {
		
		case _16_bit:
		
			if(Timer_Mode[_16_bit] == TIMER_CTC){
    21d8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Timer_Mode>
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	b9 f4       	brne	.+46     	; 0x220e <Reset_Timer_If_CTC+0x58>
				
				TIMSK1 = 0; // Disable all timer interrupts
    21e0:	8f e6       	ldi	r24, 0x6F	; 111
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	fc 01       	movw	r30, r24
    21e6:	10 82       	st	Z, r1
				//TCCR1A = 0; -> MUST BE PROPERLY OVERWRITTEN
				//TCCR1B = 0;
				
			}
			
			break;
    21e8:	12 c0       	rjmp	.+36     	; 0x220e <Reset_Timer_If_CTC+0x58>
			
		case _8_bit1:
		
			if(Timer_Mode[_8_bit1] == TIMER_CTC){
    21ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Timer_Mode+0x1>
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	81 f4       	brne	.+32     	; 0x2212 <Reset_Timer_If_CTC+0x5c>
				
				TIMSK0 = 0;
    21f2:	8e e6       	ldi	r24, 0x6E	; 110
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	fc 01       	movw	r30, r24
    21f8:	10 82       	st	Z, r1
				//TCCR0A = 0;
				//TCCR0B = 0;
				
			}
			
			break;
    21fa:	0b c0       	rjmp	.+22     	; 0x2212 <Reset_Timer_If_CTC+0x5c>
			
		case _8_bit2:
		
			if(Timer_Mode[_8_bit2] == TIMER_CTC){
    21fc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Timer_Mode+0x2>
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	49 f4       	brne	.+18     	; 0x2216 <Reset_Timer_If_CTC+0x60>
				
				TIMSK2 = 0;
    2204:	80 e7       	ldi	r24, 0x70	; 112
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	fc 01       	movw	r30, r24
    220a:	10 82       	st	Z, r1
				//TCCR2A = 0;
				//TCCR2B = 0;
				
			}
			
			break;
    220c:	04 c0       	rjmp	.+8      	; 0x2216 <Reset_Timer_If_CTC+0x60>
				//TCCR1A = 0; -> MUST BE PROPERLY OVERWRITTEN
				//TCCR1B = 0;
				
			}
			
			break;
    220e:	00 00       	nop
    2210:	03 c0       	rjmp	.+6      	; 0x2218 <Reset_Timer_If_CTC+0x62>
				//TCCR0A = 0;
				//TCCR0B = 0;
				
			}
			
			break;
    2212:	00 00       	nop
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <Reset_Timer_If_CTC+0x62>
				//TCCR2A = 0;
				//TCCR2B = 0;
				
			}
			
			break;
    2216:	00 00       	nop
	}
	
}
    2218:	00 00       	nop
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <Toggle_PWM>:

Timer_Status Toggle_PWM(PWM_Setup* PWM, PWM_States PWM_State) { // Hardware is incapable of variable freq. variable duty %, except for 16 bit timer.
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	00 d0       	rcall	.+0      	; 0x2226 <Toggle_PWM+0x6>
    2226:	1f 92       	push	r1
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	6b 83       	std	Y+3, r22	; 0x03
	
	switch(PWM->Pin){ // I repeat myself seemingly a fair bit here, but the only way the timer is known, without having to pass the timer, is by knowing which pin it is.
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	fc 01       	movw	r30, r24
    2238:	80 81       	ld	r24, Z
    223a:	88 2f       	mov	r24, r24
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	91 05       	cpc	r25, r1
    2242:	09 f4       	brne	.+2      	; 0x2246 <Toggle_PWM+0x26>
    2244:	7d c0       	rjmp	.+250    	; 0x2340 <Toggle_PWM+0x120>
    2246:	83 30       	cpi	r24, 0x03	; 3
    2248:	91 05       	cpc	r25, r1
    224a:	34 f4       	brge	.+12     	; 0x2258 <Toggle_PWM+0x38>
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	81 f0       	breq	.+32     	; 0x2270 <Toggle_PWM+0x50>
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	09 f4       	brne	.+2      	; 0x2256 <Toggle_PWM+0x36>
    2254:	41 c0       	rjmp	.+130    	; 0x22d8 <Toggle_PWM+0xb8>
    2256:	24 c1       	rjmp	.+584    	; 0x24a0 <Toggle_PWM+0x280>
    2258:	84 30       	cpi	r24, 0x04	; 4
    225a:	91 05       	cpc	r25, r1
    225c:	09 f4       	brne	.+2      	; 0x2260 <Toggle_PWM+0x40>
    225e:	c8 c0       	rjmp	.+400    	; 0x23f0 <Toggle_PWM+0x1d0>
    2260:	84 30       	cpi	r24, 0x04	; 4
    2262:	91 05       	cpc	r25, r1
    2264:	0c f4       	brge	.+2      	; 0x2268 <Toggle_PWM+0x48>
    2266:	98 c0       	rjmp	.+304    	; 0x2398 <Toggle_PWM+0x178>
    2268:	05 97       	sbiw	r24, 0x05	; 5
    226a:	09 f4       	brne	.+2      	; 0x226e <Toggle_PWM+0x4e>
    226c:	ed c0       	rjmp	.+474    	; 0x2448 <Toggle_PWM+0x228>
    226e:	18 c1       	rjmp	.+560    	; 0x24a0 <Toggle_PWM+0x280>
		
		case PB1_OC1A:
			
			Selected_Timer = _16_bit;
    2270:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Selected_Timer>
			
			switch(PWM_State){
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	01 f1       	breq	.+64     	; 0x22be <Toggle_PWM+0x9e>
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	41 f5       	brne	.+80     	; 0x22d2 <Toggle_PWM+0xb2>
				
				case ON:
				
					Reset_Timer_If_CTC();
    2282:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Reset_Timer_If_CTC>
					
					TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0) | (1 << WGM11) | (1 << WGM10)); // Clear previous compare modes and wgm modes:
    2286:	80 e8       	ldi	r24, 0x80	; 128
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	20 e8       	ldi	r18, 0x80	; 128
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	f9 01       	movw	r30, r18
    2290:	20 81       	ld	r18, Z
    2292:	2c 73       	andi	r18, 0x3C	; 60
    2294:	fc 01       	movw	r30, r24
    2296:	20 83       	st	Z, r18
					TCCR1B &= ~((1 << WGM13) | (1 << WGM12));
    2298:	81 e8       	ldi	r24, 0x81	; 129
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	21 e8       	ldi	r18, 0x81	; 129
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	f9 01       	movw	r30, r18
    22a2:	20 81       	ld	r18, Z
    22a4:	27 7e       	andi	r18, 0xE7	; 231
    22a6:	fc 01       	movw	r30, r24
    22a8:	20 83       	st	Z, r18
					
					TCCR1A |= ((1 << COM1A1) | (1 << WGM10)); // PWM mode 1, phase correct, 8 bit 
    22aa:	80 e8       	ldi	r24, 0x80	; 128
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	20 e8       	ldi	r18, 0x80	; 128
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	f9 01       	movw	r30, r18
    22b4:	20 81       	ld	r18, Z
    22b6:	21 68       	ori	r18, 0x81	; 129
    22b8:	fc 01       	movw	r30, r24
    22ba:	20 83       	st	Z, r18
					
					break;
    22bc:	0c c0       	rjmp	.+24     	; 0x22d6 <Toggle_PWM+0xb6>
					
				case OFF:
				
					TCCR1A &= ~(1 << COM1A1); // Restore normal port operation for this pin
    22be:	80 e8       	ldi	r24, 0x80	; 128
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	20 e8       	ldi	r18, 0x80	; 128
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	f9 01       	movw	r30, r18
    22c8:	20 81       	ld	r18, Z
    22ca:	2f 77       	andi	r18, 0x7F	; 127
    22cc:	fc 01       	movw	r30, r24
    22ce:	20 83       	st	Z, r18
					
					break;
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <Toggle_PWM+0xb6>
				
				default:
				
					return TIMER_FAULT;
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	0c c1       	rjmp	.+536    	; 0x24ee <Toggle_PWM+0x2ce>
				}
		
			break;
    22d6:	e6 c0       	rjmp	.+460    	; 0x24a4 <Toggle_PWM+0x284>
		
		case PB2_OC1B:
			
			Selected_Timer = _16_bit;
    22d8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Selected_Timer>
			
			switch(PWM_State){
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	01 f1       	breq	.+64     	; 0x2326 <Toggle_PWM+0x106>
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	41 f5       	brne	.+80     	; 0x233a <Toggle_PWM+0x11a>
				
				case ON:
				
					Reset_Timer_If_CTC();
    22ea:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Reset_Timer_If_CTC>
				
					TCCR1A &= ~((1 << COM1B1) | (1 << COM1B0) | (1 << WGM11) | (1 << WGM10)); // Clear compare & WGM bits
    22ee:	80 e8       	ldi	r24, 0x80	; 128
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	20 e8       	ldi	r18, 0x80	; 128
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	f9 01       	movw	r30, r18
    22f8:	20 81       	ld	r18, Z
    22fa:	2c 7c       	andi	r18, 0xCC	; 204
    22fc:	fc 01       	movw	r30, r24
    22fe:	20 83       	st	Z, r18
					TCCR1B &= ~((1 << WGM13) | (1 << WGM12));                                // Clear WGM bits in TCCR1B
    2300:	81 e8       	ldi	r24, 0x81	; 129
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	21 e8       	ldi	r18, 0x81	; 129
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	f9 01       	movw	r30, r18
    230a:	20 81       	ld	r18, Z
    230c:	27 7e       	andi	r18, 0xE7	; 231
    230e:	fc 01       	movw	r30, r24
    2310:	20 83       	st	Z, r18

					TCCR1A |= (1 << COM1B1) | (1 << WGM10); // Non-inverting, Phase Correct PWM, 8-bit
    2312:	80 e8       	ldi	r24, 0x80	; 128
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	20 e8       	ldi	r18, 0x80	; 128
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	f9 01       	movw	r30, r18
    231c:	20 81       	ld	r18, Z
    231e:	21 62       	ori	r18, 0x21	; 33
    2320:	fc 01       	movw	r30, r24
    2322:	20 83       	st	Z, r18
				
					break;
    2324:	0c c0       	rjmp	.+24     	; 0x233e <Toggle_PWM+0x11e>
				
				case OFF:
				
					TCCR1A &= ~(1 << COM1B1); 
    2326:	80 e8       	ldi	r24, 0x80	; 128
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	20 e8       	ldi	r18, 0x80	; 128
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	f9 01       	movw	r30, r18
    2330:	20 81       	ld	r18, Z
    2332:	2f 7d       	andi	r18, 0xDF	; 223
    2334:	fc 01       	movw	r30, r24
    2336:	20 83       	st	Z, r18
				
					break;
    2338:	02 c0       	rjmp	.+4      	; 0x233e <Toggle_PWM+0x11e>
				
				default:
				
					return TIMER_FAULT;
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	d8 c0       	rjmp	.+432    	; 0x24ee <Toggle_PWM+0x2ce>
					
			}
			
			break;
    233e:	b2 c0       	rjmp	.+356    	; 0x24a4 <Toggle_PWM+0x284>
		
		case PD5_OC0B:
			
			Selected_Timer = _8_bit1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Selected_Timer>
						
			switch(PWM_State){
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	b9 f0       	breq	.+46     	; 0x237e <Toggle_PWM+0x15e>
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f9 f4       	brne	.+62     	; 0x2392 <Toggle_PWM+0x172>
				
				case ON:
				
					Reset_Timer_If_CTC();
    2354:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Reset_Timer_If_CTC>
					
					TCCR0A &= ~((1 << COM0B1) | (1 << COM0B0) | (1 << WGM01) | (1 << WGM00)); // Clear compare & WGM bits
    2358:	84 e4       	ldi	r24, 0x44	; 68
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	24 e4       	ldi	r18, 0x44	; 68
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	f9 01       	movw	r30, r18
    2362:	20 81       	ld	r18, Z
    2364:	2c 7c       	andi	r18, 0xCC	; 204
    2366:	fc 01       	movw	r30, r24
    2368:	20 83       	st	Z, r18

					TCCR0A |= (1 << COM0B1) | (1 << WGM00); // Non-inverting, Phase Correct PWM
    236a:	84 e4       	ldi	r24, 0x44	; 68
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	24 e4       	ldi	r18, 0x44	; 68
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	f9 01       	movw	r30, r18
    2374:	20 81       	ld	r18, Z
    2376:	21 62       	ori	r18, 0x21	; 33
    2378:	fc 01       	movw	r30, r24
    237a:	20 83       	st	Z, r18

				
					break;
    237c:	0c c0       	rjmp	.+24     	; 0x2396 <Toggle_PWM+0x176>
				
				case OFF:
				
					TCCR0A &= ~(1 << COM0B1);
    237e:	84 e4       	ldi	r24, 0x44	; 68
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	24 e4       	ldi	r18, 0x44	; 68
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	f9 01       	movw	r30, r18
    2388:	20 81       	ld	r18, Z
    238a:	2f 7d       	andi	r18, 0xDF	; 223
    238c:	fc 01       	movw	r30, r24
    238e:	20 83       	st	Z, r18
				
					break;
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <Toggle_PWM+0x176>
				
				default:
				
					return TIMER_FAULT;
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	ac c0       	rjmp	.+344    	; 0x24ee <Toggle_PWM+0x2ce>
					
			}
			
			break;
    2396:	86 c0       	rjmp	.+268    	; 0x24a4 <Toggle_PWM+0x284>
		
		case PD6_OC0A:
		
			Selected_Timer = _8_bit1;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Selected_Timer>
			
			switch(PWM_State){
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	b9 f0       	breq	.+46     	; 0x23d6 <Toggle_PWM+0x1b6>
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f9 f4       	brne	.+62     	; 0x23ea <Toggle_PWM+0x1ca>
				
				case ON:
				
					Reset_Timer_If_CTC();
    23ac:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Reset_Timer_If_CTC>
					
					TCCR0A &= ~((1 << COM0A1) | (1 << COM0A0) | (1 << WGM01) | (1 << WGM00));
    23b0:	84 e4       	ldi	r24, 0x44	; 68
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	24 e4       	ldi	r18, 0x44	; 68
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	f9 01       	movw	r30, r18
    23ba:	20 81       	ld	r18, Z
    23bc:	2c 73       	andi	r18, 0x3C	; 60
    23be:	fc 01       	movw	r30, r24
    23c0:	20 83       	st	Z, r18
					TCCR0A |= (1 << COM0A1) | (1 << WGM00);
    23c2:	84 e4       	ldi	r24, 0x44	; 68
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	24 e4       	ldi	r18, 0x44	; 68
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	f9 01       	movw	r30, r18
    23cc:	20 81       	ld	r18, Z
    23ce:	21 68       	ori	r18, 0x81	; 129
    23d0:	fc 01       	movw	r30, r24
    23d2:	20 83       	st	Z, r18

					break;
    23d4:	0c c0       	rjmp	.+24     	; 0x23ee <Toggle_PWM+0x1ce>
				
				case OFF:
				
					TCCR0A &= ~(1 << COM0A1);
    23d6:	84 e4       	ldi	r24, 0x44	; 68
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	24 e4       	ldi	r18, 0x44	; 68
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	f9 01       	movw	r30, r18
    23e0:	20 81       	ld	r18, Z
    23e2:	2f 77       	andi	r18, 0x7F	; 127
    23e4:	fc 01       	movw	r30, r24
    23e6:	20 83       	st	Z, r18
				
					break;
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <Toggle_PWM+0x1ce>
				
				default:
				
					return TIMER_FAULT;
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	80 c0       	rjmp	.+256    	; 0x24ee <Toggle_PWM+0x2ce>
					
			}
			
			break;
    23ee:	5a c0       	rjmp	.+180    	; 0x24a4 <Toggle_PWM+0x284>
		
		case PB3_OC2A:
			
			Selected_Timer = _8_bit2;
    23f0:	82 e0       	ldi	r24, 0x02	; 2
    23f2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Selected_Timer>
			
			switch(PWM_State){
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	88 2f       	mov	r24, r24
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	b9 f0       	breq	.+46     	; 0x242e <Toggle_PWM+0x20e>
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f9 f4       	brne	.+62     	; 0x2442 <Toggle_PWM+0x222>
				
				case ON:
				
					Reset_Timer_If_CTC();
    2404:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Reset_Timer_If_CTC>
				
					TCCR2A &= ~((1 << COM2A1) | (1 << COM2A0) | (1 << WGM21) | (1 << WGM20)); // Clear compare & WGM bits
    2408:	80 eb       	ldi	r24, 0xB0	; 176
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	20 eb       	ldi	r18, 0xB0	; 176
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	f9 01       	movw	r30, r18
    2412:	20 81       	ld	r18, Z
    2414:	2c 73       	andi	r18, 0x3C	; 60
    2416:	fc 01       	movw	r30, r24
    2418:	20 83       	st	Z, r18

					TCCR2A |= (1 << COM2A1) | (1 << WGM20); // Non-inverting, Phase Correct PWM
    241a:	80 eb       	ldi	r24, 0xB0	; 176
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	20 eb       	ldi	r18, 0xB0	; 176
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	f9 01       	movw	r30, r18
    2424:	20 81       	ld	r18, Z
    2426:	21 68       	ori	r18, 0x81	; 129
    2428:	fc 01       	movw	r30, r24
    242a:	20 83       	st	Z, r18
				
					break;
    242c:	0c c0       	rjmp	.+24     	; 0x2446 <Toggle_PWM+0x226>
				
				case OFF:
				
					TCCR2A &= ~(1 << COM2A1);
    242e:	80 eb       	ldi	r24, 0xB0	; 176
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	20 eb       	ldi	r18, 0xB0	; 176
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	f9 01       	movw	r30, r18
    2438:	20 81       	ld	r18, Z
    243a:	2f 77       	andi	r18, 0x7F	; 127
    243c:	fc 01       	movw	r30, r24
    243e:	20 83       	st	Z, r18
				
					break;
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <Toggle_PWM+0x226>
				
				default:
				
					return TIMER_FAULT;
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	54 c0       	rjmp	.+168    	; 0x24ee <Toggle_PWM+0x2ce>
					
			}
					
			break;
    2446:	2e c0       	rjmp	.+92     	; 0x24a4 <Toggle_PWM+0x284>
		
		case PD3_OC2B:
		
			Selected_Timer = _8_bit2;
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Selected_Timer>
			
			switch(PWM_State){
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	b9 f0       	breq	.+46     	; 0x2486 <Toggle_PWM+0x266>
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f9 f4       	brne	.+62     	; 0x249a <Toggle_PWM+0x27a>
				
				case ON:
				
					Reset_Timer_If_CTC();
    245c:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Reset_Timer_If_CTC>
				
					TCCR2A &= ~((1 << COM2B1) | (1 << COM2B0) | (1 << WGM21) | (1 << WGM20)); // Clear compare & WGM bits
    2460:	80 eb       	ldi	r24, 0xB0	; 176
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	20 eb       	ldi	r18, 0xB0	; 176
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	f9 01       	movw	r30, r18
    246a:	20 81       	ld	r18, Z
    246c:	2c 7c       	andi	r18, 0xCC	; 204
    246e:	fc 01       	movw	r30, r24
    2470:	20 83       	st	Z, r18

					TCCR2A |= (1 << COM2B1) | (1 << WGM20); // Non-inverting, Phase Correct PWM
    2472:	80 eb       	ldi	r24, 0xB0	; 176
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	20 eb       	ldi	r18, 0xB0	; 176
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	f9 01       	movw	r30, r18
    247c:	20 81       	ld	r18, Z
    247e:	21 62       	ori	r18, 0x21	; 33
    2480:	fc 01       	movw	r30, r24
    2482:	20 83       	st	Z, r18
				
					break;
    2484:	0c c0       	rjmp	.+24     	; 0x249e <Toggle_PWM+0x27e>
				
				case OFF:
				
					TCCR2A &= ~(1 << COM2B1);
    2486:	80 eb       	ldi	r24, 0xB0	; 176
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	20 eb       	ldi	r18, 0xB0	; 176
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	f9 01       	movw	r30, r18
    2490:	20 81       	ld	r18, Z
    2492:	2f 7d       	andi	r18, 0xDF	; 223
    2494:	fc 01       	movw	r30, r24
    2496:	20 83       	st	Z, r18
				
					break;
    2498:	02 c0       	rjmp	.+4      	; 0x249e <Toggle_PWM+0x27e>
				
				default:
				
					return TIMER_FAULT;
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	28 c0       	rjmp	.+80     	; 0x24ee <Toggle_PWM+0x2ce>
					
			}
			
			break;
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <Toggle_PWM+0x284>
		
		default:
		
			return TIMER_FAULT;
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	25 c0       	rjmp	.+74     	; 0x24ee <Toggle_PWM+0x2ce>
		
	}
	
	if(PWM_State == ON){
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	81 30       	cpi	r24, 0x01	; 1
    24a8:	49 f4       	brne	.+18     	; 0x24bc <Toggle_PWM+0x29c>
		
		Timer_Mode[Selected_Timer] = TIMER_PWM;
    24aa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Selected_Timer>
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	87 5f       	subi	r24, 0xF7	; 247
    24b4:	9e 4f       	sbci	r25, 0xFE	; 254
    24b6:	fc 01       	movw	r30, r24
    24b8:	10 82       	st	Z, r1
    24ba:	09 c0       	rjmp	.+18     	; 0x24ce <Toggle_PWM+0x2ae>
		
	}else{
		
		Timer_Mode[Selected_Timer] = TIMER_NONE;
    24bc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Selected_Timer>
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	87 5f       	subi	r24, 0xF7	; 247
    24c6:	9e 4f       	sbci	r25, 0xFE	; 254
    24c8:	22 e0       	ldi	r18, 0x02	; 2
    24ca:	fc 01       	movw	r30, r24
    24cc:	20 83       	st	Z, r18
		
	}
	
	Timer_Unit[Selected_Timer] = Invalid;
    24ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Selected_Timer>
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	85 57       	subi	r24, 0x75	; 117
    24e0:	9e 4f       	sbci	r25, 0xFE	; 254
    24e2:	fc 01       	movw	r30, r24
    24e4:	10 82       	st	Z, r1
    24e6:	11 82       	std	Z+1, r1	; 0x01
    24e8:	12 82       	std	Z+2, r1	; 0x02
    24ea:	13 82       	std	Z+3, r1	; 0x03
	
	return TIMER_OK;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
	
}
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	08 95       	ret

000024fa <Configure_PWM>:

Timer_Status Configure_PWM(PWM_Setup* PWM, uint16_t Prescaler, uint8_t Duty_Cycle){
    24fa:	cf 93       	push	r28
    24fc:	df 93       	push	r29
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <Configure_PWM+0x6>
    2500:	00 d0       	rcall	.+0      	; 0x2502 <Configure_PWM+0x8>
    2502:	00 d0       	rcall	.+0      	; 0x2504 <Configure_PWM+0xa>
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	9b 83       	std	Y+3, r25	; 0x03
    250a:	8a 83       	std	Y+2, r24	; 0x02
    250c:	7d 83       	std	Y+5, r23	; 0x05
    250e:	6c 83       	std	Y+4, r22	; 0x04
    2510:	4e 83       	std	Y+6, r20	; 0x06
	
	if(Duty_Cycle > 100) {
    2512:	8e 81       	ldd	r24, Y+6	; 0x06
    2514:	85 36       	cpi	r24, 0x65	; 101
    2516:	10 f0       	brcs	.+4      	; 0x251c <Configure_PWM+0x22>
		return TIMER_FAULT;
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	bf c0       	rjmp	.+382    	; 0x269a <Configure_PWM+0x1a0>
	}
	
	switch(PWM->Pin){
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	9b 81       	ldd	r25, Y+3	; 0x03
    2520:	fc 01       	movw	r30, r24
    2522:	80 81       	ld	r24, Z
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	82 30       	cpi	r24, 0x02	; 2
    252a:	91 05       	cpc	r25, r1
    252c:	09 f4       	brne	.+2      	; 0x2530 <Configure_PWM+0x36>
    252e:	44 c0       	rjmp	.+136    	; 0x25b8 <Configure_PWM+0xbe>
    2530:	83 30       	cpi	r24, 0x03	; 3
    2532:	91 05       	cpc	r25, r1
    2534:	2c f4       	brge	.+10     	; 0x2540 <Configure_PWM+0x46>
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	79 f0       	breq	.+30     	; 0x2558 <Configure_PWM+0x5e>
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	29 f1       	breq	.+74     	; 0x2588 <Configure_PWM+0x8e>
    253e:	9c c0       	rjmp	.+312    	; 0x2678 <Configure_PWM+0x17e>
    2540:	84 30       	cpi	r24, 0x04	; 4
    2542:	91 05       	cpc	r25, r1
    2544:	09 f4       	brne	.+2      	; 0x2548 <Configure_PWM+0x4e>
    2546:	68 c0       	rjmp	.+208    	; 0x2618 <Configure_PWM+0x11e>
    2548:	84 30       	cpi	r24, 0x04	; 4
    254a:	91 05       	cpc	r25, r1
    254c:	0c f4       	brge	.+2      	; 0x2550 <Configure_PWM+0x56>
    254e:	4c c0       	rjmp	.+152    	; 0x25e8 <Configure_PWM+0xee>
    2550:	05 97       	sbiw	r24, 0x05	; 5
    2552:	09 f4       	brne	.+2      	; 0x2556 <Configure_PWM+0x5c>
    2554:	79 c0       	rjmp	.+242    	; 0x2648 <Configure_PWM+0x14e>
    2556:	90 c0       	rjmp	.+288    	; 0x2678 <Configure_PWM+0x17e>
		
		case PB1_OC1A:
		
			OCR1A = (Duty_Cycle * 255 + 50) / 100; // Reduced to 8 bit
    2558:	28 e8       	ldi	r18, 0x88	; 136
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	8e 81       	ldd	r24, Y+6	; 0x06
    255e:	48 2f       	mov	r20, r24
    2560:	50 e0       	ldi	r21, 0x00	; 0
    2562:	6f ef       	ldi	r22, 0xFF	; 255
    2564:	64 9f       	mul	r22, r20
    2566:	c0 01       	movw	r24, r0
    2568:	65 9f       	mul	r22, r21
    256a:	90 0d       	add	r25, r0
    256c:	11 24       	eor	r1, r1
    256e:	c2 96       	adiw	r24, 0x32	; 50
    2570:	44 e6       	ldi	r20, 0x64	; 100
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	ba 01       	movw	r22, r20
    2576:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodhi4>
    257a:	cb 01       	movw	r24, r22
    257c:	f9 01       	movw	r30, r18
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
			Selected_Timer = _16_bit;
    2582:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Selected_Timer>
		
			break;
    2586:	7a c0       	rjmp	.+244    	; 0x267c <Configure_PWM+0x182>
		
		case PB2_OC1B:
		
			OCR1B = (Duty_Cycle * 255 + 50) / 100;
    2588:	2a e8       	ldi	r18, 0x8A	; 138
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	8e 81       	ldd	r24, Y+6	; 0x06
    258e:	48 2f       	mov	r20, r24
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	6f ef       	ldi	r22, 0xFF	; 255
    2594:	64 9f       	mul	r22, r20
    2596:	c0 01       	movw	r24, r0
    2598:	65 9f       	mul	r22, r21
    259a:	90 0d       	add	r25, r0
    259c:	11 24       	eor	r1, r1
    259e:	c2 96       	adiw	r24, 0x32	; 50
    25a0:	44 e6       	ldi	r20, 0x64	; 100
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	ba 01       	movw	r22, r20
    25a6:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodhi4>
    25aa:	cb 01       	movw	r24, r22
    25ac:	f9 01       	movw	r30, r18
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	80 83       	st	Z, r24
			Selected_Timer = _16_bit;
    25b2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Selected_Timer>
		
			break;
    25b6:	62 c0       	rjmp	.+196    	; 0x267c <Configure_PWM+0x182>
		
		case PD5_OC0B:
		
			OCR0B = (Duty_Cycle * 255 + 50) / 100;
    25b8:	28 e4       	ldi	r18, 0x48	; 72
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	8e 81       	ldd	r24, Y+6	; 0x06
    25be:	48 2f       	mov	r20, r24
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	6f ef       	ldi	r22, 0xFF	; 255
    25c4:	64 9f       	mul	r22, r20
    25c6:	c0 01       	movw	r24, r0
    25c8:	65 9f       	mul	r22, r21
    25ca:	90 0d       	add	r25, r0
    25cc:	11 24       	eor	r1, r1
    25ce:	c2 96       	adiw	r24, 0x32	; 50
    25d0:	44 e6       	ldi	r20, 0x64	; 100
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	ba 01       	movw	r22, r20
    25d6:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodhi4>
    25da:	cb 01       	movw	r24, r22
    25dc:	f9 01       	movw	r30, r18
    25de:	80 83       	st	Z, r24
			Selected_Timer = _8_bit1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Selected_Timer>
		
			break;
    25e6:	4a c0       	rjmp	.+148    	; 0x267c <Configure_PWM+0x182>
		
		case PD6_OC0A:
		
			OCR0A = (Duty_Cycle * 255 + 50) / 100;
    25e8:	27 e4       	ldi	r18, 0x47	; 71
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	8e 81       	ldd	r24, Y+6	; 0x06
    25ee:	48 2f       	mov	r20, r24
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	6f ef       	ldi	r22, 0xFF	; 255
    25f4:	64 9f       	mul	r22, r20
    25f6:	c0 01       	movw	r24, r0
    25f8:	65 9f       	mul	r22, r21
    25fa:	90 0d       	add	r25, r0
    25fc:	11 24       	eor	r1, r1
    25fe:	c2 96       	adiw	r24, 0x32	; 50
    2600:	44 e6       	ldi	r20, 0x64	; 100
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	ba 01       	movw	r22, r20
    2606:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodhi4>
    260a:	cb 01       	movw	r24, r22
    260c:	f9 01       	movw	r30, r18
    260e:	80 83       	st	Z, r24
			Selected_Timer = _8_bit1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Selected_Timer>
		
			break;
    2616:	32 c0       	rjmp	.+100    	; 0x267c <Configure_PWM+0x182>
		
		case PB3_OC2A:
		
			OCR2A = (Duty_Cycle * 255 + 50) / 100;
    2618:	23 eb       	ldi	r18, 0xB3	; 179
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	8e 81       	ldd	r24, Y+6	; 0x06
    261e:	48 2f       	mov	r20, r24
    2620:	50 e0       	ldi	r21, 0x00	; 0
    2622:	6f ef       	ldi	r22, 0xFF	; 255
    2624:	64 9f       	mul	r22, r20
    2626:	c0 01       	movw	r24, r0
    2628:	65 9f       	mul	r22, r21
    262a:	90 0d       	add	r25, r0
    262c:	11 24       	eor	r1, r1
    262e:	c2 96       	adiw	r24, 0x32	; 50
    2630:	44 e6       	ldi	r20, 0x64	; 100
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	ba 01       	movw	r22, r20
    2636:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodhi4>
    263a:	cb 01       	movw	r24, r22
    263c:	f9 01       	movw	r30, r18
    263e:	80 83       	st	Z, r24
			Selected_Timer = _8_bit2;
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Selected_Timer>
		
			break;
    2646:	1a c0       	rjmp	.+52     	; 0x267c <Configure_PWM+0x182>
		
		case PD3_OC2B:
		
			OCR2B = (Duty_Cycle * 255 + 50) / 100;
    2648:	24 eb       	ldi	r18, 0xB4	; 180
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	8e 81       	ldd	r24, Y+6	; 0x06
    264e:	48 2f       	mov	r20, r24
    2650:	50 e0       	ldi	r21, 0x00	; 0
    2652:	6f ef       	ldi	r22, 0xFF	; 255
    2654:	64 9f       	mul	r22, r20
    2656:	c0 01       	movw	r24, r0
    2658:	65 9f       	mul	r22, r21
    265a:	90 0d       	add	r25, r0
    265c:	11 24       	eor	r1, r1
    265e:	c2 96       	adiw	r24, 0x32	; 50
    2660:	44 e6       	ldi	r20, 0x64	; 100
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	ba 01       	movw	r22, r20
    2666:	0e 94 66 13 	call	0x26cc	; 0x26cc <__divmodhi4>
    266a:	cb 01       	movw	r24, r22
    266c:	f9 01       	movw	r30, r18
    266e:	80 83       	st	Z, r24
			Selected_Timer = _8_bit2;
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Selected_Timer>
		
			break;
    2676:	02 c0       	rjmp	.+4      	; 0x267c <Configure_PWM+0x182>
		
		default:
		
			return TIMER_FAULT;
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	0f c0       	rjmp	.+30     	; 0x269a <Configure_PWM+0x1a0>
		
	}
	
	Timer_Status Status = Set_Prescaler(Selected_Timer, Prescaler);
    267c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <Selected_Timer>
    2680:	8c 81       	ldd	r24, Y+4	; 0x04
    2682:	9d 81       	ldd	r25, Y+5	; 0x05
    2684:	bc 01       	movw	r22, r24
    2686:	82 2f       	mov	r24, r18
    2688:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Set_Prescaler>
    268c:	89 83       	std	Y+1, r24	; 0x01
	
	if(Status == TIMER_FAULT){
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	88 23       	and	r24, r24
    2692:	11 f4       	brne	.+4      	; 0x2698 <Configure_PWM+0x19e>
		return TIMER_FAULT;
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	01 c0       	rjmp	.+2      	; 0x269a <Configure_PWM+0x1a0>
	}
	
	return TIMER_OK;
    2698:	81 e0       	ldi	r24, 0x01	; 1
	
}
    269a:	26 96       	adiw	r28, 0x06	; 6
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	08 95       	ret

000026ac <__mulsi3>:
    26ac:	db 01       	movw	r26, r22
    26ae:	8f 93       	push	r24
    26b0:	9f 93       	push	r25
    26b2:	0e 94 80 13 	call	0x2700	; 0x2700 <__muluhisi3>
    26b6:	bf 91       	pop	r27
    26b8:	af 91       	pop	r26
    26ba:	a2 9f       	mul	r26, r18
    26bc:	80 0d       	add	r24, r0
    26be:	91 1d       	adc	r25, r1
    26c0:	a3 9f       	mul	r26, r19
    26c2:	90 0d       	add	r25, r0
    26c4:	b2 9f       	mul	r27, r18
    26c6:	90 0d       	add	r25, r0
    26c8:	11 24       	eor	r1, r1
    26ca:	08 95       	ret

000026cc <__divmodhi4>:
    26cc:	97 fb       	bst	r25, 7
    26ce:	07 2e       	mov	r0, r23
    26d0:	16 f4       	brtc	.+4      	; 0x26d6 <__divmodhi4+0xa>
    26d2:	00 94       	com	r0
    26d4:	07 d0       	rcall	.+14     	; 0x26e4 <__divmodhi4_neg1>
    26d6:	77 fd       	sbrc	r23, 7
    26d8:	09 d0       	rcall	.+18     	; 0x26ec <__divmodhi4_neg2>
    26da:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__udivmodhi4>
    26de:	07 fc       	sbrc	r0, 7
    26e0:	05 d0       	rcall	.+10     	; 0x26ec <__divmodhi4_neg2>
    26e2:	3e f4       	brtc	.+14     	; 0x26f2 <__divmodhi4_exit>

000026e4 <__divmodhi4_neg1>:
    26e4:	90 95       	com	r25
    26e6:	81 95       	neg	r24
    26e8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ea:	08 95       	ret

000026ec <__divmodhi4_neg2>:
    26ec:	70 95       	com	r23
    26ee:	61 95       	neg	r22
    26f0:	7f 4f       	sbci	r23, 0xFF	; 255

000026f2 <__divmodhi4_exit>:
    26f2:	08 95       	ret

000026f4 <__tablejump2__>:
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	05 90       	lpm	r0, Z+
    26fa:	f4 91       	lpm	r31, Z
    26fc:	e0 2d       	mov	r30, r0
    26fe:	09 94       	ijmp

00002700 <__muluhisi3>:
    2700:	0e 94 93 14 	call	0x2926	; 0x2926 <__umulhisi3>
    2704:	a5 9f       	mul	r26, r21
    2706:	90 0d       	add	r25, r0
    2708:	b4 9f       	mul	r27, r20
    270a:	90 0d       	add	r25, r0
    270c:	a4 9f       	mul	r26, r20
    270e:	80 0d       	add	r24, r0
    2710:	91 1d       	adc	r25, r1
    2712:	11 24       	eor	r1, r1
    2714:	08 95       	ret

00002716 <__muldi3>:
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	1f 93       	push	r17
    271c:	0f 93       	push	r16
    271e:	9a 9d       	mul	r25, r10
    2720:	f0 2d       	mov	r31, r0
    2722:	21 9f       	mul	r18, r17
    2724:	f0 0d       	add	r31, r0
    2726:	8b 9d       	mul	r24, r11
    2728:	f0 0d       	add	r31, r0
    272a:	8a 9d       	mul	r24, r10
    272c:	e0 2d       	mov	r30, r0
    272e:	f1 0d       	add	r31, r1
    2730:	03 9f       	mul	r16, r19
    2732:	f0 0d       	add	r31, r0
    2734:	02 9f       	mul	r16, r18
    2736:	e0 0d       	add	r30, r0
    2738:	f1 1d       	adc	r31, r1
    273a:	4e 9d       	mul	r20, r14
    273c:	e0 0d       	add	r30, r0
    273e:	f1 1d       	adc	r31, r1
    2740:	5e 9d       	mul	r21, r14
    2742:	f0 0d       	add	r31, r0
    2744:	4f 9d       	mul	r20, r15
    2746:	f0 0d       	add	r31, r0
    2748:	7f 93       	push	r23
    274a:	6f 93       	push	r22
    274c:	bf 92       	push	r11
    274e:	af 92       	push	r10
    2750:	5f 93       	push	r21
    2752:	4f 93       	push	r20
    2754:	d5 01       	movw	r26, r10
    2756:	0e 94 93 14 	call	0x2926	; 0x2926 <__umulhisi3>
    275a:	8b 01       	movw	r16, r22
    275c:	ac 01       	movw	r20, r24
    275e:	d7 01       	movw	r26, r14
    2760:	0e 94 93 14 	call	0x2926	; 0x2926 <__umulhisi3>
    2764:	eb 01       	movw	r28, r22
    2766:	e8 0f       	add	r30, r24
    2768:	f9 1f       	adc	r31, r25
    276a:	d6 01       	movw	r26, r12
    276c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__muldi3_6>
    2770:	2f 91       	pop	r18
    2772:	3f 91       	pop	r19
    2774:	d6 01       	movw	r26, r12
    2776:	0e 94 93 14 	call	0x2926	; 0x2926 <__umulhisi3>
    277a:	c6 0f       	add	r28, r22
    277c:	d7 1f       	adc	r29, r23
    277e:	e8 1f       	adc	r30, r24
    2780:	f9 1f       	adc	r31, r25
    2782:	af 91       	pop	r26
    2784:	bf 91       	pop	r27
    2786:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__muldi3_6>
    278a:	2f 91       	pop	r18
    278c:	3f 91       	pop	r19
    278e:	0e 94 93 14 	call	0x2926	; 0x2926 <__umulhisi3>
    2792:	c6 0f       	add	r28, r22
    2794:	d7 1f       	adc	r29, r23
    2796:	e8 1f       	adc	r30, r24
    2798:	f9 1f       	adc	r31, r25
    279a:	d6 01       	movw	r26, r12
    279c:	0e 94 93 14 	call	0x2926	; 0x2926 <__umulhisi3>
    27a0:	e6 0f       	add	r30, r22
    27a2:	f7 1f       	adc	r31, r23
    27a4:	98 01       	movw	r18, r16
    27a6:	be 01       	movw	r22, r28
    27a8:	cf 01       	movw	r24, r30
    27aa:	11 24       	eor	r1, r1
    27ac:	0f 91       	pop	r16
    27ae:	1f 91       	pop	r17
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <__muldi3_6>:
    27b6:	0e 94 93 14 	call	0x2926	; 0x2926 <__umulhisi3>
    27ba:	46 0f       	add	r20, r22
    27bc:	57 1f       	adc	r21, r23
    27be:	c8 1f       	adc	r28, r24
    27c0:	d9 1f       	adc	r29, r25
    27c2:	08 f4       	brcc	.+2      	; 0x27c6 <__muldi3_6+0x10>
    27c4:	31 96       	adiw	r30, 0x01	; 1
    27c6:	08 95       	ret

000027c8 <__umoddi3>:
    27c8:	68 94       	set
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <__udivdi3_umoddi3>

000027cc <__udivdi3>:
    27cc:	e8 94       	clt

000027ce <__udivdi3_umoddi3>:
    27ce:	8f 92       	push	r8
    27d0:	9f 92       	push	r9
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__udivmod64>
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	9f 90       	pop	r9
    27e0:	8f 90       	pop	r8
    27e2:	08 95       	ret

000027e4 <__udivmod64>:
    27e4:	88 24       	eor	r8, r8
    27e6:	99 24       	eor	r9, r9
    27e8:	f4 01       	movw	r30, r8
    27ea:	e4 01       	movw	r28, r8
    27ec:	b0 e4       	ldi	r27, 0x40	; 64
    27ee:	9f 93       	push	r25
    27f0:	aa 27       	eor	r26, r26
    27f2:	9a 15       	cp	r25, r10
    27f4:	8b 04       	cpc	r8, r11
    27f6:	9c 04       	cpc	r9, r12
    27f8:	ed 05       	cpc	r30, r13
    27fa:	fe 05       	cpc	r31, r14
    27fc:	cf 05       	cpc	r28, r15
    27fe:	d0 07       	cpc	r29, r16
    2800:	a1 07       	cpc	r26, r17
    2802:	98 f4       	brcc	.+38     	; 0x282a <__udivmod64+0x46>
    2804:	ad 2f       	mov	r26, r29
    2806:	dc 2f       	mov	r29, r28
    2808:	cf 2f       	mov	r28, r31
    280a:	fe 2f       	mov	r31, r30
    280c:	e9 2d       	mov	r30, r9
    280e:	98 2c       	mov	r9, r8
    2810:	89 2e       	mov	r8, r25
    2812:	98 2f       	mov	r25, r24
    2814:	87 2f       	mov	r24, r23
    2816:	76 2f       	mov	r23, r22
    2818:	65 2f       	mov	r22, r21
    281a:	54 2f       	mov	r21, r20
    281c:	43 2f       	mov	r20, r19
    281e:	32 2f       	mov	r19, r18
    2820:	22 27       	eor	r18, r18
    2822:	b8 50       	subi	r27, 0x08	; 8
    2824:	31 f7       	brne	.-52     	; 0x27f2 <__udivmod64+0xe>
    2826:	bf 91       	pop	r27
    2828:	27 c0       	rjmp	.+78     	; 0x2878 <__udivmod64+0x94>
    282a:	1b 2e       	mov	r1, r27
    282c:	bf 91       	pop	r27
    282e:	bb 27       	eor	r27, r27
    2830:	22 0f       	add	r18, r18
    2832:	33 1f       	adc	r19, r19
    2834:	44 1f       	adc	r20, r20
    2836:	55 1f       	adc	r21, r21
    2838:	66 1f       	adc	r22, r22
    283a:	77 1f       	adc	r23, r23
    283c:	88 1f       	adc	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	88 1c       	adc	r8, r8
    2842:	99 1c       	adc	r9, r9
    2844:	ee 1f       	adc	r30, r30
    2846:	ff 1f       	adc	r31, r31
    2848:	cc 1f       	adc	r28, r28
    284a:	dd 1f       	adc	r29, r29
    284c:	aa 1f       	adc	r26, r26
    284e:	bb 1f       	adc	r27, r27
    2850:	8a 14       	cp	r8, r10
    2852:	9b 04       	cpc	r9, r11
    2854:	ec 05       	cpc	r30, r12
    2856:	fd 05       	cpc	r31, r13
    2858:	ce 05       	cpc	r28, r14
    285a:	df 05       	cpc	r29, r15
    285c:	a0 07       	cpc	r26, r16
    285e:	b1 07       	cpc	r27, r17
    2860:	48 f0       	brcs	.+18     	; 0x2874 <__udivmod64+0x90>
    2862:	8a 18       	sub	r8, r10
    2864:	9b 08       	sbc	r9, r11
    2866:	ec 09       	sbc	r30, r12
    2868:	fd 09       	sbc	r31, r13
    286a:	ce 09       	sbc	r28, r14
    286c:	df 09       	sbc	r29, r15
    286e:	a0 0b       	sbc	r26, r16
    2870:	b1 0b       	sbc	r27, r17
    2872:	21 60       	ori	r18, 0x01	; 1
    2874:	1a 94       	dec	r1
    2876:	e1 f6       	brne	.-72     	; 0x2830 <__udivmod64+0x4c>
    2878:	2e f4       	brtc	.+10     	; 0x2884 <__udivmod64+0xa0>
    287a:	94 01       	movw	r18, r8
    287c:	af 01       	movw	r20, r30
    287e:	be 01       	movw	r22, r28
    2880:	cd 01       	movw	r24, r26
    2882:	00 0c       	add	r0, r0
    2884:	08 95       	ret

00002886 <__ashrdi3>:
    2886:	97 fb       	bst	r25, 7
    2888:	10 f8       	bld	r1, 0

0000288a <__lshrdi3>:
    288a:	16 94       	lsr	r1
    288c:	00 08       	sbc	r0, r0
    288e:	0f 93       	push	r16
    2890:	08 30       	cpi	r16, 0x08	; 8
    2892:	98 f0       	brcs	.+38     	; 0x28ba <__lshrdi3+0x30>
    2894:	08 50       	subi	r16, 0x08	; 8
    2896:	23 2f       	mov	r18, r19
    2898:	34 2f       	mov	r19, r20
    289a:	45 2f       	mov	r20, r21
    289c:	56 2f       	mov	r21, r22
    289e:	67 2f       	mov	r22, r23
    28a0:	78 2f       	mov	r23, r24
    28a2:	89 2f       	mov	r24, r25
    28a4:	90 2d       	mov	r25, r0
    28a6:	f4 cf       	rjmp	.-24     	; 0x2890 <__lshrdi3+0x6>
    28a8:	05 94       	asr	r0
    28aa:	97 95       	ror	r25
    28ac:	87 95       	ror	r24
    28ae:	77 95       	ror	r23
    28b0:	67 95       	ror	r22
    28b2:	57 95       	ror	r21
    28b4:	47 95       	ror	r20
    28b6:	37 95       	ror	r19
    28b8:	27 95       	ror	r18
    28ba:	0a 95       	dec	r16
    28bc:	aa f7       	brpl	.-22     	; 0x28a8 <__lshrdi3+0x1e>
    28be:	0f 91       	pop	r16
    28c0:	08 95       	ret

000028c2 <__adddi3>:
    28c2:	2a 0d       	add	r18, r10
    28c4:	3b 1d       	adc	r19, r11
    28c6:	4c 1d       	adc	r20, r12
    28c8:	5d 1d       	adc	r21, r13
    28ca:	6e 1d       	adc	r22, r14
    28cc:	7f 1d       	adc	r23, r15
    28ce:	80 1f       	adc	r24, r16
    28d0:	91 1f       	adc	r25, r17
    28d2:	08 95       	ret

000028d4 <__adddi3_s8>:
    28d4:	00 24       	eor	r0, r0
    28d6:	a7 fd       	sbrc	r26, 7
    28d8:	00 94       	com	r0
    28da:	2a 0f       	add	r18, r26
    28dc:	30 1d       	adc	r19, r0
    28de:	40 1d       	adc	r20, r0
    28e0:	50 1d       	adc	r21, r0
    28e2:	60 1d       	adc	r22, r0
    28e4:	70 1d       	adc	r23, r0
    28e6:	80 1d       	adc	r24, r0
    28e8:	90 1d       	adc	r25, r0
    28ea:	08 95       	ret

000028ec <__cmpdi2>:
    28ec:	2a 15       	cp	r18, r10
    28ee:	3b 05       	cpc	r19, r11
    28f0:	4c 05       	cpc	r20, r12
    28f2:	5d 05       	cpc	r21, r13
    28f4:	6e 05       	cpc	r22, r14
    28f6:	7f 05       	cpc	r23, r15
    28f8:	80 07       	cpc	r24, r16
    28fa:	91 07       	cpc	r25, r17
    28fc:	08 95       	ret

000028fe <__udivmodhi4>:
    28fe:	aa 1b       	sub	r26, r26
    2900:	bb 1b       	sub	r27, r27
    2902:	51 e1       	ldi	r21, 0x11	; 17
    2904:	07 c0       	rjmp	.+14     	; 0x2914 <__udivmodhi4_ep>

00002906 <__udivmodhi4_loop>:
    2906:	aa 1f       	adc	r26, r26
    2908:	bb 1f       	adc	r27, r27
    290a:	a6 17       	cp	r26, r22
    290c:	b7 07       	cpc	r27, r23
    290e:	10 f0       	brcs	.+4      	; 0x2914 <__udivmodhi4_ep>
    2910:	a6 1b       	sub	r26, r22
    2912:	b7 0b       	sbc	r27, r23

00002914 <__udivmodhi4_ep>:
    2914:	88 1f       	adc	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	5a 95       	dec	r21
    291a:	a9 f7       	brne	.-22     	; 0x2906 <__udivmodhi4_loop>
    291c:	80 95       	com	r24
    291e:	90 95       	com	r25
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	08 95       	ret

00002926 <__umulhisi3>:
    2926:	a2 9f       	mul	r26, r18
    2928:	b0 01       	movw	r22, r0
    292a:	b3 9f       	mul	r27, r19
    292c:	c0 01       	movw	r24, r0
    292e:	a3 9f       	mul	r26, r19
    2930:	70 0d       	add	r23, r0
    2932:	81 1d       	adc	r24, r1
    2934:	11 24       	eor	r1, r1
    2936:	91 1d       	adc	r25, r1
    2938:	b2 9f       	mul	r27, r18
    293a:	70 0d       	add	r23, r0
    293c:	81 1d       	adc	r24, r1
    293e:	11 24       	eor	r1, r1
    2940:	91 1d       	adc	r25, r1
    2942:	08 95       	ret

00002944 <malloc>:
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	82 30       	cpi	r24, 0x02	; 2
    294e:	91 05       	cpc	r25, r1
    2950:	10 f4       	brcc	.+4      	; 0x2956 <malloc+0x12>
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <__flp>
    295a:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <__flp+0x1>
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	a0 e0       	ldi	r26, 0x00	; 0
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	30 97       	sbiw	r30, 0x00	; 0
    2968:	19 f1       	breq	.+70     	; 0x29b0 <malloc+0x6c>
    296a:	40 81       	ld	r20, Z
    296c:	51 81       	ldd	r21, Z+1	; 0x01
    296e:	02 81       	ldd	r16, Z+2	; 0x02
    2970:	13 81       	ldd	r17, Z+3	; 0x03
    2972:	48 17       	cp	r20, r24
    2974:	59 07       	cpc	r21, r25
    2976:	c8 f0       	brcs	.+50     	; 0x29aa <malloc+0x66>
    2978:	84 17       	cp	r24, r20
    297a:	95 07       	cpc	r25, r21
    297c:	69 f4       	brne	.+26     	; 0x2998 <malloc+0x54>
    297e:	10 97       	sbiw	r26, 0x00	; 0
    2980:	31 f0       	breq	.+12     	; 0x298e <malloc+0x4a>
    2982:	12 96       	adiw	r26, 0x02	; 2
    2984:	0c 93       	st	X, r16
    2986:	12 97       	sbiw	r26, 0x02	; 2
    2988:	13 96       	adiw	r26, 0x03	; 3
    298a:	1c 93       	st	X, r17
    298c:	27 c0       	rjmp	.+78     	; 0x29dc <malloc+0x98>
    298e:	00 93 a5 01 	sts	0x01A5, r16	; 0x8001a5 <__flp>
    2992:	10 93 a6 01 	sts	0x01A6, r17	; 0x8001a6 <__flp+0x1>
    2996:	22 c0       	rjmp	.+68     	; 0x29dc <malloc+0x98>
    2998:	21 15       	cp	r18, r1
    299a:	31 05       	cpc	r19, r1
    299c:	19 f0       	breq	.+6      	; 0x29a4 <malloc+0x60>
    299e:	42 17       	cp	r20, r18
    29a0:	53 07       	cpc	r21, r19
    29a2:	18 f4       	brcc	.+6      	; 0x29aa <malloc+0x66>
    29a4:	9a 01       	movw	r18, r20
    29a6:	bd 01       	movw	r22, r26
    29a8:	ef 01       	movw	r28, r30
    29aa:	df 01       	movw	r26, r30
    29ac:	f8 01       	movw	r30, r16
    29ae:	db cf       	rjmp	.-74     	; 0x2966 <malloc+0x22>
    29b0:	21 15       	cp	r18, r1
    29b2:	31 05       	cpc	r19, r1
    29b4:	f9 f0       	breq	.+62     	; 0x29f4 <malloc+0xb0>
    29b6:	28 1b       	sub	r18, r24
    29b8:	39 0b       	sbc	r19, r25
    29ba:	24 30       	cpi	r18, 0x04	; 4
    29bc:	31 05       	cpc	r19, r1
    29be:	80 f4       	brcc	.+32     	; 0x29e0 <malloc+0x9c>
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	61 15       	cp	r22, r1
    29c6:	71 05       	cpc	r23, r1
    29c8:	21 f0       	breq	.+8      	; 0x29d2 <malloc+0x8e>
    29ca:	fb 01       	movw	r30, r22
    29cc:	93 83       	std	Z+3, r25	; 0x03
    29ce:	82 83       	std	Z+2, r24	; 0x02
    29d0:	04 c0       	rjmp	.+8      	; 0x29da <malloc+0x96>
    29d2:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <__flp+0x1>
    29d6:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <__flp>
    29da:	fe 01       	movw	r30, r28
    29dc:	32 96       	adiw	r30, 0x02	; 2
    29de:	44 c0       	rjmp	.+136    	; 0x2a68 <malloc+0x124>
    29e0:	fe 01       	movw	r30, r28
    29e2:	e2 0f       	add	r30, r18
    29e4:	f3 1f       	adc	r31, r19
    29e6:	81 93       	st	Z+, r24
    29e8:	91 93       	st	Z+, r25
    29ea:	22 50       	subi	r18, 0x02	; 2
    29ec:	31 09       	sbc	r19, r1
    29ee:	39 83       	std	Y+1, r19	; 0x01
    29f0:	28 83       	st	Y, r18
    29f2:	3a c0       	rjmp	.+116    	; 0x2a68 <malloc+0x124>
    29f4:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <__brkval>
    29f8:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <__brkval+0x1>
    29fc:	23 2b       	or	r18, r19
    29fe:	41 f4       	brne	.+16     	; 0x2a10 <malloc+0xcc>
    2a00:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2a04:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2a08:	30 93 a4 01 	sts	0x01A4, r19	; 0x8001a4 <__brkval+0x1>
    2a0c:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <__brkval>
    2a10:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2a14:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2a18:	21 15       	cp	r18, r1
    2a1a:	31 05       	cpc	r19, r1
    2a1c:	41 f4       	brne	.+16     	; 0x2a2e <malloc+0xea>
    2a1e:	2d b7       	in	r18, 0x3d	; 61
    2a20:	3e b7       	in	r19, 0x3e	; 62
    2a22:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2a26:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2a2a:	24 1b       	sub	r18, r20
    2a2c:	35 0b       	sbc	r19, r21
    2a2e:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <__brkval>
    2a32:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <__brkval+0x1>
    2a36:	e2 17       	cp	r30, r18
    2a38:	f3 07       	cpc	r31, r19
    2a3a:	a0 f4       	brcc	.+40     	; 0x2a64 <malloc+0x120>
    2a3c:	2e 1b       	sub	r18, r30
    2a3e:	3f 0b       	sbc	r19, r31
    2a40:	28 17       	cp	r18, r24
    2a42:	39 07       	cpc	r19, r25
    2a44:	78 f0       	brcs	.+30     	; 0x2a64 <malloc+0x120>
    2a46:	ac 01       	movw	r20, r24
    2a48:	4e 5f       	subi	r20, 0xFE	; 254
    2a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4c:	24 17       	cp	r18, r20
    2a4e:	35 07       	cpc	r19, r21
    2a50:	48 f0       	brcs	.+18     	; 0x2a64 <malloc+0x120>
    2a52:	4e 0f       	add	r20, r30
    2a54:	5f 1f       	adc	r21, r31
    2a56:	50 93 a4 01 	sts	0x01A4, r21	; 0x8001a4 <__brkval+0x1>
    2a5a:	40 93 a3 01 	sts	0x01A3, r20	; 0x8001a3 <__brkval>
    2a5e:	81 93       	st	Z+, r24
    2a60:	91 93       	st	Z+, r25
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <malloc+0x124>
    2a64:	e0 e0       	ldi	r30, 0x00	; 0
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	cf 01       	movw	r24, r30
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	08 95       	ret

00002a74 <free>:
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <free+0xa>
    2a7c:	81 c0       	rjmp	.+258    	; 0x2b80 <free+0x10c>
    2a7e:	fc 01       	movw	r30, r24
    2a80:	32 97       	sbiw	r30, 0x02	; 2
    2a82:	13 82       	std	Z+3, r1	; 0x03
    2a84:	12 82       	std	Z+2, r1	; 0x02
    2a86:	a0 91 a5 01 	lds	r26, 0x01A5	; 0x8001a5 <__flp>
    2a8a:	b0 91 a6 01 	lds	r27, 0x01A6	; 0x8001a6 <__flp+0x1>
    2a8e:	10 97       	sbiw	r26, 0x00	; 0
    2a90:	81 f4       	brne	.+32     	; 0x2ab2 <free+0x3e>
    2a92:	20 81       	ld	r18, Z
    2a94:	31 81       	ldd	r19, Z+1	; 0x01
    2a96:	82 0f       	add	r24, r18
    2a98:	93 1f       	adc	r25, r19
    2a9a:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <__brkval>
    2a9e:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <__brkval+0x1>
    2aa2:	28 17       	cp	r18, r24
    2aa4:	39 07       	cpc	r19, r25
    2aa6:	51 f5       	brne	.+84     	; 0x2afc <free+0x88>
    2aa8:	f0 93 a4 01 	sts	0x01A4, r31	; 0x8001a4 <__brkval+0x1>
    2aac:	e0 93 a3 01 	sts	0x01A3, r30	; 0x8001a3 <__brkval>
    2ab0:	67 c0       	rjmp	.+206    	; 0x2b80 <free+0x10c>
    2ab2:	ed 01       	movw	r28, r26
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	ce 17       	cp	r28, r30
    2aba:	df 07       	cpc	r29, r31
    2abc:	40 f4       	brcc	.+16     	; 0x2ace <free+0x5a>
    2abe:	4a 81       	ldd	r20, Y+2	; 0x02
    2ac0:	5b 81       	ldd	r21, Y+3	; 0x03
    2ac2:	9e 01       	movw	r18, r28
    2ac4:	41 15       	cp	r20, r1
    2ac6:	51 05       	cpc	r21, r1
    2ac8:	f1 f0       	breq	.+60     	; 0x2b06 <free+0x92>
    2aca:	ea 01       	movw	r28, r20
    2acc:	f5 cf       	rjmp	.-22     	; 0x2ab8 <free+0x44>
    2ace:	d3 83       	std	Z+3, r29	; 0x03
    2ad0:	c2 83       	std	Z+2, r28	; 0x02
    2ad2:	40 81       	ld	r20, Z
    2ad4:	51 81       	ldd	r21, Z+1	; 0x01
    2ad6:	84 0f       	add	r24, r20
    2ad8:	95 1f       	adc	r25, r21
    2ada:	c8 17       	cp	r28, r24
    2adc:	d9 07       	cpc	r29, r25
    2ade:	59 f4       	brne	.+22     	; 0x2af6 <free+0x82>
    2ae0:	88 81       	ld	r24, Y
    2ae2:	99 81       	ldd	r25, Y+1	; 0x01
    2ae4:	84 0f       	add	r24, r20
    2ae6:	95 1f       	adc	r25, r21
    2ae8:	02 96       	adiw	r24, 0x02	; 2
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	80 83       	st	Z, r24
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	9b 81       	ldd	r25, Y+3	; 0x03
    2af2:	93 83       	std	Z+3, r25	; 0x03
    2af4:	82 83       	std	Z+2, r24	; 0x02
    2af6:	21 15       	cp	r18, r1
    2af8:	31 05       	cpc	r19, r1
    2afa:	29 f4       	brne	.+10     	; 0x2b06 <free+0x92>
    2afc:	f0 93 a6 01 	sts	0x01A6, r31	; 0x8001a6 <__flp+0x1>
    2b00:	e0 93 a5 01 	sts	0x01A5, r30	; 0x8001a5 <__flp>
    2b04:	3d c0       	rjmp	.+122    	; 0x2b80 <free+0x10c>
    2b06:	e9 01       	movw	r28, r18
    2b08:	fb 83       	std	Y+3, r31	; 0x03
    2b0a:	ea 83       	std	Y+2, r30	; 0x02
    2b0c:	49 91       	ld	r20, Y+
    2b0e:	59 91       	ld	r21, Y+
    2b10:	c4 0f       	add	r28, r20
    2b12:	d5 1f       	adc	r29, r21
    2b14:	ec 17       	cp	r30, r28
    2b16:	fd 07       	cpc	r31, r29
    2b18:	61 f4       	brne	.+24     	; 0x2b32 <free+0xbe>
    2b1a:	80 81       	ld	r24, Z
    2b1c:	91 81       	ldd	r25, Z+1	; 0x01
    2b1e:	84 0f       	add	r24, r20
    2b20:	95 1f       	adc	r25, r21
    2b22:	02 96       	adiw	r24, 0x02	; 2
    2b24:	e9 01       	movw	r28, r18
    2b26:	99 83       	std	Y+1, r25	; 0x01
    2b28:	88 83       	st	Y, r24
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	9b 83       	std	Y+3, r25	; 0x03
    2b30:	8a 83       	std	Y+2, r24	; 0x02
    2b32:	e0 e0       	ldi	r30, 0x00	; 0
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	12 96       	adiw	r26, 0x02	; 2
    2b38:	8d 91       	ld	r24, X+
    2b3a:	9c 91       	ld	r25, X
    2b3c:	13 97       	sbiw	r26, 0x03	; 3
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	19 f0       	breq	.+6      	; 0x2b48 <free+0xd4>
    2b42:	fd 01       	movw	r30, r26
    2b44:	dc 01       	movw	r26, r24
    2b46:	f7 cf       	rjmp	.-18     	; 0x2b36 <free+0xc2>
    2b48:	8d 91       	ld	r24, X+
    2b4a:	9c 91       	ld	r25, X
    2b4c:	11 97       	sbiw	r26, 0x01	; 1
    2b4e:	9d 01       	movw	r18, r26
    2b50:	2e 5f       	subi	r18, 0xFE	; 254
    2b52:	3f 4f       	sbci	r19, 0xFF	; 255
    2b54:	82 0f       	add	r24, r18
    2b56:	93 1f       	adc	r25, r19
    2b58:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <__brkval>
    2b5c:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <__brkval+0x1>
    2b60:	28 17       	cp	r18, r24
    2b62:	39 07       	cpc	r19, r25
    2b64:	69 f4       	brne	.+26     	; 0x2b80 <free+0x10c>
    2b66:	30 97       	sbiw	r30, 0x00	; 0
    2b68:	29 f4       	brne	.+10     	; 0x2b74 <free+0x100>
    2b6a:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__flp+0x1>
    2b6e:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <__flp>
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <free+0x104>
    2b74:	13 82       	std	Z+3, r1	; 0x03
    2b76:	12 82       	std	Z+2, r1	; 0x02
    2b78:	b0 93 a4 01 	sts	0x01A4, r27	; 0x8001a4 <__brkval+0x1>
    2b7c:	a0 93 a3 01 	sts	0x01A3, r26	; 0x8001a3 <__brkval>
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	08 95       	ret

00002b86 <realloc>:
    2b86:	a0 e0       	ldi	r26, 0x00	; 0
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e9 ec       	ldi	r30, 0xC9	; 201
    2b8c:	f5 e1       	ldi	r31, 0x15	; 21
    2b8e:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x8>
    2b92:	ec 01       	movw	r28, r24
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	21 f4       	brne	.+8      	; 0x2ba0 <realloc+0x1a>
    2b98:	cb 01       	movw	r24, r22
    2b9a:	0e 94 a2 14 	call	0x2944	; 0x2944 <malloc>
    2b9e:	b4 c0       	rjmp	.+360    	; 0x2d08 <realloc+0x182>
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	e6 0f       	add	r30, r22
    2ba4:	f7 1f       	adc	r31, r23
    2ba6:	9c 01       	movw	r18, r24
    2ba8:	22 50       	subi	r18, 0x02	; 2
    2baa:	31 09       	sbc	r19, r1
    2bac:	e2 17       	cp	r30, r18
    2bae:	f3 07       	cpc	r31, r19
    2bb0:	08 f4       	brcc	.+2      	; 0x2bb4 <realloc+0x2e>
    2bb2:	a8 c0       	rjmp	.+336    	; 0x2d04 <realloc+0x17e>
    2bb4:	d9 01       	movw	r26, r18
    2bb6:	0d 91       	ld	r16, X+
    2bb8:	1c 91       	ld	r17, X
    2bba:	11 97       	sbiw	r26, 0x01	; 1
    2bbc:	06 17       	cp	r16, r22
    2bbe:	17 07       	cpc	r17, r23
    2bc0:	b0 f0       	brcs	.+44     	; 0x2bee <realloc+0x68>
    2bc2:	05 30       	cpi	r16, 0x05	; 5
    2bc4:	11 05       	cpc	r17, r1
    2bc6:	08 f4       	brcc	.+2      	; 0x2bca <realloc+0x44>
    2bc8:	9b c0       	rjmp	.+310    	; 0x2d00 <realloc+0x17a>
    2bca:	c8 01       	movw	r24, r16
    2bcc:	04 97       	sbiw	r24, 0x04	; 4
    2bce:	86 17       	cp	r24, r22
    2bd0:	97 07       	cpc	r25, r23
    2bd2:	08 f4       	brcc	.+2      	; 0x2bd6 <realloc+0x50>
    2bd4:	95 c0       	rjmp	.+298    	; 0x2d00 <realloc+0x17a>
    2bd6:	02 50       	subi	r16, 0x02	; 2
    2bd8:	11 09       	sbc	r17, r1
    2bda:	06 1b       	sub	r16, r22
    2bdc:	17 0b       	sbc	r17, r23
    2bde:	01 93       	st	Z+, r16
    2be0:	11 93       	st	Z+, r17
    2be2:	6d 93       	st	X+, r22
    2be4:	7c 93       	st	X, r23
    2be6:	cf 01       	movw	r24, r30
    2be8:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <free>
    2bec:	89 c0       	rjmp	.+274    	; 0x2d00 <realloc+0x17a>
    2bee:	5b 01       	movw	r10, r22
    2bf0:	a0 1a       	sub	r10, r16
    2bf2:	b1 0a       	sbc	r11, r17
    2bf4:	4c 01       	movw	r8, r24
    2bf6:	80 0e       	add	r8, r16
    2bf8:	91 1e       	adc	r9, r17
    2bfa:	a0 91 a5 01 	lds	r26, 0x01A5	; 0x8001a5 <__flp>
    2bfe:	b0 91 a6 01 	lds	r27, 0x01A6	; 0x8001a6 <__flp+0x1>
    2c02:	61 2c       	mov	r6, r1
    2c04:	71 2c       	mov	r7, r1
    2c06:	e1 2c       	mov	r14, r1
    2c08:	f1 2c       	mov	r15, r1
    2c0a:	10 97       	sbiw	r26, 0x00	; 0
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <realloc+0x8a>
    2c0e:	46 c0       	rjmp	.+140    	; 0x2c9c <realloc+0x116>
    2c10:	8d 91       	ld	r24, X+
    2c12:	9c 91       	ld	r25, X
    2c14:	11 97       	sbiw	r26, 0x01	; 1
    2c16:	a8 15       	cp	r26, r8
    2c18:	b9 05       	cpc	r27, r9
    2c1a:	b1 f5       	brne	.+108    	; 0x2c88 <realloc+0x102>
    2c1c:	6c 01       	movw	r12, r24
    2c1e:	42 e0       	ldi	r20, 0x02	; 2
    2c20:	c4 0e       	add	r12, r20
    2c22:	d1 1c       	adc	r13, r1
    2c24:	ca 14       	cp	r12, r10
    2c26:	db 04       	cpc	r13, r11
    2c28:	78 f1       	brcs	.+94     	; 0x2c88 <realloc+0x102>
    2c2a:	4c 01       	movw	r8, r24
    2c2c:	8a 18       	sub	r8, r10
    2c2e:	9b 08       	sbc	r9, r11
    2c30:	64 01       	movw	r12, r8
    2c32:	42 e0       	ldi	r20, 0x02	; 2
    2c34:	c4 0e       	add	r12, r20
    2c36:	d1 1c       	adc	r13, r1
    2c38:	12 96       	adiw	r26, 0x02	; 2
    2c3a:	bc 90       	ld	r11, X
    2c3c:	12 97       	sbiw	r26, 0x02	; 2
    2c3e:	13 96       	adiw	r26, 0x03	; 3
    2c40:	ac 91       	ld	r26, X
    2c42:	b5 e0       	ldi	r27, 0x05	; 5
    2c44:	cb 16       	cp	r12, r27
    2c46:	d1 04       	cpc	r13, r1
    2c48:	40 f0       	brcs	.+16     	; 0x2c5a <realloc+0xd4>
    2c4a:	b2 82       	std	Z+2, r11	; 0x02
    2c4c:	a3 83       	std	Z+3, r26	; 0x03
    2c4e:	91 82       	std	Z+1, r9	; 0x01
    2c50:	80 82       	st	Z, r8
    2c52:	d9 01       	movw	r26, r18
    2c54:	6d 93       	st	X+, r22
    2c56:	7c 93       	st	X, r23
    2c58:	09 c0       	rjmp	.+18     	; 0x2c6c <realloc+0xe6>
    2c5a:	0e 5f       	subi	r16, 0xFE	; 254
    2c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5e:	80 0f       	add	r24, r16
    2c60:	91 1f       	adc	r25, r17
    2c62:	f9 01       	movw	r30, r18
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
    2c68:	eb 2d       	mov	r30, r11
    2c6a:	fa 2f       	mov	r31, r26
    2c6c:	e1 14       	cp	r14, r1
    2c6e:	f1 04       	cpc	r15, r1
    2c70:	31 f0       	breq	.+12     	; 0x2c7e <realloc+0xf8>
    2c72:	d7 01       	movw	r26, r14
    2c74:	13 96       	adiw	r26, 0x03	; 3
    2c76:	fc 93       	st	X, r31
    2c78:	ee 93       	st	-X, r30
    2c7a:	12 97       	sbiw	r26, 0x02	; 2
    2c7c:	41 c0       	rjmp	.+130    	; 0x2d00 <realloc+0x17a>
    2c7e:	f0 93 a6 01 	sts	0x01A6, r31	; 0x8001a6 <__flp+0x1>
    2c82:	e0 93 a5 01 	sts	0x01A5, r30	; 0x8001a5 <__flp>
    2c86:	3c c0       	rjmp	.+120    	; 0x2d00 <realloc+0x17a>
    2c88:	68 16       	cp	r6, r24
    2c8a:	79 06       	cpc	r7, r25
    2c8c:	08 f4       	brcc	.+2      	; 0x2c90 <realloc+0x10a>
    2c8e:	3c 01       	movw	r6, r24
    2c90:	7d 01       	movw	r14, r26
    2c92:	12 96       	adiw	r26, 0x02	; 2
    2c94:	0d 90       	ld	r0, X+
    2c96:	bc 91       	ld	r27, X
    2c98:	a0 2d       	mov	r26, r0
    2c9a:	b7 cf       	rjmp	.-146    	; 0x2c0a <realloc+0x84>
    2c9c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <__brkval>
    2ca0:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <__brkval+0x1>
    2ca4:	88 16       	cp	r8, r24
    2ca6:	99 06       	cpc	r9, r25
    2ca8:	e1 f4       	brne	.+56     	; 0x2ce2 <realloc+0x15c>
    2caa:	66 16       	cp	r6, r22
    2cac:	77 06       	cpc	r7, r23
    2cae:	c8 f4       	brcc	.+50     	; 0x2ce2 <realloc+0x15c>
    2cb0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2cb4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	41 f4       	brne	.+16     	; 0x2ccc <realloc+0x146>
    2cbc:	8d b7       	in	r24, 0x3d	; 61
    2cbe:	9e b7       	in	r25, 0x3e	; 62
    2cc0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2cc4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2cc8:	84 1b       	sub	r24, r20
    2cca:	95 0b       	sbc	r25, r21
    2ccc:	e8 17       	cp	r30, r24
    2cce:	f9 07       	cpc	r31, r25
    2cd0:	c8 f4       	brcc	.+50     	; 0x2d04 <realloc+0x17e>
    2cd2:	f0 93 a4 01 	sts	0x01A4, r31	; 0x8001a4 <__brkval+0x1>
    2cd6:	e0 93 a3 01 	sts	0x01A3, r30	; 0x8001a3 <__brkval>
    2cda:	f9 01       	movw	r30, r18
    2cdc:	71 83       	std	Z+1, r23	; 0x01
    2cde:	60 83       	st	Z, r22
    2ce0:	0f c0       	rjmp	.+30     	; 0x2d00 <realloc+0x17a>
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	0e 94 a2 14 	call	0x2944	; 0x2944 <malloc>
    2ce8:	7c 01       	movw	r14, r24
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	59 f0       	breq	.+22     	; 0x2d04 <realloc+0x17e>
    2cee:	a8 01       	movw	r20, r16
    2cf0:	be 01       	movw	r22, r28
    2cf2:	0e 94 89 16 	call	0x2d12	; 0x2d12 <memcpy>
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <free>
    2cfc:	c7 01       	movw	r24, r14
    2cfe:	04 c0       	rjmp	.+8      	; 0x2d08 <realloc+0x182>
    2d00:	ce 01       	movw	r24, r28
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <realloc+0x182>
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	ee e0       	ldi	r30, 0x0E	; 14
    2d0e:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x8>

00002d12 <memcpy>:
    2d12:	fb 01       	movw	r30, r22
    2d14:	dc 01       	movw	r26, r24
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <memcpy+0xa>
    2d18:	01 90       	ld	r0, Z+
    2d1a:	0d 92       	st	X+, r0
    2d1c:	41 50       	subi	r20, 0x01	; 1
    2d1e:	50 40       	sbci	r21, 0x00	; 0
    2d20:	d8 f7       	brcc	.-10     	; 0x2d18 <memcpy+0x6>
    2d22:	08 95       	ret

00002d24 <__prologue_saves__>:
    2d24:	2f 92       	push	r2
    2d26:	3f 92       	push	r3
    2d28:	4f 92       	push	r4
    2d2a:	5f 92       	push	r5
    2d2c:	6f 92       	push	r6
    2d2e:	7f 92       	push	r7
    2d30:	8f 92       	push	r8
    2d32:	9f 92       	push	r9
    2d34:	af 92       	push	r10
    2d36:	bf 92       	push	r11
    2d38:	cf 92       	push	r12
    2d3a:	df 92       	push	r13
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	ca 1b       	sub	r28, r26
    2d4e:	db 0b       	sbc	r29, r27
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	09 94       	ijmp

00002d5c <__epilogue_restores__>:
    2d5c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d5e:	39 88       	ldd	r3, Y+17	; 0x11
    2d60:	48 88       	ldd	r4, Y+16	; 0x10
    2d62:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d64:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d66:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d68:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d6e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d70:	c8 84       	ldd	r12, Y+8	; 0x08
    2d72:	df 80       	ldd	r13, Y+7	; 0x07
    2d74:	ee 80       	ldd	r14, Y+6	; 0x06
    2d76:	fd 80       	ldd	r15, Y+5	; 0x05
    2d78:	0c 81       	ldd	r16, Y+4	; 0x04
    2d7a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d7c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d7e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d80:	ce 0f       	add	r28, r30
    2d82:	d1 1d       	adc	r29, r1
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	ed 01       	movw	r28, r26
    2d90:	08 95       	ret

00002d92 <_exit>:
    2d92:	f8 94       	cli

00002d94 <__stop_program>:
    2d94:	ff cf       	rjmp	.-2      	; 0x2d94 <__stop_program>
