
SuperCapBike-Firmware-ATMEGA328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00002348  000023dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800120  00800120  000023fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000242c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001572  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a67  00000000  00000000  00003ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000111a  00000000  00000000  00004549  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00005664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093a  00000000  00000000  00005abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000946  00000000  00000000  000063f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00006d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_7>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__vector_11>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_14>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_22>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_24>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	f0 00       	.word	0x00f0	; ????
      6a:	fa 00       	.word	0x00fa	; ????
      6c:	15 01       	movw	r2, r10
      6e:	39 01       	movw	r6, r18
      70:	5c 01       	movw	r10, r24
      72:	88 01       	movw	r16, r16
      74:	aa 01       	movw	r20, r20
      76:	cf 01       	movw	r24, r30

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e8 e4       	ldi	r30, 0x48	; 72
      8c:	f3 e2       	ldi	r31, 0x23	; 35
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a0 32       	cpi	r26, 0x20	; 32
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	21 e0       	ldi	r18, 0x01	; 1
      9c:	a0 e2       	ldi	r26, 0x20	; 32
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a7 35       	cpi	r26, 0x57	; 87
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
      ae:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <__vector_22>:

#include "../Headers/EEPROM.h"

volatile bool EEPROM_Ready = false; // Not used

ISR(EE_READY_vect){ // Not used
      b6:	1f 92       	push	r1
      b8:	0f 92       	push	r0
      ba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
      be:	0f 92       	push	r0
      c0:	11 24       	eor	r1, r1
      c2:	8f 93       	push	r24
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
	
	EEPROM_Ready = true;
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
		
      d2:	00 00       	nop
      d4:	df 91       	pop	r29
      d6:	cf 91       	pop	r28
      d8:	8f 91       	pop	r24
      da:	0f 90       	pop	r0
      dc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
      e0:	0f 90       	pop	r0
      e2:	1f 90       	pop	r1
      e4:	18 95       	reti

000000e6 <__vector_24>:

volatile bool TWI_Ready = true;

#define I2C_Status (TWSR & 0xF8)

ISR(TWI_vect){
      e6:	1f 92       	push	r1
      e8:	0f 92       	push	r0
      ea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
      ee:	0f 92       	push	r0
      f0:	11 24       	eor	r1, r1
      f2:	8f 93       	push	r24
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
	TWI_Ready = true;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <TWI_Ready>
}
     102:	00 00       	nop
     104:	df 91       	pop	r29
     106:	cf 91       	pop	r28
     108:	8f 91       	pop	r24
     10a:	0f 90       	pop	r0
     10c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     110:	0f 90       	pop	r0
     112:	1f 90       	pop	r1
     114:	18 95       	reti

00000116 <Init_TWI>:

TWI_Status Init_TWI(TWI_Data* I2C_Data, uint8_t Device_Address, uint8_t Register_Address, TWI_Modes Mode, uint8_t Data){
     116:	0f 93       	push	r16
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	00 d0       	rcall	.+0      	; 0x11e <Init_TWI+0x8>
     11e:	00 d0       	rcall	.+0      	; 0x120 <Init_TWI+0xa>
     120:	00 d0       	rcall	.+0      	; 0x122 <Init_TWI+0xc>
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
     126:	9a 83       	std	Y+2, r25	; 0x02
     128:	89 83       	std	Y+1, r24	; 0x01
     12a:	6b 83       	std	Y+3, r22	; 0x03
     12c:	4c 83       	std	Y+4, r20	; 0x04
     12e:	2d 83       	std	Y+5, r18	; 0x05
     130:	0e 83       	std	Y+6, r16	; 0x06
	
	if(I2C_Data == NULL){
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	9a 81       	ldd	r25, Y+2	; 0x02
     136:	89 2b       	or	r24, r25
     138:	11 f4       	brne	.+4      	; 0x13e <Init_TWI+0x28>
		return TWI_FAULT;
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	1e c0       	rjmp	.+60     	; 0x17a <Init_TWI+0x64>
	}
	
	I2C_Data->Device_Address = Device_Address;
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	9a 81       	ldd	r25, Y+2	; 0x02
     142:	2b 81       	ldd	r18, Y+3	; 0x03
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
	I2C_Data->Register_Address = Register_Address;
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	9a 81       	ldd	r25, Y+2	; 0x02
     14c:	2c 81       	ldd	r18, Y+4	; 0x04
     14e:	fc 01       	movw	r30, r24
     150:	21 83       	std	Z+1, r18	; 0x01
	I2C_Data->Mode = Mode;
     152:	89 81       	ldd	r24, Y+1	; 0x01
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	2d 81       	ldd	r18, Y+5	; 0x05
     158:	fc 01       	movw	r30, r24
     15a:	22 83       	std	Z+2, r18	; 0x02
	I2C_Data->Data = Data;
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	9a 81       	ldd	r25, Y+2	; 0x02
     160:	2e 81       	ldd	r18, Y+6	; 0x06
     162:	fc 01       	movw	r30, r24
     164:	23 83       	std	Z+3, r18	; 0x03
		
	TWSR = 0x00;
     166:	89 eb       	ldi	r24, 0xB9	; 185
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	fc 01       	movw	r30, r24
     16c:	10 82       	st	Z, r1
	TWBR = 72;
     16e:	88 eb       	ldi	r24, 0xB8	; 184
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	28 e4       	ldi	r18, 0x48	; 72
     174:	fc 01       	movw	r30, r24
     176:	20 83       	st	Z, r18
	
	return TWI_OK;
     178:	81 e0       	ldi	r24, 0x01	; 1
	
}
     17a:	26 96       	adiw	r28, 0x06	; 6
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	0f 91       	pop	r16
     18c:	08 95       	ret

0000018e <TWI_Handler>:

TWI_Status TWI_Handler(TWI_Data* I2C_Data){
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	00 d0       	rcall	.+0      	; 0x194 <TWI_Handler+0x6>
     194:	1f 92       	push	r1
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	9b 83       	std	Y+3, r25	; 0x03
     19c:	8a 83       	std	Y+2, r24	; 0x02
	
	if(!TWI_Ready){
     19e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TWI_Ready>
     1a2:	88 23       	and	r24, r24
     1a4:	11 f4       	brne	.+4      	; 0x1aa <TWI_Handler+0x1c>
		return TWI_OK;
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	01 c1       	rjmp	.+514    	; 0x3ac <TWI_Handler+0x21e>
	}
	
	TWI_Ready = false;
     1aa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <TWI_Ready>
	
	uint8_t Transmit_Code = (1 << TWINT) | (1 << TWEN) | (1 << TWIE); // Clear the interrupt flag, enable TWI and TWI interrupts
     1ae:	85 e8       	ldi	r24, 0x85	; 133
     1b0:	89 83       	std	Y+1, r24	; 0x01
	
	switch(I2C_State){
     1b2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <I2C_State>
     1b6:	88 2f       	mov	r24, r24
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	09 2e       	mov	r0, r25
     1bc:	00 0c       	add	r0, r0
     1be:	aa 0b       	sbc	r26, r26
     1c0:	bb 0b       	sbc	r27, r27
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	27 e0       	ldi	r18, 0x07	; 7
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	84 1b       	sub	r24, r20
     1cc:	95 0b       	sbc	r25, r21
     1ce:	28 17       	cp	r18, r24
     1d0:	39 07       	cpc	r19, r25
     1d2:	08 f4       	brcc	.+2      	; 0x1d6 <TWI_Handler+0x48>
     1d4:	ea c0       	rjmp	.+468    	; 0x3aa <TWI_Handler+0x21c>
     1d6:	8c 5c       	subi	r24, 0xCC	; 204
     1d8:	9f 4f       	sbci	r25, 0xFF	; 255
     1da:	fc 01       	movw	r30, r24
     1dc:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__tablejump2__>
		
		case TWI_STATE_START:
		
			I2C_State = SEND_ADDRESS_WRITE;
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
			
			TWCR = Transmit_Code | (1 << TWSTA); 
     1e6:	8c eb       	ldi	r24, 0xBC	; 188
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	29 81       	ldd	r18, Y+1	; 0x01
     1ec:	20 62       	ori	r18, 0x20	; 32
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18
			
			break;
     1f2:	db c0       	rjmp	.+438    	; 0x3aa <TWI_Handler+0x21c>
			
			
		case TWI_STATE_REPEATED_START:	
		
			switch(I2C_Status){
     1f4:	89 eb       	ldi	r24, 0xB9	; 185
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	88 2f       	mov	r24, r24
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	88 7f       	andi	r24, 0xF8	; 248
     202:	99 27       	eor	r25, r25
     204:	04 97       	sbiw	r24, 0x04	; 4
     206:	61 f4       	brne	.+24     	; 0x220 <TWI_Handler+0x92>
				
				case ADDRESSING_REGISTER:
				
					I2C_State = SEND_ADDRESS_READ;
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
					
					break;
     20e:	00 00       	nop
				
					return TWI_FAULT;
				
			}
		
			TWCR = Transmit_Code | (1 << TWSTA);
     210:	8c eb       	ldi	r24, 0xBC	; 188
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	29 81       	ldd	r18, Y+1	; 0x01
     216:	20 62       	ori	r18, 0x20	; 32
     218:	fc 01       	movw	r30, r24
     21a:	20 83       	st	Z, r18
		
			return TWI_OK;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	c6 c0       	rjmp	.+396    	; 0x3ac <TWI_Handler+0x21e>
					
					break;
				
				default:
				
					I2C_State = STOP;
     220:	87 e0       	ldi	r24, 0x07	; 7
     222:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
				
					return TWI_FAULT;
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	c1 c0       	rjmp	.+386    	; 0x3ac <TWI_Handler+0x21e>
		
			return TWI_OK;
				
		case SEND_ADDRESS_READ:
		
			switch(I2C_Status){
     22a:	89 eb       	ldi	r24, 0xB9	; 185
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	fc 01       	movw	r30, r24
     230:	80 81       	ld	r24, Z
     232:	88 2f       	mov	r24, r24
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	88 7f       	andi	r24, 0xF8	; 248
     238:	99 27       	eor	r25, r25
     23a:	40 97       	sbiw	r24, 0x10	; 16
     23c:	a9 f4       	brne	.+42     	; 0x268 <TWI_Handler+0xda>
				
				case REPEATED_START:
				
					I2C_State = READING;
     23e:	86 e0       	ldi	r24, 0x06	; 6
     240:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
					break;
     244:	00 00       	nop
					I2C_State = STOP;
					return TWI_FAULT;
				
			}
			
			TWDR = (I2C_Data->Device_Address << 1) + 1; 
     246:	8b eb       	ldi	r24, 0xBB	; 187
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	2a 81       	ldd	r18, Y+2	; 0x02
     24c:	3b 81       	ldd	r19, Y+3	; 0x03
     24e:	f9 01       	movw	r30, r18
     250:	20 81       	ld	r18, Z
     252:	22 0f       	add	r18, r18
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	fc 01       	movw	r30, r24
     258:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     25a:	8c eb       	ldi	r24, 0xBC	; 188
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	29 81       	ldd	r18, Y+1	; 0x01
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18
			return TWI_OK;
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	a2 c0       	rjmp	.+324    	; 0x3ac <TWI_Handler+0x21e>
					break;
			
				
				default:
				
					I2C_State = STOP;
     268:	87 e0       	ldi	r24, 0x07	; 7
     26a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
					return TWI_FAULT;
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	9d c0       	rjmp	.+314    	; 0x3ac <TWI_Handler+0x21e>
			TWCR = Transmit_Code;
			return TWI_OK;
		
		case SEND_ADDRESS_WRITE:
			
			switch(I2C_Status){
     272:	89 eb       	ldi	r24, 0xB9	; 185
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	fc 01       	movw	r30, r24
     278:	80 81       	ld	r24, Z
     27a:	88 2f       	mov	r24, r24
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	88 7f       	andi	r24, 0xF8	; 248
     280:	99 27       	eor	r25, r25
     282:	08 97       	sbiw	r24, 0x08	; 8
     284:	a1 f4       	brne	.+40     	; 0x2ae <TWI_Handler+0x120>
				
				case START:
				
					I2C_State = ADDRESSING_REGISTER;
     286:	84 e0       	ldi	r24, 0x04	; 4
     288:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
					break;
     28c:	00 00       	nop
					I2C_State = STOP;
					return TWI_FAULT;
				
			}
						
			TWDR = (I2C_Data->Device_Address << 1);
     28e:	8b eb       	ldi	r24, 0xBB	; 187
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	2a 81       	ldd	r18, Y+2	; 0x02
     294:	3b 81       	ldd	r19, Y+3	; 0x03
     296:	f9 01       	movw	r30, r18
     298:	20 81       	ld	r18, Z
     29a:	22 0f       	add	r18, r18
     29c:	fc 01       	movw	r30, r24
     29e:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     2a0:	8c eb       	ldi	r24, 0xBC	; 188
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	29 81       	ldd	r18, Y+1	; 0x01
     2a6:	fc 01       	movw	r30, r24
     2a8:	20 83       	st	Z, r18
			return TWI_OK;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	7f c0       	rjmp	.+254    	; 0x3ac <TWI_Handler+0x21e>
					I2C_State = ADDRESSING_REGISTER;
					break;
					
				default:
				
					I2C_State = STOP;
     2ae:	87 e0       	ldi	r24, 0x07	; 7
     2b0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
					return TWI_FAULT;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	7a c0       	rjmp	.+244    	; 0x3ac <TWI_Handler+0x21e>
			return TWI_OK;
			  
				
		case ADDRESSING_REGISTER:

			switch(I2C_Status){
     2b8:	89 eb       	ldi	r24, 0xB9	; 185
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fc 01       	movw	r30, r24
     2be:	80 81       	ld	r24, Z
     2c0:	88 2f       	mov	r24, r24
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	88 7f       	andi	r24, 0xF8	; 248
     2c6:	99 27       	eor	r25, r25
     2c8:	48 97       	sbiw	r24, 0x18	; 24
     2ca:	71 f4       	brne	.+28     	; 0x2e8 <TWI_Handler+0x15a>

				case WRITE_ADDRESS_ACK: // Same code for sending device address and register address

					if (I2C_Data->Mode == READING_MODE) {
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	9b 81       	ldd	r25, Y+3	; 0x03
     2d0:	fc 01       	movw	r30, r24
     2d2:	82 81       	ldd	r24, Z+2	; 0x02
     2d4:	88 23       	and	r24, r24
     2d6:	21 f4       	brne	.+8      	; 0x2e0 <TWI_Handler+0x152>
					
						I2C_State = REPEATED_START;
     2d8:	80 e1       	ldi	r24, 0x10	; 16
     2da:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
					
						I2C_State = WRITING;
					
					}
					
					break;
     2de:	09 c0       	rjmp	.+18     	; 0x2f2 <TWI_Handler+0x164>
					
						I2C_State = REPEATED_START;
					
					}else{
					
						I2C_State = WRITING;
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
					
					}
					
					break;
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <TWI_Handler+0x164>

				default:
	
					I2C_State = STOP;
     2e8:	87 e0       	ldi	r24, 0x07	; 7
     2ea:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
					
					return TWI_FAULT;
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	5d c0       	rjmp	.+186    	; 0x3ac <TWI_Handler+0x21e>
			}
		
			TWDR = I2C_Data->Register_Address;
     2f2:	8b eb       	ldi	r24, 0xBB	; 187
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	2a 81       	ldd	r18, Y+2	; 0x02
     2f8:	3b 81       	ldd	r19, Y+3	; 0x03
     2fa:	f9 01       	movw	r30, r18
     2fc:	21 81       	ldd	r18, Z+1	; 0x01
     2fe:	fc 01       	movw	r30, r24
     300:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     302:	8c eb       	ldi	r24, 0xBC	; 188
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	29 81       	ldd	r18, Y+1	; 0x01
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
			
			return TWI_OK;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	4e c0       	rjmp	.+156    	; 0x3ac <TWI_Handler+0x21e>

		
		case WRITING:
			
			switch(I2C_Status){
     310:	89 eb       	ldi	r24, 0xB9	; 185
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	fc 01       	movw	r30, r24
     316:	80 81       	ld	r24, Z
     318:	88 2f       	mov	r24, r24
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	88 7f       	andi	r24, 0xF8	; 248
     31e:	99 27       	eor	r25, r25
     320:	88 97       	sbiw	r24, 0x28	; 40
     322:	99 f4       	brne	.+38     	; 0x34a <TWI_Handler+0x1bc>
				
				case WRITE_DATA_ACK: // Same code for sending device address and register address
				
					I2C_State = STOP;
     324:	87 e0       	ldi	r24, 0x07	; 7
     326:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
					break;
     32a:	00 00       	nop
					
					return TWI_FAULT;
				
			}
			
			TWDR = I2C_Data->Data;
     32c:	8b eb       	ldi	r24, 0xBB	; 187
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	2a 81       	ldd	r18, Y+2	; 0x02
     332:	3b 81       	ldd	r19, Y+3	; 0x03
     334:	f9 01       	movw	r30, r18
     336:	23 81       	ldd	r18, Z+3	; 0x03
     338:	fc 01       	movw	r30, r24
     33a:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     33c:	8c eb       	ldi	r24, 0xBC	; 188
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	29 81       	ldd	r18, Y+1	; 0x01
     342:	fc 01       	movw	r30, r24
     344:	20 83       	st	Z, r18
			
			return TWI_OK;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	31 c0       	rjmp	.+98     	; 0x3ac <TWI_Handler+0x21e>
					I2C_State = STOP;
					break;
					
				default:
				
					I2C_State = STOP;
     34a:	87 e0       	ldi	r24, 0x07	; 7
     34c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>
					
					return TWI_FAULT;
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	2c c0       	rjmp	.+88     	; 0x3ac <TWI_Handler+0x21e>
			
			return TWI_OK;
		
		case READING:
						
			switch(I2C_Status){
     354:	89 eb       	ldi	r24, 0xB9	; 185
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	fc 01       	movw	r30, r24
     35a:	80 81       	ld	r24, Z
     35c:	88 2f       	mov	r24, r24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	88 7f       	andi	r24, 0xF8	; 248
     362:	99 27       	eor	r25, r25
     364:	80 34       	cpi	r24, 0x40	; 64
     366:	91 05       	cpc	r25, r1
     368:	21 f0       	breq	.+8      	; 0x372 <TWI_Handler+0x1e4>
     36a:	88 35       	cpi	r24, 0x58	; 88
     36c:	91 05       	cpc	r25, r1
     36e:	41 f0       	breq	.+16     	; 0x380 <TWI_Handler+0x1f2>
     370:	11 c0       	rjmp	.+34     	; 0x394 <TWI_Handler+0x206>
				
				case READ_ADDRESS_ACK:
				
					TWCR = Transmit_Code; // Ready to receive the 1 byte
     372:	8c eb       	ldi	r24, 0xBC	; 188
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	29 81       	ldd	r18, Y+1	; 0x01
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18
					
					return TWI_OK;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	16 c0       	rjmp	.+44     	; 0x3ac <TWI_Handler+0x21e>
					
				case BYTE_RECEIVED:
				
					I2C_Data->Data = TWDR;
     380:	8b eb       	ldi	r24, 0xBB	; 187
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	20 81       	ld	r18, Z
     388:	8a 81       	ldd	r24, Y+2	; 0x02
     38a:	9b 81       	ldd	r25, Y+3	; 0x03
     38c:	fc 01       	movw	r30, r24
     38e:	23 83       	std	Z+3, r18	; 0x03
					
					return TWI_OK;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	0c c0       	rjmp	.+24     	; 0x3ac <TWI_Handler+0x21e>

				default:
				
					I2C_State = STOP;
     394:	87 e0       	ldi	r24, 0x07	; 7
     396:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <I2C_State>

					return TWI_FAULT;
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	07 c0       	rjmp	.+14     	; 0x3ac <TWI_Handler+0x21e>
			
			break; // Just for correctness
			
		case STOP:
		
			TWCR = Transmit_Code | (1 << TWSTO);
     39e:	8c eb       	ldi	r24, 0xBC	; 188
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	29 81       	ldd	r18, Y+1	; 0x01
     3a4:	20 61       	ori	r18, 0x10	; 16
     3a6:	fc 01       	movw	r30, r24
     3a8:	20 83       	st	Z, r18

	}
	
	return TWI_OK; 
     3aa:	81 e0       	ldi	r24, 0x01	; 1
	
}
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	08 95       	ret

000003b8 <main>:

const uint32_t F_CLK = 16000000;
const uint32_t TC_CLK = 16000000; // TC_CLK can be asynchronous to F_CLK.

int main(void)
{
     3b8:	0f 93       	push	r16
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	6b 97       	sbiw	r28, 0x1b	; 27
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
	sei();
     3ce:	78 94       	sei
	
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2) | (1 << DDB3);
     3d0:	84 e2       	ldi	r24, 0x24	; 36
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	24 e2       	ldi	r18, 0x24	; 36
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	2f 60       	ori	r18, 0x0F	; 15
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
	DDRD |= (1 << DDD6)| (1 << DDD7) | (1 << DDD5) | (1 << DDD3);
     3e2:	8a e2       	ldi	r24, 0x2A	; 42
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	2a e2       	ldi	r18, 0x2A	; 42
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	f9 01       	movw	r30, r18
     3ec:	20 81       	ld	r18, Z
     3ee:	28 6e       	ori	r18, 0xE8	; 232
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
	
	Timers Timer1 = _8_bit2;
     3f4:	82 e0       	ldi	r24, 0x02	; 2
     3f6:	8a 83       	std	Y+2, r24	; 0x02
	
	Timer_Status Timer1_Set = Configure_Timer(100, u_MiliSeconds, Timer1);
     3f8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <u_MiliSeconds>
     3fc:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <u_MiliSeconds+0x1>
     400:	cc 01       	movw	r24, r24
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	2a 81       	ldd	r18, Y+2	; 0x02
     408:	ac 01       	movw	r20, r24
     40a:	bd 01       	movw	r22, r26
     40c:	84 e6       	ldi	r24, 0x64	; 100
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 ef 07 	call	0xfde	; 0xfde <Configure_Timer>
     414:	8b 83       	std	Y+3, r24	; 0x03
	
	Timers Timer2 = _8_bit1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	8c 83       	std	Y+4, r24	; 0x04
	
	Timer_Status Timer2_Set = Configure_Timer(1000, u_MicroSeconds, Timer2);
     41a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u_MicroSeconds>
     41e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <u_MicroSeconds+0x1>
     422:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <u_MicroSeconds+0x2>
     426:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <u_MicroSeconds+0x3>
     42a:	2c 81       	ldd	r18, Y+4	; 0x04
     42c:	ac 01       	movw	r20, r24
     42e:	bd 01       	movw	r22, r26
     430:	88 ee       	ldi	r24, 0xE8	; 232
     432:	93 e0       	ldi	r25, 0x03	; 3
     434:	0e 94 ef 07 	call	0xfde	; 0xfde <Configure_Timer>
     438:	8d 83       	std	Y+5, r24	; 0x05
	
	Timers Timer3 = _16_bit;
     43a:	1e 82       	std	Y+6, r1	; 0x06
	
	Timer_Status Timer3_Set = Configure_Timer(3, u_Seconds, Timer3);
     43c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <u_Seconds>
     440:	88 2f       	mov	r24, r24
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	a0 e0       	ldi	r26, 0x00	; 0
     446:	b0 e0       	ldi	r27, 0x00	; 0
     448:	2e 81       	ldd	r18, Y+6	; 0x06
     44a:	ac 01       	movw	r20, r24
     44c:	bd 01       	movw	r22, r26
     44e:	83 e0       	ldi	r24, 0x03	; 3
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 ef 07 	call	0xfde	; 0xfde <Configure_Timer>
     456:	8f 83       	std	Y+7, r24	; 0x07
	
	PWM_Setup Phase1;
	
	Phase1.Pin = PD5_OC0B;
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	88 87       	std	Y+8, r24	; 0x08
	
	Timer1_Set = Init_PWM(&Phase1);
     45c:	ce 01       	movw	r24, r28
     45e:	08 96       	adiw	r24, 0x08	; 8
     460:	0e 94 36 0c 	call	0x186c	; 0x186c <Init_PWM>
     464:	8b 83       	std	Y+3, r24	; 0x03
	
	Configure_PWM(&Phase1, 1, 50);
     466:	ce 01       	movw	r24, r28
     468:	08 96       	adiw	r24, 0x08	; 8
     46a:	42 e3       	ldi	r20, 0x32	; 50
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Configure_PWM>
	
	if(!Timer1_Set || !Timer2_Set || !Timer3_Set){
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	88 23       	and	r24, r24
     478:	31 f0       	breq	.+12     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     47a:	8d 81       	ldd	r24, Y+5	; 0x05
     47c:	88 23       	and	r24, r24
     47e:	19 f0       	breq	.+6      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     480:	8f 81       	ldd	r24, Y+7	; 0x07
     482:	88 23       	and	r24, r24
     484:	29 f4       	brne	.+10     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		PORTB = (1 << PORTB1);
     486:	85 e2       	ldi	r24, 0x25	; 37
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	22 e0       	ldi	r18, 0x02	; 2
     48c:	fc 01       	movw	r30, r24
     48e:	20 83       	st	Z, r18
	if(!W1 || !W2 || !R1){
		PORTB = (1 << PORTB1);
	}*/
	
	Ring_Buffer Buffer1;
	uint8_t Received_Data = 0;
     490:	1e 8a       	std	Y+22, r1	; 0x16
	
	Init_Buffer(&Buffer1, 10, 2);
     492:	ce 01       	movw	r24, r28
     494:	0b 96       	adiw	r24, 0x0b	; 11
     496:	42 e0       	ldi	r20, 0x02	; 2
     498:	6a e0       	ldi	r22, 0x0A	; 10
     49a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Init_Buffer>
	
	for(uint8_t i = 0; i <= 30; i++){
     49e:	19 82       	std	Y+1, r1	; 0x01
     4a0:	10 c0       	rjmp	.+32     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		Write_to_Buffer(&Buffer1, i);
     4a2:	ce 01       	movw	r24, r28
     4a4:	0b 96       	adiw	r24, 0x0b	; 11
     4a6:	69 81       	ldd	r22, Y+1	; 0x01
     4a8:	0e 94 21 03 	call	0x642	; 0x642 <Write_to_Buffer>
		Read_from_Buffer(&Buffer1, &Received_Data);
     4ac:	9e 01       	movw	r18, r28
     4ae:	2a 5e       	subi	r18, 0xEA	; 234
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	0b 96       	adiw	r24, 0x0b	; 11
     4b6:	b9 01       	movw	r22, r18
     4b8:	0e 94 c1 03 	call	0x782	; 0x782 <Read_from_Buffer>
	Ring_Buffer Buffer1;
	uint8_t Received_Data = 0;
	
	Init_Buffer(&Buffer1, 10, 2);
	
	for(uint8_t i = 0; i <= 30; i++){
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	8f 5f       	subi	r24, 0xFF	; 255
     4c0:	89 83       	std	Y+1, r24	; 0x01
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	8f 31       	cpi	r24, 0x1F	; 31
     4c6:	68 f3       	brcs	.-38     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		Write_to_Buffer(&Buffer1, i);
		Read_from_Buffer(&Buffer1, &Received_Data);
	}
	
	Free_Buffer(&Buffer1); // Buffer functionality Verified with debugger. More rigorous testing soon.
     4c8:	ce 01       	movw	r24, r28
     4ca:	0b 96       	adiw	r24, 0x0b	; 11
     4cc:	0e 94 a2 03 	call	0x744	; 0x744 <Free_Buffer>
	
	TWI_Data MCP23017;
	
	Init_TWI(&MCP23017, MCP23017_Address, 0x00, WRITING_MODE, 0b10101010);
     4d0:	ce 01       	movw	r24, r28
     4d2:	47 96       	adiw	r24, 0x17	; 23
     4d4:	0a ea       	ldi	r16, 0xAA	; 170
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	40 e0       	ldi	r20, 0x00	; 0
     4da:	60 e2       	ldi	r22, 0x20	; 32
     4dc:	0e 94 8b 00 	call	0x116	; 0x116 <Init_TWI>
	
	while (1 == true){
		
		if(TWI_Ready){
     4e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TWI_Ready>
     4e4:	88 23       	and	r24, r24
     4e6:	e1 f3       	breq	.-8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
			
			TWI_Handler(&MCP23017);
     4e8:	ce 01       	movw	r24, r28
     4ea:	47 96       	adiw	r24, 0x17	; 23
     4ec:	0e 94 c7 00 	call	0x18e	; 0x18e <TWI_Handler>
			
		}

	}
     4f0:	f7 cf       	rjmp	.-18     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>

000004f2 <Init_Buffer>:
 */ 

#include "../Headers/Includes.h"
#include "../Headers/Dynamic_Ring_Buffer.h"

Ring_Buffer_Status Init_Buffer(Ring_Buffer* Ring_Buffer, uint8_t Size, uint8_t Increment){
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <Init_Buffer+0x6>
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <Init_Buffer+0x8>
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <Init_Buffer+0xa>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	9c 83       	std	Y+4, r25	; 0x04
     502:	8b 83       	std	Y+3, r24	; 0x03
     504:	6d 83       	std	Y+5, r22	; 0x05
     506:	4e 83       	std	Y+6, r20	; 0x06
	
	if(Size == 0 
     508:	8d 81       	ldd	r24, Y+5	; 0x05
     50a:	88 23       	and	r24, r24
     50c:	19 f0       	breq	.+6      	; 0x514 <Init_Buffer+0x22>
	|| Increment == 0){
     50e:	8e 81       	ldd	r24, Y+6	; 0x06
     510:	88 23       	and	r24, r24
     512:	11 f4       	brne	.+4      	; 0x518 <Init_Buffer+0x26>
		return BUFFER_FAULT;
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	3a c0       	rjmp	.+116    	; 0x58c <Init_Buffer+0x9a>
	}
	
	uint8_t* p = (uint8_t*)malloc(Size);
     518:	8d 81       	ldd	r24, Y+5	; 0x05
     51a:	88 2f       	mov	r24, r24
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <malloc>
     522:	9a 83       	std	Y+2, r25	; 0x02
     524:	89 83       	std	Y+1, r24	; 0x01
	
	if(p == NULL){
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	9a 81       	ldd	r25, Y+2	; 0x02
     52a:	89 2b       	or	r24, r25
     52c:	11 f4       	brne	.+4      	; 0x532 <Init_Buffer+0x40>
		return BUFFER_FAULT;
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	2d c0       	rjmp	.+90     	; 0x58c <Init_Buffer+0x9a>
	}
	
	Ring_Buffer->Buffer = p;
     532:	8b 81       	ldd	r24, Y+3	; 0x03
     534:	9c 81       	ldd	r25, Y+4	; 0x04
     536:	29 81       	ldd	r18, Y+1	; 0x01
     538:	3a 81       	ldd	r19, Y+2	; 0x02
     53a:	fc 01       	movw	r30, r24
     53c:	31 83       	std	Z+1, r19	; 0x01
     53e:	20 83       	st	Z, r18
		
	Ring_Buffer->Read_Index = 0;
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	fc 01       	movw	r30, r24
     546:	12 82       	std	Z+2, r1	; 0x02
	Ring_Buffer->Write_Index = 0;
     548:	8b 81       	ldd	r24, Y+3	; 0x03
     54a:	9c 81       	ldd	r25, Y+4	; 0x04
     54c:	fc 01       	movw	r30, r24
     54e:	13 82       	std	Z+3, r1	; 0x03
	
	Ring_Buffer->Size = Size;
     550:	8d 81       	ldd	r24, Y+5	; 0x05
     552:	28 2f       	mov	r18, r24
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	8b 81       	ldd	r24, Y+3	; 0x03
     558:	9c 81       	ldd	r25, Y+4	; 0x04
     55a:	fc 01       	movw	r30, r24
     55c:	35 83       	std	Z+5, r19	; 0x05
     55e:	24 83       	std	Z+4, r18	; 0x04
	Ring_Buffer->Increment = Increment;
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	9c 81       	ldd	r25, Y+4	; 0x04
     564:	2e 81       	ldd	r18, Y+6	; 0x06
     566:	fc 01       	movw	r30, r24
     568:	26 83       	std	Z+6, r18	; 0x06
	
	Ring_Buffer->Adjusted_Size = 0;
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	9c 81       	ldd	r25, Y+4	; 0x04
     56e:	fc 01       	movw	r30, r24
     570:	17 82       	std	Z+7, r1	; 0x07
	Ring_Buffer->Wrap_Index = 0;
     572:	8b 81       	ldd	r24, Y+3	; 0x03
     574:	9c 81       	ldd	r25, Y+4	; 0x04
     576:	fc 01       	movw	r30, r24
     578:	10 86       	std	Z+8, r1	; 0x08
	Ring_Buffer->Overflow_Index = 0;
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	9c 81       	ldd	r25, Y+4	; 0x04
     57e:	fc 01       	movw	r30, r24
     580:	11 86       	std	Z+9, r1	; 0x09
	
	Ring_Buffer->Indexing_State = NONE;
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	9c 81       	ldd	r25, Y+4	; 0x04
     586:	fc 01       	movw	r30, r24
     588:	12 86       	std	Z+10, r1	; 0x0a

	return BUFFER_OK;
     58a:	81 e0       	ldi	r24, 0x01	; 1
	
}
     58c:	26 96       	adiw	r28, 0x06	; 6
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <Increase_Buffer>:

Ring_Buffer_Status Increase_Buffer(Ring_Buffer* Ring_Buffer){
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <Increase_Buffer+0x6>
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <Increase_Buffer+0x8>
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <Increase_Buffer+0xa>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	9e 83       	std	Y+6, r25	; 0x06
     5ae:	8d 83       	std	Y+5, r24	; 0x05
	
	if(Ring_Buffer == NULL){
     5b0:	8d 81       	ldd	r24, Y+5	; 0x05
     5b2:	9e 81       	ldd	r25, Y+6	; 0x06
     5b4:	89 2b       	or	r24, r25
     5b6:	11 f4       	brne	.+4      	; 0x5bc <Increase_Buffer+0x1e>
		return BUFFER_FAULT;
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	3a c0       	rjmp	.+116    	; 0x630 <Increase_Buffer+0x92>
	}
	
	uint8_t RB_Size = Ring_Buffer->Size;
     5bc:	8d 81       	ldd	r24, Y+5	; 0x05
     5be:	9e 81       	ldd	r25, Y+6	; 0x06
     5c0:	fc 01       	movw	r30, r24
     5c2:	84 81       	ldd	r24, Z+4	; 0x04
     5c4:	95 81       	ldd	r25, Z+5	; 0x05
     5c6:	89 83       	std	Y+1, r24	; 0x01
	uint8_t RB_Increment = Ring_Buffer->Increment;
     5c8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ca:	9e 81       	ldd	r25, Y+6	; 0x06
     5cc:	fc 01       	movw	r30, r24
     5ce:	86 81       	ldd	r24, Z+6	; 0x06
     5d0:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t* p = (uint8_t*)realloc(Ring_Buffer->Buffer, RB_Size + RB_Increment); // Opted for safe re-allocation
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	28 2f       	mov	r18, r24
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	88 2f       	mov	r24, r24
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	82 0f       	add	r24, r18
     5e0:	93 1f       	adc	r25, r19
     5e2:	9c 01       	movw	r18, r24
     5e4:	8d 81       	ldd	r24, Y+5	; 0x05
     5e6:	9e 81       	ldd	r25, Y+6	; 0x06
     5e8:	fc 01       	movw	r30, r24
     5ea:	80 81       	ld	r24, Z
     5ec:	91 81       	ldd	r25, Z+1	; 0x01
     5ee:	b9 01       	movw	r22, r18
     5f0:	0e 94 9c 10 	call	0x2138	; 0x2138 <realloc>
     5f4:	9c 83       	std	Y+4, r25	; 0x04
     5f6:	8b 83       	std	Y+3, r24	; 0x03
	
	if(p == NULL){
     5f8:	8b 81       	ldd	r24, Y+3	; 0x03
     5fa:	9c 81       	ldd	r25, Y+4	; 0x04
     5fc:	89 2b       	or	r24, r25
     5fe:	11 f4       	brne	.+4      	; 0x604 <Increase_Buffer+0x66>
		return BUFFER_FAULT;
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	16 c0       	rjmp	.+44     	; 0x630 <Increase_Buffer+0x92>
	}
	
	Ring_Buffer->Buffer = p;
     604:	8d 81       	ldd	r24, Y+5	; 0x05
     606:	9e 81       	ldd	r25, Y+6	; 0x06
     608:	2b 81       	ldd	r18, Y+3	; 0x03
     60a:	3c 81       	ldd	r19, Y+4	; 0x04
     60c:	fc 01       	movw	r30, r24
     60e:	31 83       	std	Z+1, r19	; 0x01
     610:	20 83       	st	Z, r18
	Ring_Buffer->Size = RB_Size + RB_Increment;
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	28 2f       	mov	r18, r24
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	88 2f       	mov	r24, r24
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	82 0f       	add	r24, r18
     620:	93 1f       	adc	r25, r19
     622:	9c 01       	movw	r18, r24
     624:	8d 81       	ldd	r24, Y+5	; 0x05
     626:	9e 81       	ldd	r25, Y+6	; 0x06
     628:	fc 01       	movw	r30, r24
     62a:	35 83       	std	Z+5, r19	; 0x05
     62c:	24 83       	std	Z+4, r18	; 0x04
	
	return BUFFER_OK;
     62e:	81 e0       	ldi	r24, 0x01	; 1
	
}
     630:	26 96       	adiw	r28, 0x06	; 6
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <Write_to_Buffer>:

Ring_Buffer_Status Write_to_Buffer(Ring_Buffer* Ring_Buffer, uint8_t Data){
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	00 d0       	rcall	.+0      	; 0x648 <Write_to_Buffer+0x6>
     648:	00 d0       	rcall	.+0      	; 0x64a <Write_to_Buffer+0x8>
     64a:	00 d0       	rcall	.+0      	; 0x64c <Write_to_Buffer+0xa>
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	9d 83       	std	Y+5, r25	; 0x05
     652:	8c 83       	std	Y+4, r24	; 0x04
     654:	6e 83       	std	Y+6, r22	; 0x06
	
	uint8_t RB_Write_Index = Ring_Buffer->Write_Index;
     656:	8c 81       	ldd	r24, Y+4	; 0x04
     658:	9d 81       	ldd	r25, Y+5	; 0x05
     65a:	fc 01       	movw	r30, r24
     65c:	83 81       	ldd	r24, Z+3	; 0x03
     65e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t RB_Read_Index = Ring_Buffer->Read_Index;
     660:	8c 81       	ldd	r24, Y+4	; 0x04
     662:	9d 81       	ldd	r25, Y+5	; 0x05
     664:	fc 01       	movw	r30, r24
     666:	82 81       	ldd	r24, Z+2	; 0x02
     668:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t RB_Size = Ring_Buffer->Size;
     66a:	8c 81       	ldd	r24, Y+4	; 0x04
     66c:	9d 81       	ldd	r25, Y+5	; 0x05
     66e:	fc 01       	movw	r30, r24
     670:	84 81       	ldd	r24, Z+4	; 0x04
     672:	95 81       	ldd	r25, Z+5	; 0x05
     674:	8b 83       	std	Y+3, r24	; 0x03
	
	if(RB_Write_Index == RB_Size){ 
     676:	99 81       	ldd	r25, Y+1	; 0x01
     678:	8b 81       	ldd	r24, Y+3	; 0x03
     67a:	98 17       	cp	r25, r24
     67c:	49 f4       	brne	.+18     	; 0x690 <Write_to_Buffer+0x4e>
		
		Ring_Buffer->Write_Index = 0;
     67e:	8c 81       	ldd	r24, Y+4	; 0x04
     680:	9d 81       	ldd	r25, Y+5	; 0x05
     682:	fc 01       	movw	r30, r24
     684:	13 82       	std	Z+3, r1	; 0x03
		Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
     686:	8c 81       	ldd	r24, Y+4	; 0x04
     688:	9d 81       	ldd	r25, Y+5	; 0x05
     68a:	21 e0       	ldi	r18, 0x01	; 1
     68c:	fc 01       	movw	r30, r24
     68e:	22 87       	std	Z+10, r18	; 0x0a
		
	}
	
	if( Ring_Buffer->Indexing_State == WRITE_LEADS_READ && 
     690:	8c 81       	ldd	r24, Y+4	; 0x04
     692:	9d 81       	ldd	r25, Y+5	; 0x05
     694:	fc 01       	movw	r30, r24
     696:	82 85       	ldd	r24, Z+10	; 0x0a
     698:	81 30       	cpi	r24, 0x01	; 1
     69a:	81 f5       	brne	.+96     	; 0x6fc <Write_to_Buffer+0xba>
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	98 17       	cp	r25, r24
     6a2:	61 f5       	brne	.+88     	; 0x6fc <Write_to_Buffer+0xba>
	RB_Read_Index == RB_Write_Index){
		
		if(Increase_Buffer(Ring_Buffer) == 1){
     6a4:	8c 81       	ldd	r24, Y+4	; 0x04
     6a6:	9d 81       	ldd	r25, Y+5	; 0x05
     6a8:	0e 94 cf 02 	call	0x59e	; 0x59e <Increase_Buffer>
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	21 f5       	brne	.+72     	; 0x6f8 <Write_to_Buffer+0xb6>
			
			Ring_Buffer->Indexing_State = OVERFLOW;
     6b0:	8c 81       	ldd	r24, Y+4	; 0x04
     6b2:	9d 81       	ldd	r25, Y+5	; 0x05
     6b4:	22 e0       	ldi	r18, 0x02	; 2
     6b6:	fc 01       	movw	r30, r24
     6b8:	22 87       	std	Z+10, r18	; 0x0a
			
			Ring_Buffer->Overflow_Index = RB_Write_Index;
     6ba:	8c 81       	ldd	r24, Y+4	; 0x04
     6bc:	9d 81       	ldd	r25, Y+5	; 0x05
     6be:	29 81       	ldd	r18, Y+1	; 0x01
     6c0:	fc 01       	movw	r30, r24
     6c2:	21 87       	std	Z+9, r18	; 0x09
			
			Ring_Buffer->Adjusted_Size = RB_Size;
     6c4:	8c 81       	ldd	r24, Y+4	; 0x04
     6c6:	9d 81       	ldd	r25, Y+5	; 0x05
     6c8:	2b 81       	ldd	r18, Y+3	; 0x03
     6ca:	fc 01       	movw	r30, r24
     6cc:	27 83       	std	Z+7, r18	; 0x07
			
			Ring_Buffer->Wrap_Index = RB_Size;
     6ce:	8c 81       	ldd	r24, Y+4	; 0x04
     6d0:	9d 81       	ldd	r25, Y+5	; 0x05
     6d2:	2b 81       	ldd	r18, Y+3	; 0x03
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 87       	std	Z+8, r18	; 0x08
	
			Ring_Buffer->Write_Index = Ring_Buffer->Size - Ring_Buffer->Increment;
     6d8:	8c 81       	ldd	r24, Y+4	; 0x04
     6da:	9d 81       	ldd	r25, Y+5	; 0x05
     6dc:	fc 01       	movw	r30, r24
     6de:	84 81       	ldd	r24, Z+4	; 0x04
     6e0:	95 81       	ldd	r25, Z+5	; 0x05
     6e2:	28 2f       	mov	r18, r24
     6e4:	8c 81       	ldd	r24, Y+4	; 0x04
     6e6:	9d 81       	ldd	r25, Y+5	; 0x05
     6e8:	fc 01       	movw	r30, r24
     6ea:	86 81       	ldd	r24, Z+6	; 0x06
     6ec:	28 1b       	sub	r18, r24
     6ee:	8c 81       	ldd	r24, Y+4	; 0x04
     6f0:	9d 81       	ldd	r25, Y+5	; 0x05
     6f2:	fc 01       	movw	r30, r24
     6f4:	23 83       	std	Z+3, r18	; 0x03
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <Write_to_Buffer+0xba>
			
		}else{
			
			return BUFFER_FAULT;
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	1b c0       	rjmp	.+54     	; 0x732 <Write_to_Buffer+0xf0>
			
		}
		
	}
	
	Ring_Buffer->Buffer[Ring_Buffer->Write_Index] = Data;
     6fc:	8c 81       	ldd	r24, Y+4	; 0x04
     6fe:	9d 81       	ldd	r25, Y+5	; 0x05
     700:	fc 01       	movw	r30, r24
     702:	20 81       	ld	r18, Z
     704:	31 81       	ldd	r19, Z+1	; 0x01
     706:	8c 81       	ldd	r24, Y+4	; 0x04
     708:	9d 81       	ldd	r25, Y+5	; 0x05
     70a:	fc 01       	movw	r30, r24
     70c:	83 81       	ldd	r24, Z+3	; 0x03
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	82 0f       	add	r24, r18
     714:	93 1f       	adc	r25, r19
     716:	2e 81       	ldd	r18, Y+6	; 0x06
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18
	Ring_Buffer->Write_Index++;
     71c:	8c 81       	ldd	r24, Y+4	; 0x04
     71e:	9d 81       	ldd	r25, Y+5	; 0x05
     720:	fc 01       	movw	r30, r24
     722:	83 81       	ldd	r24, Z+3	; 0x03
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	28 0f       	add	r18, r24
     728:	8c 81       	ldd	r24, Y+4	; 0x04
     72a:	9d 81       	ldd	r25, Y+5	; 0x05
     72c:	fc 01       	movw	r30, r24
     72e:	23 83       	std	Z+3, r18	; 0x03
	
	return BUFFER_OK;
     730:	81 e0       	ldi	r24, 0x01	; 1
	
}
     732:	26 96       	adiw	r28, 0x06	; 6
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	08 95       	ret

00000744 <Free_Buffer>:

Ring_Buffer_Status Free_Buffer(Ring_Buffer* Ring_Buffer){
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	00 d0       	rcall	.+0      	; 0x74a <Free_Buffer+0x6>
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	9a 83       	std	Y+2, r25	; 0x02
     750:	89 83       	std	Y+1, r24	; 0x01
	
	if(Ring_Buffer == NULL){
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	9a 81       	ldd	r25, Y+2	; 0x02
     756:	89 2b       	or	r24, r25
     758:	11 f4       	brne	.+4      	; 0x75e <Free_Buffer+0x1a>
		return BUFFER_FAULT;
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0d c0       	rjmp	.+26     	; 0x778 <Free_Buffer+0x34>
	}
	
	free(Ring_Buffer->Buffer);
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	9a 81       	ldd	r25, Y+2	; 0x02
     762:	fc 01       	movw	r30, r24
     764:	80 81       	ld	r24, Z
     766:	91 81       	ldd	r25, Z+1	; 0x01
     768:	0e 94 13 10 	call	0x2026	; 0x2026 <free>
	
	Ring_Buffer->Buffer = NULL;
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	9a 81       	ldd	r25, Y+2	; 0x02
     770:	fc 01       	movw	r30, r24
     772:	11 82       	std	Z+1, r1	; 0x01
     774:	10 82       	st	Z, r1
	
	return BUFFER_OK;
     776:	81 e0       	ldi	r24, 0x01	; 1
	
}
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <Read_from_Buffer>:


Ring_Buffer_Status Read_from_Buffer(Ring_Buffer* Ring_Buffer, uint8_t* Outgoing_Data){
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <Read_from_Buffer+0x6>
     788:	00 d0       	rcall	.+0      	; 0x78a <Read_from_Buffer+0x8>
     78a:	1f 92       	push	r1
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	9b 83       	std	Y+3, r25	; 0x03
     792:	8a 83       	std	Y+2, r24	; 0x02
     794:	7d 83       	std	Y+5, r23	; 0x05
     796:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t RB_Read_Index = Ring_Buffer->Read_Index;
     798:	8a 81       	ldd	r24, Y+2	; 0x02
     79a:	9b 81       	ldd	r25, Y+3	; 0x03
     79c:	fc 01       	movw	r30, r24
     79e:	82 81       	ldd	r24, Z+2	; 0x02
     7a0:	89 83       	std	Y+1, r24	; 0x01
	
	if (Ring_Buffer->Indexing_State == NONE
     7a2:	8a 81       	ldd	r24, Y+2	; 0x02
     7a4:	9b 81       	ldd	r25, Y+3	; 0x03
     7a6:	fc 01       	movw	r30, r24
     7a8:	82 85       	ldd	r24, Z+10	; 0x0a
     7aa:	88 23       	and	r24, r24
     7ac:	61 f4       	brne	.+24     	; 0x7c6 <Read_from_Buffer+0x44>
	 && Ring_Buffer->Read_Index == Ring_Buffer->Write_Index) {
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	9b 81       	ldd	r25, Y+3	; 0x03
     7b2:	fc 01       	movw	r30, r24
     7b4:	22 81       	ldd	r18, Z+2	; 0x02
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ba:	fc 01       	movw	r30, r24
     7bc:	83 81       	ldd	r24, Z+3	; 0x03
     7be:	28 17       	cp	r18, r24
     7c0:	11 f4       	brne	.+4      	; 0x7c6 <Read_from_Buffer+0x44>
		
		return BUFFER_EMPTY;
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	92 c0       	rjmp	.+292    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
		
	}
	
	*Outgoing_Data = Ring_Buffer->Buffer[Ring_Buffer->Read_Index];
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 81       	ld	r18, Z
     7ce:	31 81       	ldd	r19, Z+1	; 0x01
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	9b 81       	ldd	r25, Y+3	; 0x03
     7d4:	fc 01       	movw	r30, r24
     7d6:	82 81       	ldd	r24, Z+2	; 0x02
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	82 0f       	add	r24, r18
     7de:	93 1f       	adc	r25, r19
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 81       	ld	r18, Z
     7e4:	8c 81       	ldd	r24, Y+4	; 0x04
     7e6:	9d 81       	ldd	r25, Y+5	; 0x05
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18
	
	switch(Ring_Buffer->Indexing_State){
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	9b 81       	ldd	r25, Y+3	; 0x03
     7f0:	fc 01       	movw	r30, r24
     7f2:	82 85       	ldd	r24, Z+10	; 0x0a
     7f4:	88 2f       	mov	r24, r24
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	91 05       	cpc	r25, r1
     7fc:	89 f0       	breq	.+34     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7fe:	82 30       	cpi	r24, 0x02	; 2
     800:	91 05       	cpc	r25, r1
     802:	51 f1       	breq	.+84     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     804:	89 2b       	or	r24, r25
     806:	09 f0       	breq	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	5f c0       	rjmp	.+190    	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
		
		case NONE:
			
			Ring_Buffer->Read_Index++;
     80a:	8a 81       	ldd	r24, Y+2	; 0x02
     80c:	9b 81       	ldd	r25, Y+3	; 0x03
     80e:	fc 01       	movw	r30, r24
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	28 0f       	add	r18, r24
     816:	8a 81       	ldd	r24, Y+2	; 0x02
     818:	9b 81       	ldd	r25, Y+3	; 0x03
     81a:	fc 01       	movw	r30, r24
     81c:	22 83       	std	Z+2, r18	; 0x02
			break;
     81e:	56 c0       	rjmp	.+172    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
		
		case WRITE_LEADS_READ:
		
			if(RB_Read_Index == Ring_Buffer->Size - 1){
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	28 2f       	mov	r18, r24
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	9b 81       	ldd	r25, Y+3	; 0x03
     82a:	fc 01       	movw	r30, r24
     82c:	84 81       	ldd	r24, Z+4	; 0x04
     82e:	95 81       	ldd	r25, Z+5	; 0x05
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	28 17       	cp	r18, r24
     834:	39 07       	cpc	r19, r25
     836:	29 f4       	brne	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
					
				Ring_Buffer->Read_Index = 0;	
     838:	8a 81       	ldd	r24, Y+2	; 0x02
     83a:	9b 81       	ldd	r25, Y+3	; 0x03
     83c:	fc 01       	movw	r30, r24
     83e:	12 82       	std	Z+2, r1	; 0x02
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     840:	45 c0       	rjmp	.+138    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
					
				Ring_Buffer->Read_Index = 0;	
				
			}else{
				
				Ring_Buffer->Read_Index++;
     842:	8a 81       	ldd	r24, Y+2	; 0x02
     844:	9b 81       	ldd	r25, Y+3	; 0x03
     846:	fc 01       	movw	r30, r24
     848:	82 81       	ldd	r24, Z+2	; 0x02
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	28 0f       	add	r18, r24
     84e:	8a 81       	ldd	r24, Y+2	; 0x02
     850:	9b 81       	ldd	r25, Y+3	; 0x03
     852:	fc 01       	movw	r30, r24
     854:	22 83       	std	Z+2, r18	; 0x02
				
			}
		
			break;
     856:	3a c0       	rjmp	.+116    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
		
		case OVERFLOW:
		
			if(RB_Read_Index == (Ring_Buffer->Adjusted_Size - 1)){
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	28 2f       	mov	r18, r24
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
     860:	9b 81       	ldd	r25, Y+3	; 0x03
     862:	fc 01       	movw	r30, r24
     864:	87 81       	ldd	r24, Z+7	; 0x07
     866:	88 2f       	mov	r24, r24
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	28 17       	cp	r18, r24
     86e:	39 07       	cpc	r19, r25
     870:	29 f4       	brne	.+10     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
				
				Ring_Buffer->Read_Index = 0;
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	9b 81       	ldd	r25, Y+3	; 0x03
     876:	fc 01       	movw	r30, r24
     878:	12 82       	std	Z+2, r1	; 0x02
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     87a:	28 c0       	rjmp	.+80     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
		
			if(RB_Read_Index == (Ring_Buffer->Adjusted_Size - 1)){
				
				Ring_Buffer->Read_Index = 0;
								
			}else if(RB_Read_Index == Ring_Buffer->Overflow_Index - 1){
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	28 2f       	mov	r18, r24
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	8a 81       	ldd	r24, Y+2	; 0x02
     884:	9b 81       	ldd	r25, Y+3	; 0x03
     886:	fc 01       	movw	r30, r24
     888:	81 85       	ldd	r24, Z+9	; 0x09
     88a:	88 2f       	mov	r24, r24
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	28 17       	cp	r18, r24
     892:	39 07       	cpc	r19, r25
     894:	71 f4       	brne	.+28     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
				
				Ring_Buffer->Read_Index = Ring_Buffer->Wrap_Index;
     896:	8a 81       	ldd	r24, Y+2	; 0x02
     898:	9b 81       	ldd	r25, Y+3	; 0x03
     89a:	fc 01       	movw	r30, r24
     89c:	20 85       	ldd	r18, Z+8	; 0x08
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
     8a0:	9b 81       	ldd	r25, Y+3	; 0x03
     8a2:	fc 01       	movw	r30, r24
     8a4:	22 83       	std	Z+2, r18	; 0x02
				Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
     8a6:	8a 81       	ldd	r24, Y+2	; 0x02
     8a8:	9b 81       	ldd	r25, Y+3	; 0x03
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	fc 01       	movw	r30, r24
     8ae:	22 87       	std	Z+10, r18	; 0x0a
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     8b0:	0d c0       	rjmp	.+26     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
				Ring_Buffer->Read_Index = Ring_Buffer->Wrap_Index;
				Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
				
			}else{
				
				Ring_Buffer->Read_Index++;
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	9b 81       	ldd	r25, Y+3	; 0x03
     8b6:	fc 01       	movw	r30, r24
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	21 e0       	ldi	r18, 0x01	; 1
     8bc:	28 0f       	add	r18, r24
     8be:	8a 81       	ldd	r24, Y+2	; 0x02
     8c0:	9b 81       	ldd	r25, Y+3	; 0x03
     8c2:	fc 01       	movw	r30, r24
     8c4:	22 83       	std	Z+2, r18	; 0x02
				
			}
		
			break;
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
		
		default:
		
			return BUFFER_FAULT;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0f c0       	rjmp	.+30     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
		
	}
	
	if(Ring_Buffer->Read_Index == Ring_Buffer->Write_Index){
     8cc:	8a 81       	ldd	r24, Y+2	; 0x02
     8ce:	9b 81       	ldd	r25, Y+3	; 0x03
     8d0:	fc 01       	movw	r30, r24
     8d2:	22 81       	ldd	r18, Z+2	; 0x02
     8d4:	8a 81       	ldd	r24, Y+2	; 0x02
     8d6:	9b 81       	ldd	r25, Y+3	; 0x03
     8d8:	fc 01       	movw	r30, r24
     8da:	83 81       	ldd	r24, Z+3	; 0x03
     8dc:	28 17       	cp	r18, r24
     8de:	21 f4       	brne	.+8      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
		Ring_Buffer->Indexing_State = NONE;
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	9b 81       	ldd	r25, Y+3	; 0x03
     8e4:	fc 01       	movw	r30, r24
     8e6:	12 86       	std	Z+10, r1	; 0x0a
	}
	
	return BUFFER_OK;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
	
}
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <__vector_14>:

//------- Timer Definitions:

const uint8_t Max_ISR_Cycles = 150; // Max time the ISR will take to increment System_Ticks.

ISR(TIMER0_COMPA_vect){
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     902:	0f 92       	push	r0
     904:	11 24       	eor	r1, r1
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	2f 93       	push	r18
     910:	3f 93       	push	r19
     912:	4f 93       	push	r20
     914:	5f 93       	push	r21
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	af 93       	push	r26
     91c:	bf 93       	push	r27
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	1f 92       	push	r1
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
		
	if(Remaining_Ticks[_8_bit1] == 0){
     92c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x4>
     930:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x5>
     934:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0x6>
     938:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0x7>
     93c:	89 2b       	or	r24, r25
     93e:	8a 2b       	or	r24, r26
     940:	8b 2b       	or	r24, r27
     942:	69 f5       	brne	.+90     	; 0x99e <__stack+0x9f>
		
		PORTD ^= (1 << PORTD6);
     944:	8b e2       	ldi	r24, 0x2B	; 43
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	2b e2       	ldi	r18, 0x2B	; 43
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	f9 01       	movw	r30, r18
     94e:	30 81       	ld	r19, Z
     950:	20 e4       	ldi	r18, 0x40	; 64
     952:	23 27       	eor	r18, r19
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
				
		if(Calculated_Ticks[_8_bit1] > 0){
     958:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Calculated_Ticks+0x4>
     95c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Calculated_Ticks+0x5>
     960:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <Calculated_Ticks+0x6>
     964:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <Calculated_Ticks+0x7>
     968:	89 2b       	or	r24, r25
     96a:	8a 2b       	or	r24, r26
     96c:	8b 2b       	or	r24, r27
     96e:	09 f4       	brne	.+2      	; 0x972 <__stack+0x73>
     970:	51 c0       	rjmp	.+162    	; 0xa14 <__stack+0x115>
			
			Remaining_Ticks[_8_bit1] = Calculated_Ticks[_8_bit1]; // Reset the counter
     972:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Calculated_Ticks+0x4>
     976:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Calculated_Ticks+0x5>
     97a:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <Calculated_Ticks+0x6>
     97e:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <Calculated_Ticks+0x7>
     982:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Remaining_Ticks+0x4>
     986:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <Remaining_Ticks+0x5>
     98a:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <Remaining_Ticks+0x6>
     98e:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <Remaining_Ticks+0x7>
			OCR0A = 0xFF;
     992:	87 e4       	ldi	r24, 0x47	; 71
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	2f ef       	ldi	r18, 0xFF	; 255
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
		OCR0A = NextOCR;
		Remaining_Ticks[_8_bit1] -= NextOCR;
		
	}
	
}
     99c:	3b c0       	rjmp	.+118    	; 0xa14 <__stack+0x115>
			
		}
		
	}else{

		uint8_t NextOCR = (Remaining_Ticks[_8_bit1] > 0xFF) ? 0xFF : (uint8_t)Remaining_Ticks[_8_bit1];
     99e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x4>
     9a2:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x5>
     9a6:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0x6>
     9aa:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0x7>
     9ae:	8f 3f       	cpi	r24, 0xFF	; 255
     9b0:	91 05       	cpc	r25, r1
     9b2:	a1 05       	cpc	r26, r1
     9b4:	b1 05       	cpc	r27, r1
     9b6:	09 f0       	breq	.+2      	; 0x9ba <__stack+0xbb>
     9b8:	48 f4       	brcc	.+18     	; 0x9cc <__stack+0xcd>
     9ba:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x4>
     9be:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x5>
     9c2:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0x6>
     9c6:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0x7>
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <__stack+0xcf>
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	89 83       	std	Y+1, r24	; 0x01

		OCR0A = NextOCR;
     9d0:	87 e4       	ldi	r24, 0x47	; 71
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	29 81       	ldd	r18, Y+1	; 0x01
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
		Remaining_Ticks[_8_bit1] -= NextOCR;
     9da:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Remaining_Ticks+0x4>
     9de:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <Remaining_Ticks+0x5>
     9e2:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <Remaining_Ticks+0x6>
     9e6:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <Remaining_Ticks+0x7>
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	88 2f       	mov	r24, r24
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	a0 e0       	ldi	r26, 0x00	; 0
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	79 01       	movw	r14, r18
     9f6:	8a 01       	movw	r16, r20
     9f8:	e8 1a       	sub	r14, r24
     9fa:	f9 0a       	sbc	r15, r25
     9fc:	0a 0b       	sbc	r16, r26
     9fe:	1b 0b       	sbc	r17, r27
     a00:	d8 01       	movw	r26, r16
     a02:	c7 01       	movw	r24, r14
     a04:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Remaining_Ticks+0x4>
     a08:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <Remaining_Ticks+0x5>
     a0c:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <Remaining_Ticks+0x6>
     a10:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <Remaining_Ticks+0x7>
		
	}
	
}
     a14:	00 00       	nop
     a16:	0f 90       	pop	r0
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	ff 91       	pop	r31
     a1e:	ef 91       	pop	r30
     a20:	bf 91       	pop	r27
     a22:	af 91       	pop	r26
     a24:	9f 91       	pop	r25
     a26:	8f 91       	pop	r24
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	0f 90       	pop	r0
     a3a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <__vector_7>:

ISR(TIMER2_COMPA_vect){
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	af 92       	push	r10
     a52:	bf 92       	push	r11
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	af 93       	push	r26
     a72:	bf 93       	push	r27
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	1f 92       	push	r1
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
	
	if(Remaining_Ticks[_8_bit2] == 0){
     a82:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Remaining_Ticks+0x8>
     a86:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Remaining_Ticks+0x9>
     a8a:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <Remaining_Ticks+0xa>
     a8e:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <Remaining_Ticks+0xb>
     a92:	89 2b       	or	r24, r25
     a94:	8a 2b       	or	r24, r26
     a96:	8b 2b       	or	r24, r27
     a98:	09 f0       	breq	.+2      	; 0xa9c <__vector_7+0x58>
     a9a:	60 c0       	rjmp	.+192    	; 0xb5c <__vector_7+0x118>
		
		PORTD ^= (1 << PORTD7);
     a9c:	8b e2       	ldi	r24, 0x2B	; 43
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	2b e2       	ldi	r18, 0x2B	; 43
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	f9 01       	movw	r30, r18
     aa6:	30 81       	ld	r19, Z
     aa8:	20 e8       	ldi	r18, 0x80	; 128
     aaa:	23 27       	eor	r18, r19
     aac:	fc 01       	movw	r30, r24
     aae:	20 83       	st	Z, r18
		
		System_Ticks[_8_bit2]++; 
     ab0:	a0 90 31 01 	lds	r10, 0x0131	; 0x800131 <System_Ticks+0x10>
     ab4:	b0 90 32 01 	lds	r11, 0x0132	; 0x800132 <System_Ticks+0x11>
     ab8:	c0 90 33 01 	lds	r12, 0x0133	; 0x800133 <System_Ticks+0x12>
     abc:	d0 90 34 01 	lds	r13, 0x0134	; 0x800134 <System_Ticks+0x13>
     ac0:	e0 90 35 01 	lds	r14, 0x0135	; 0x800135 <System_Ticks+0x14>
     ac4:	f0 90 36 01 	lds	r15, 0x0136	; 0x800136 <System_Ticks+0x15>
     ac8:	00 91 37 01 	lds	r16, 0x0137	; 0x800137 <System_Ticks+0x16>
     acc:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <System_Ticks+0x17>
     ad0:	2a 2d       	mov	r18, r10
     ad2:	3b 2d       	mov	r19, r11
     ad4:	4c 2d       	mov	r20, r12
     ad6:	5d 2d       	mov	r21, r13
     ad8:	6e 2d       	mov	r22, r14
     ada:	7f 2d       	mov	r23, r15
     adc:	80 2f       	mov	r24, r16
     ade:	91 2f       	mov	r25, r17
     ae0:	a1 e0       	ldi	r26, 0x01	; 1
     ae2:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__adddi3_s8>
     ae6:	a2 2e       	mov	r10, r18
     ae8:	b3 2e       	mov	r11, r19
     aea:	c4 2e       	mov	r12, r20
     aec:	d5 2e       	mov	r13, r21
     aee:	e6 2e       	mov	r14, r22
     af0:	f7 2e       	mov	r15, r23
     af2:	08 2f       	mov	r16, r24
     af4:	19 2f       	mov	r17, r25
     af6:	a0 92 31 01 	sts	0x0131, r10	; 0x800131 <System_Ticks+0x10>
     afa:	b0 92 32 01 	sts	0x0132, r11	; 0x800132 <System_Ticks+0x11>
     afe:	c0 92 33 01 	sts	0x0133, r12	; 0x800133 <System_Ticks+0x12>
     b02:	d0 92 34 01 	sts	0x0134, r13	; 0x800134 <System_Ticks+0x13>
     b06:	e0 92 35 01 	sts	0x0135, r14	; 0x800135 <System_Ticks+0x14>
     b0a:	f0 92 36 01 	sts	0x0136, r15	; 0x800136 <System_Ticks+0x15>
     b0e:	00 93 37 01 	sts	0x0137, r16	; 0x800137 <System_Ticks+0x16>
     b12:	10 93 38 01 	sts	0x0138, r17	; 0x800138 <System_Ticks+0x17>

		if(Calculated_Ticks[_8_bit2] > 0){
     b16:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Calculated_Ticks+0x8>
     b1a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Calculated_Ticks+0x9>
     b1e:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <Calculated_Ticks+0xa>
     b22:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <Calculated_Ticks+0xb>
     b26:	89 2b       	or	r24, r25
     b28:	8a 2b       	or	r24, r26
     b2a:	8b 2b       	or	r24, r27
     b2c:	09 f4       	brne	.+2      	; 0xb30 <__vector_7+0xec>
     b2e:	51 c0       	rjmp	.+162    	; 0xbd2 <__vector_7+0x18e>
			
			Remaining_Ticks[_8_bit2] = Calculated_Ticks[_8_bit2]; 
     b30:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Calculated_Ticks+0x8>
     b34:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Calculated_Ticks+0x9>
     b38:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <Calculated_Ticks+0xa>
     b3c:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <Calculated_Ticks+0xb>
     b40:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Remaining_Ticks+0x8>
     b44:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <Remaining_Ticks+0x9>
     b48:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <Remaining_Ticks+0xa>
     b4c:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <Remaining_Ticks+0xb>
			OCR2A = 0xFF;
     b50:	83 eb       	ldi	r24, 0xB3	; 179
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	2f ef       	ldi	r18, 0xFF	; 255
     b56:	fc 01       	movw	r30, r24
     b58:	20 83       	st	Z, r18
		OCR2A = NextOCR;
		Remaining_Ticks[_8_bit2] -= NextOCR;
		
	}

}
     b5a:	3b c0       	rjmp	.+118    	; 0xbd2 <__vector_7+0x18e>
			
		}
		
	}else{

		uint8_t NextOCR = (Remaining_Ticks[_8_bit2] > 0xFF) ? 0xFF : (uint8_t)Remaining_Ticks[_8_bit2];
     b5c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Remaining_Ticks+0x8>
     b60:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Remaining_Ticks+0x9>
     b64:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <Remaining_Ticks+0xa>
     b68:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <Remaining_Ticks+0xb>
     b6c:	8f 3f       	cpi	r24, 0xFF	; 255
     b6e:	91 05       	cpc	r25, r1
     b70:	a1 05       	cpc	r26, r1
     b72:	b1 05       	cpc	r27, r1
     b74:	09 f0       	breq	.+2      	; 0xb78 <__vector_7+0x134>
     b76:	48 f4       	brcc	.+18     	; 0xb8a <__vector_7+0x146>
     b78:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Remaining_Ticks+0x8>
     b7c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Remaining_Ticks+0x9>
     b80:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <Remaining_Ticks+0xa>
     b84:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <Remaining_Ticks+0xb>
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <__vector_7+0x148>
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	89 83       	std	Y+1, r24	; 0x01

		OCR2A = NextOCR;
     b8e:	83 eb       	ldi	r24, 0xB3	; 179
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	29 81       	ldd	r18, Y+1	; 0x01
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18
		Remaining_Ticks[_8_bit2] -= NextOCR;
     b98:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <Remaining_Ticks+0x8>
     b9c:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <Remaining_Ticks+0x9>
     ba0:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <Remaining_Ticks+0xa>
     ba4:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <Remaining_Ticks+0xb>
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	88 2f       	mov	r24, r24
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e0       	ldi	r26, 0x00	; 0
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	79 01       	movw	r14, r18
     bb4:	8a 01       	movw	r16, r20
     bb6:	e8 1a       	sub	r14, r24
     bb8:	f9 0a       	sbc	r15, r25
     bba:	0a 0b       	sbc	r16, r26
     bbc:	1b 0b       	sbc	r17, r27
     bbe:	d8 01       	movw	r26, r16
     bc0:	c7 01       	movw	r24, r14
     bc2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Remaining_Ticks+0x8>
     bc6:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <Remaining_Ticks+0x9>
     bca:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <Remaining_Ticks+0xa>
     bce:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <Remaining_Ticks+0xb>
		
	}

}
     bd2:	00 00       	nop
     bd4:	0f 90       	pop	r0
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	df 90       	pop	r13
     bfc:	cf 90       	pop	r12
     bfe:	bf 90       	pop	r11
     c00:	af 90       	pop	r10
     c02:	0f 90       	pop	r0
     c04:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <__vector_11>:


ISR(TIMER1_COMPA_vect){
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
     c1a:	af 92       	push	r10
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	00 d0       	rcall	.+0      	; 0xc48 <__vector_11+0x3a>
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
	
	if(Remaining_Ticks[_16_bit] == 0){
     c4c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks>
     c50:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x1>
     c54:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x2>
     c58:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x3>
     c5c:	89 2b       	or	r24, r25
     c5e:	8a 2b       	or	r24, r26
     c60:	8b 2b       	or	r24, r27
     c62:	09 f0       	breq	.+2      	; 0xc66 <__vector_11+0x58>
     c64:	65 c0       	rjmp	.+202    	; 0xd30 <__vector_11+0x122>
		
		PORTB ^= (1 << PORTB0);
     c66:	85 e2       	ldi	r24, 0x25	; 37
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	25 e2       	ldi	r18, 0x25	; 37
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	f9 01       	movw	r30, r18
     c70:	30 81       	ld	r19, Z
     c72:	21 e0       	ldi	r18, 0x01	; 1
     c74:	23 27       	eor	r18, r19
     c76:	fc 01       	movw	r30, r24
     c78:	20 83       	st	Z, r18
		
		System_Ticks[_16_bit]++;
     c7a:	a0 90 21 01 	lds	r10, 0x0121	; 0x800121 <System_Ticks>
     c7e:	b0 90 22 01 	lds	r11, 0x0122	; 0x800122 <System_Ticks+0x1>
     c82:	c0 90 23 01 	lds	r12, 0x0123	; 0x800123 <System_Ticks+0x2>
     c86:	d0 90 24 01 	lds	r13, 0x0124	; 0x800124 <System_Ticks+0x3>
     c8a:	e0 90 25 01 	lds	r14, 0x0125	; 0x800125 <System_Ticks+0x4>
     c8e:	f0 90 26 01 	lds	r15, 0x0126	; 0x800126 <System_Ticks+0x5>
     c92:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <System_Ticks+0x6>
     c96:	10 91 28 01 	lds	r17, 0x0128	; 0x800128 <System_Ticks+0x7>
     c9a:	2a 2d       	mov	r18, r10
     c9c:	3b 2d       	mov	r19, r11
     c9e:	4c 2d       	mov	r20, r12
     ca0:	5d 2d       	mov	r21, r13
     ca2:	6e 2d       	mov	r22, r14
     ca4:	7f 2d       	mov	r23, r15
     ca6:	80 2f       	mov	r24, r16
     ca8:	91 2f       	mov	r25, r17
     caa:	a1 e0       	ldi	r26, 0x01	; 1
     cac:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__adddi3_s8>
     cb0:	a2 2e       	mov	r10, r18
     cb2:	b3 2e       	mov	r11, r19
     cb4:	c4 2e       	mov	r12, r20
     cb6:	d5 2e       	mov	r13, r21
     cb8:	e6 2e       	mov	r14, r22
     cba:	f7 2e       	mov	r15, r23
     cbc:	08 2f       	mov	r16, r24
     cbe:	19 2f       	mov	r17, r25
     cc0:	a0 92 21 01 	sts	0x0121, r10	; 0x800121 <System_Ticks>
     cc4:	b0 92 22 01 	sts	0x0122, r11	; 0x800122 <System_Ticks+0x1>
     cc8:	c0 92 23 01 	sts	0x0123, r12	; 0x800123 <System_Ticks+0x2>
     ccc:	d0 92 24 01 	sts	0x0124, r13	; 0x800124 <System_Ticks+0x3>
     cd0:	e0 92 25 01 	sts	0x0125, r14	; 0x800125 <System_Ticks+0x4>
     cd4:	f0 92 26 01 	sts	0x0126, r15	; 0x800126 <System_Ticks+0x5>
     cd8:	00 93 27 01 	sts	0x0127, r16	; 0x800127 <System_Ticks+0x6>
     cdc:	10 93 28 01 	sts	0x0128, r17	; 0x800128 <System_Ticks+0x7>
		
		if(Calculated_Ticks[_16_bit] > 0){
     ce0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Calculated_Ticks>
     ce4:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Calculated_Ticks+0x1>
     ce8:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Calculated_Ticks+0x2>
     cec:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Calculated_Ticks+0x3>
     cf0:	89 2b       	or	r24, r25
     cf2:	8a 2b       	or	r24, r26
     cf4:	8b 2b       	or	r24, r27
     cf6:	09 f4       	brne	.+2      	; 0xcfa <__vector_11+0xec>
     cf8:	58 c0       	rjmp	.+176    	; 0xdaa <__vector_11+0x19c>
			
			Remaining_Ticks[_16_bit] = Calculated_Ticks[_16_bit];
     cfa:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Calculated_Ticks>
     cfe:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Calculated_Ticks+0x1>
     d02:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Calculated_Ticks+0x2>
     d06:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Calculated_Ticks+0x3>
     d0a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Remaining_Ticks>
     d0e:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <Remaining_Ticks+0x1>
     d12:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <Remaining_Ticks+0x2>
     d16:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <Remaining_Ticks+0x3>
			OCR1AH = 0xFF;
     d1a:	89 e8       	ldi	r24, 0x89	; 137
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	2f ef       	ldi	r18, 0xFF	; 255
     d20:	fc 01       	movw	r30, r24
     d22:	20 83       	st	Z, r18
			OCR1AL = 0xFF;
     d24:	88 e8       	ldi	r24, 0x88	; 136
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	2f ef       	ldi	r18, 0xFF	; 255
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18
		OCR1A = NextOCR;
		Remaining_Ticks[_16_bit] -= NextOCR;
		
	}
	
}
     d2e:	3d c0       	rjmp	.+122    	; 0xdaa <__vector_11+0x19c>
			
		}
		
	}else{
		
		uint16_t NextOCR = (Remaining_Ticks[_16_bit] > 0xFFFF) ? 0xFFFF : (uint16_t)Remaining_Ticks[_16_bit];
     d30:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks>
     d34:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x1>
     d38:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x2>
     d3c:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x3>
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	a1 40       	sbci	r26, 0x01	; 1
     d44:	b1 05       	cpc	r27, r1
     d46:	48 f4       	brcc	.+18     	; 0xd5a <__vector_11+0x14c>
     d48:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks>
     d4c:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x1>
     d50:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x2>
     d54:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x3>
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <__vector_11+0x150>
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
     d5c:	9f ef       	ldi	r25, 0xFF	; 255
     d5e:	9a 83       	std	Y+2, r25	; 0x02
     d60:	89 83       	std	Y+1, r24	; 0x01
		
		OCR1A = NextOCR;
     d62:	88 e8       	ldi	r24, 0x88	; 136
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	29 81       	ldd	r18, Y+1	; 0x01
     d68:	3a 81       	ldd	r19, Y+2	; 0x02
     d6a:	fc 01       	movw	r30, r24
     d6c:	31 83       	std	Z+1, r19	; 0x01
     d6e:	20 83       	st	Z, r18
		Remaining_Ticks[_16_bit] -= NextOCR;
     d70:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <Remaining_Ticks>
     d74:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <Remaining_Ticks+0x1>
     d78:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <Remaining_Ticks+0x2>
     d7c:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <Remaining_Ticks+0x3>
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	cc 01       	movw	r24, r24
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	79 01       	movw	r14, r18
     d8c:	8a 01       	movw	r16, r20
     d8e:	e8 1a       	sub	r14, r24
     d90:	f9 0a       	sbc	r15, r25
     d92:	0a 0b       	sbc	r16, r26
     d94:	1b 0b       	sbc	r17, r27
     d96:	d8 01       	movw	r26, r16
     d98:	c7 01       	movw	r24, r14
     d9a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Remaining_Ticks>
     d9e:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <Remaining_Ticks+0x1>
     da2:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <Remaining_Ticks+0x2>
     da6:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <Remaining_Ticks+0x3>
		
	}
	
}
     daa:	00 00       	nop
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	ff 91       	pop	r31
     db6:	ef 91       	pop	r30
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	7f 91       	pop	r23
     dc2:	6f 91       	pop	r22
     dc4:	5f 91       	pop	r21
     dc6:	4f 91       	pop	r20
     dc8:	3f 91       	pop	r19
     dca:	2f 91       	pop	r18
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14
     dd4:	df 90       	pop	r13
     dd6:	cf 90       	pop	r12
     dd8:	bf 90       	pop	r11
     dda:	af 90       	pop	r10
     ddc:	0f 90       	pop	r0
     dde:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <Set_Prescaler>:

static Timer_Status Set_Prescaler(Timers Timer, uint16_t Prescaler){
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	00 d0       	rcall	.+0      	; 0xdee <Set_Prescaler+0x6>
     dee:	1f 92       	push	r1
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	7b 83       	std	Y+3, r23	; 0x03
     df8:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Timer){
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	91 05       	cpc	r25, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <Set_Prescaler+0x20>
     e06:	50 c0       	rjmp	.+160    	; 0xea8 <Set_Prescaler+0xc0>
     e08:	82 30       	cpi	r24, 0x02	; 2
     e0a:	91 05       	cpc	r25, r1
     e0c:	09 f4       	brne	.+2      	; 0xe10 <Set_Prescaler+0x28>
     e0e:	95 c0       	rjmp	.+298    	; 0xf3a <Set_Prescaler+0x152>
     e10:	89 2b       	or	r24, r25
     e12:	09 f0       	breq	.+2      	; 0xe16 <Set_Prescaler+0x2e>
     e14:	db c0       	rjmp	.+438    	; 0xfcc <Set_Prescaler+0x1e4>
		
		case _16_bit:
		
			switch(Prescaler){ // Don't need to clear TCCRxB, as it will be assigned:
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	80 34       	cpi	r24, 0x40	; 64
     e1c:	91 05       	cpc	r25, r1
     e1e:	29 f1       	breq	.+74     	; 0xe6a <Set_Prescaler+0x82>
     e20:	81 34       	cpi	r24, 0x41	; 65
     e22:	91 05       	cpc	r25, r1
     e24:	30 f4       	brcc	.+12     	; 0xe32 <Set_Prescaler+0x4a>
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	91 05       	cpc	r25, r1
     e2a:	59 f0       	breq	.+22     	; 0xe42 <Set_Prescaler+0x5a>
     e2c:	08 97       	sbiw	r24, 0x08	; 8
     e2e:	99 f0       	breq	.+38     	; 0xe56 <Set_Prescaler+0x6e>
				TCCR1B |= (1 << CS12) | (1 << CS10);
				break;
				
			}
			
			break;
     e30:	cf c0       	rjmp	.+414    	; 0xfd0 <Set_Prescaler+0x1e8>
	
	switch(Timer){
		
		case _16_bit:
		
			switch(Prescaler){ // Don't need to clear TCCRxB, as it will be assigned:
     e32:	81 15       	cp	r24, r1
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	92 07       	cpc	r25, r18
     e38:	11 f1       	breq	.+68     	; 0xe7e <Set_Prescaler+0x96>
     e3a:	81 15       	cp	r24, r1
     e3c:	94 40       	sbci	r25, 0x04	; 4
     e3e:	49 f1       	breq	.+82     	; 0xe92 <Set_Prescaler+0xaa>
				TCCR1B |= (1 << CS12) | (1 << CS10);
				break;
				
			}
			
			break;
     e40:	c7 c0       	rjmp	.+398    	; 0xfd0 <Set_Prescaler+0x1e8>
		
			switch(Prescaler){ // Don't need to clear TCCRxB, as it will be assigned:
				
				case 1:
				
				TCCR1B |= (1 << CS10);
     e42:	81 e8       	ldi	r24, 0x81	; 129
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	21 e8       	ldi	r18, 0x81	; 129
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	f9 01       	movw	r30, r18
     e4c:	20 81       	ld	r18, Z
     e4e:	21 60       	ori	r18, 0x01	; 1
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
				break;
     e54:	28 c0       	rjmp	.+80     	; 0xea6 <Set_Prescaler+0xbe>
				
				case 8:
				
				TCCR1B |= (1 << CS11);
     e56:	81 e8       	ldi	r24, 0x81	; 129
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	21 e8       	ldi	r18, 0x81	; 129
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	f9 01       	movw	r30, r18
     e60:	20 81       	ld	r18, Z
     e62:	22 60       	ori	r18, 0x02	; 2
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
				break;
     e68:	1e c0       	rjmp	.+60     	; 0xea6 <Set_Prescaler+0xbe>
				
				case 64:
				
				TCCR1B |= (1 << CS11) | (1 << CS10);
     e6a:	81 e8       	ldi	r24, 0x81	; 129
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	21 e8       	ldi	r18, 0x81	; 129
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	f9 01       	movw	r30, r18
     e74:	20 81       	ld	r18, Z
     e76:	23 60       	ori	r18, 0x03	; 3
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
				break;
     e7c:	14 c0       	rjmp	.+40     	; 0xea6 <Set_Prescaler+0xbe>
				
				case 256:
				
				TCCR1B |= (1 << CS12);
     e7e:	81 e8       	ldi	r24, 0x81	; 129
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	21 e8       	ldi	r18, 0x81	; 129
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	f9 01       	movw	r30, r18
     e88:	20 81       	ld	r18, Z
     e8a:	24 60       	ori	r18, 0x04	; 4
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18
				break;
     e90:	0a c0       	rjmp	.+20     	; 0xea6 <Set_Prescaler+0xbe>
				
				case 1024:
				
				TCCR1B |= (1 << CS12) | (1 << CS10);
     e92:	81 e8       	ldi	r24, 0x81	; 129
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	21 e8       	ldi	r18, 0x81	; 129
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	f9 01       	movw	r30, r18
     e9c:	20 81       	ld	r18, Z
     e9e:	25 60       	ori	r18, 0x05	; 5
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 83       	st	Z, r18
				break;
     ea4:	00 00       	nop
				
			}
			
			break;
     ea6:	94 c0       	rjmp	.+296    	; 0xfd0 <Set_Prescaler+0x1e8>
		
		case _8_bit1:
		
			switch(Prescaler){
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	9b 81       	ldd	r25, Y+3	; 0x03
     eac:	80 34       	cpi	r24, 0x40	; 64
     eae:	91 05       	cpc	r25, r1
     eb0:	29 f1       	breq	.+74     	; 0xefc <Set_Prescaler+0x114>
     eb2:	81 34       	cpi	r24, 0x41	; 65
     eb4:	91 05       	cpc	r25, r1
     eb6:	30 f4       	brcc	.+12     	; 0xec4 <Set_Prescaler+0xdc>
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	91 05       	cpc	r25, r1
     ebc:	59 f0       	breq	.+22     	; 0xed4 <Set_Prescaler+0xec>
     ebe:	08 97       	sbiw	r24, 0x08	; 8
     ec0:	99 f0       	breq	.+38     	; 0xee8 <Set_Prescaler+0x100>
				TCCR0B |= (1 << CS02) | (1 << CS00);
				break;
				
			}
			
			break;
     ec2:	86 c0       	rjmp	.+268    	; 0xfd0 <Set_Prescaler+0x1e8>
			
			break;
		
		case _8_bit1:
		
			switch(Prescaler){
     ec4:	81 15       	cp	r24, r1
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	9f 07       	cpc	r25, r31
     eca:	11 f1       	breq	.+68     	; 0xf10 <Set_Prescaler+0x128>
     ecc:	81 15       	cp	r24, r1
     ece:	94 40       	sbci	r25, 0x04	; 4
     ed0:	49 f1       	breq	.+82     	; 0xf24 <Set_Prescaler+0x13c>
				TCCR0B |= (1 << CS02) | (1 << CS00);
				break;
				
			}
			
			break;
     ed2:	7e c0       	rjmp	.+252    	; 0xfd0 <Set_Prescaler+0x1e8>
		
			switch(Prescaler){
				
				case 1:
				
				TCCR0B |= (1 << CS00);
     ed4:	85 e4       	ldi	r24, 0x45	; 69
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	25 e4       	ldi	r18, 0x45	; 69
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	21 60       	ori	r18, 0x01	; 1
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
				break;
     ee6:	28 c0       	rjmp	.+80     	; 0xf38 <Set_Prescaler+0x150>
				
				case 8:
				
				TCCR0B |= (1 << CS01);
     ee8:	85 e4       	ldi	r24, 0x45	; 69
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	25 e4       	ldi	r18, 0x45	; 69
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	f9 01       	movw	r30, r18
     ef2:	20 81       	ld	r18, Z
     ef4:	22 60       	ori	r18, 0x02	; 2
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
				break;
     efa:	1e c0       	rjmp	.+60     	; 0xf38 <Set_Prescaler+0x150>
				
				case 64:
				
				TCCR0B |= (1 << CS01) | (1 << CS00);
     efc:	85 e4       	ldi	r24, 0x45	; 69
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	25 e4       	ldi	r18, 0x45	; 69
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	f9 01       	movw	r30, r18
     f06:	20 81       	ld	r18, Z
     f08:	23 60       	ori	r18, 0x03	; 3
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18
				break;
     f0e:	14 c0       	rjmp	.+40     	; 0xf38 <Set_Prescaler+0x150>
				
				case 256:
				
				TCCR0B |= (1 << CS02);
     f10:	85 e4       	ldi	r24, 0x45	; 69
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	25 e4       	ldi	r18, 0x45	; 69
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	f9 01       	movw	r30, r18
     f1a:	20 81       	ld	r18, Z
     f1c:	24 60       	ori	r18, 0x04	; 4
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
				break;
     f22:	0a c0       	rjmp	.+20     	; 0xf38 <Set_Prescaler+0x150>
				
				case 1024:
				
				TCCR0B |= (1 << CS02) | (1 << CS00);
     f24:	85 e4       	ldi	r24, 0x45	; 69
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	25 e4       	ldi	r18, 0x45	; 69
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	f9 01       	movw	r30, r18
     f2e:	20 81       	ld	r18, Z
     f30:	25 60       	ori	r18, 0x05	; 5
     f32:	fc 01       	movw	r30, r24
     f34:	20 83       	st	Z, r18
				break;
     f36:	00 00       	nop
				
			}
			
			break;
     f38:	4b c0       	rjmp	.+150    	; 0xfd0 <Set_Prescaler+0x1e8>
		
		case _8_bit2:
		
			switch(Prescaler){
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	9b 81       	ldd	r25, Y+3	; 0x03
     f3e:	80 34       	cpi	r24, 0x40	; 64
     f40:	91 05       	cpc	r25, r1
     f42:	29 f1       	breq	.+74     	; 0xf8e <Set_Prescaler+0x1a6>
     f44:	81 34       	cpi	r24, 0x41	; 65
     f46:	91 05       	cpc	r25, r1
     f48:	30 f4       	brcc	.+12     	; 0xf56 <Set_Prescaler+0x16e>
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	91 05       	cpc	r25, r1
     f4e:	59 f0       	breq	.+22     	; 0xf66 <Set_Prescaler+0x17e>
     f50:	08 97       	sbiw	r24, 0x08	; 8
     f52:	99 f0       	breq	.+38     	; 0xf7a <Set_Prescaler+0x192>
				TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
				break;
				
			}
			
			break;
     f54:	3d c0       	rjmp	.+122    	; 0xfd0 <Set_Prescaler+0x1e8>
			
			break;
		
		case _8_bit2:
		
			switch(Prescaler){
     f56:	81 15       	cp	r24, r1
     f58:	f1 e0       	ldi	r31, 0x01	; 1
     f5a:	9f 07       	cpc	r25, r31
     f5c:	11 f1       	breq	.+68     	; 0xfa2 <Set_Prescaler+0x1ba>
     f5e:	81 15       	cp	r24, r1
     f60:	94 40       	sbci	r25, 0x04	; 4
     f62:	49 f1       	breq	.+82     	; 0xfb6 <Set_Prescaler+0x1ce>
				TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
				break;
				
			}
			
			break;
     f64:	35 c0       	rjmp	.+106    	; 0xfd0 <Set_Prescaler+0x1e8>
		
			switch(Prescaler){
				
				case 1:
				
				TCCR2B |= (1 << CS20);
     f66:	81 eb       	ldi	r24, 0xB1	; 177
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	21 eb       	ldi	r18, 0xB1	; 177
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	f9 01       	movw	r30, r18
     f70:	20 81       	ld	r18, Z
     f72:	21 60       	ori	r18, 0x01	; 1
     f74:	fc 01       	movw	r30, r24
     f76:	20 83       	st	Z, r18
				break;
     f78:	28 c0       	rjmp	.+80     	; 0xfca <Set_Prescaler+0x1e2>
				
				case 8:
				
				TCCR2B |= (1 << CS21);
     f7a:	81 eb       	ldi	r24, 0xB1	; 177
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	21 eb       	ldi	r18, 0xB1	; 177
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	f9 01       	movw	r30, r18
     f84:	20 81       	ld	r18, Z
     f86:	22 60       	ori	r18, 0x02	; 2
     f88:	fc 01       	movw	r30, r24
     f8a:	20 83       	st	Z, r18
				break;
     f8c:	1e c0       	rjmp	.+60     	; 0xfca <Set_Prescaler+0x1e2>
				
				case 64:
				
				TCCR2B |= (1 << CS22);
     f8e:	81 eb       	ldi	r24, 0xB1	; 177
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	21 eb       	ldi	r18, 0xB1	; 177
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	f9 01       	movw	r30, r18
     f98:	20 81       	ld	r18, Z
     f9a:	24 60       	ori	r18, 0x04	; 4
     f9c:	fc 01       	movw	r30, r24
     f9e:	20 83       	st	Z, r18
				break;
     fa0:	14 c0       	rjmp	.+40     	; 0xfca <Set_Prescaler+0x1e2>
				
				case 256:
				
				TCCR2B |= (1 << CS22) |  (1<<CS21);
     fa2:	81 eb       	ldi	r24, 0xB1	; 177
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	21 eb       	ldi	r18, 0xB1	; 177
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	f9 01       	movw	r30, r18
     fac:	20 81       	ld	r18, Z
     fae:	26 60       	ori	r18, 0x06	; 6
     fb0:	fc 01       	movw	r30, r24
     fb2:	20 83       	st	Z, r18
				break;
     fb4:	0a c0       	rjmp	.+20     	; 0xfca <Set_Prescaler+0x1e2>
				
				case 1024:
				
				TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
     fb6:	81 eb       	ldi	r24, 0xB1	; 177
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	21 eb       	ldi	r18, 0xB1	; 177
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	f9 01       	movw	r30, r18
     fc0:	20 81       	ld	r18, Z
     fc2:	27 60       	ori	r18, 0x07	; 7
     fc4:	fc 01       	movw	r30, r24
     fc6:	20 83       	st	Z, r18
				break;
     fc8:	00 00       	nop
				
			}
			
			break;
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <Set_Prescaler+0x1e8>
		
		default:
		
			return TIMER_FAULT;
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <Set_Prescaler+0x1ea>

	}
	
	return TIMER_OK;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
	
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <Configure_Timer>:


Timer_Status Configure_Timer(uint16_t Time, uint32_t Unit, Timers Selected_Timer){ // All relevent types were optimized by calculating the largest possible values to Configure_Timer_Step()
     fde:	2f 92       	push	r2
     fe0:	3f 92       	push	r3
     fe2:	4f 92       	push	r4
     fe4:	5f 92       	push	r5
     fe6:	6f 92       	push	r6
     fe8:	7f 92       	push	r7
     fea:	8f 92       	push	r8
     fec:	9f 92       	push	r9
     fee:	af 92       	push	r10
     ff0:	bf 92       	push	r11
     ff2:	cf 92       	push	r12
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	e1 97       	sbiw	r28, 0x31	; 49
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	9c a7       	std	Y+44, r25	; 0x2c
    1014:	8b a7       	std	Y+43, r24	; 0x2b
    1016:	4d a7       	std	Y+45, r20	; 0x2d
    1018:	5e a7       	std	Y+46, r21	; 0x2e
    101a:	6f a7       	std	Y+47, r22	; 0x2f
    101c:	78 ab       	std	Y+48, r23	; 0x30
    101e:	29 ab       	std	Y+49, r18	; 0x31
	
	if(TC_CLK == 0){ 
    1020:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TC_CLK>
    1024:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <TC_CLK+0x1>
    1028:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <TC_CLK+0x2>
    102c:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <TC_CLK+0x3>
    1030:	89 2b       	or	r24, r25
    1032:	8a 2b       	or	r24, r26
    1034:	8b 2b       	or	r24, r27
    1036:	11 f4       	brne	.+4      	; 0x103c <Configure_Timer+0x5e>
		return TIMER_FAULT;
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	b2 c3       	rjmp	.+1892   	; 0x17a0 <Configure_Timer+0x7c2>
	}
	
	if(Unit == 0){
    103c:	8d a5       	ldd	r24, Y+45	; 0x2d
    103e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1040:	af a5       	ldd	r26, Y+47	; 0x2f
    1042:	b8 a9       	ldd	r27, Y+48	; 0x30
    1044:	89 2b       	or	r24, r25
    1046:	8a 2b       	or	r24, r26
    1048:	8b 2b       	or	r24, r27
    104a:	11 f4       	brne	.+4      	; 0x1050 <Configure_Timer+0x72>
		return TIMER_FAULT;
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	a8 c3       	rjmp	.+1872   	; 0x17a0 <Configure_Timer+0x7c2>
	}
	
	if((uint64_t)TC_CLK * Time/Unit <= Max_ISR_Cycles){ // If the requested tick is shorter than or equal to the max time it takes to increment System_Ticks, return error state
    1050:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TC_CLK>
    1054:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <TC_CLK+0x1>
    1058:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <TC_CLK+0x2>
    105c:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <TC_CLK+0x3>
    1060:	1c 01       	movw	r2, r24
    1062:	2d 01       	movw	r4, r26
    1064:	61 2c       	mov	r6, r1
    1066:	71 2c       	mov	r7, r1
    1068:	43 01       	movw	r8, r6
    106a:	8b a5       	ldd	r24, Y+43	; 0x2b
    106c:	9c a5       	ldd	r25, Y+44	; 0x2c
    106e:	9c 01       	movw	r18, r24
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	cb 01       	movw	r24, r22
    107a:	a2 2e       	mov	r10, r18
    107c:	b3 2e       	mov	r11, r19
    107e:	c4 2e       	mov	r12, r20
    1080:	d5 2e       	mov	r13, r21
    1082:	e6 2e       	mov	r14, r22
    1084:	f7 2e       	mov	r15, r23
    1086:	08 2f       	mov	r16, r24
    1088:	19 2f       	mov	r17, r25
    108a:	22 2d       	mov	r18, r2
    108c:	33 2d       	mov	r19, r3
    108e:	44 2d       	mov	r20, r4
    1090:	55 2d       	mov	r21, r5
    1092:	66 2d       	mov	r22, r6
    1094:	77 2d       	mov	r23, r7
    1096:	88 2d       	mov	r24, r8
    1098:	99 2d       	mov	r25, r9
    109a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__muldi3>
    109e:	a2 2e       	mov	r10, r18
    10a0:	b3 2e       	mov	r11, r19
    10a2:	c4 2e       	mov	r12, r20
    10a4:	d5 2e       	mov	r13, r21
    10a6:	e6 2e       	mov	r14, r22
    10a8:	f7 2e       	mov	r15, r23
    10aa:	08 2f       	mov	r16, r24
    10ac:	19 2f       	mov	r17, r25
    10ae:	2a 2c       	mov	r2, r10
    10b0:	3b 2c       	mov	r3, r11
    10b2:	4c 2c       	mov	r4, r12
    10b4:	5d 2c       	mov	r5, r13
    10b6:	6e 2c       	mov	r6, r14
    10b8:	7f 2c       	mov	r7, r15
    10ba:	80 2e       	mov	r8, r16
    10bc:	91 2e       	mov	r9, r17
    10be:	8d a5       	ldd	r24, Y+45	; 0x2d
    10c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    10c2:	af a5       	ldd	r26, Y+47	; 0x2f
    10c4:	b8 a9       	ldd	r27, Y+48	; 0x30
    10c6:	9c 01       	movw	r18, r24
    10c8:	ad 01       	movw	r20, r26
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	cb 01       	movw	r24, r22
    10d0:	a2 2e       	mov	r10, r18
    10d2:	b3 2e       	mov	r11, r19
    10d4:	c4 2e       	mov	r12, r20
    10d6:	d5 2e       	mov	r13, r21
    10d8:	e6 2e       	mov	r14, r22
    10da:	f7 2e       	mov	r15, r23
    10dc:	08 2f       	mov	r16, r24
    10de:	19 2f       	mov	r17, r25
    10e0:	22 2d       	mov	r18, r2
    10e2:	33 2d       	mov	r19, r3
    10e4:	44 2d       	mov	r20, r4
    10e6:	55 2d       	mov	r21, r5
    10e8:	66 2d       	mov	r22, r6
    10ea:	77 2d       	mov	r23, r7
    10ec:	88 2d       	mov	r24, r8
    10ee:	99 2d       	mov	r25, r9
    10f0:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__udivdi3>
    10f4:	22 2e       	mov	r2, r18
    10f6:	33 2e       	mov	r3, r19
    10f8:	44 2e       	mov	r4, r20
    10fa:	55 2e       	mov	r5, r21
    10fc:	66 2e       	mov	r6, r22
    10fe:	77 2e       	mov	r7, r23
    1100:	88 2e       	mov	r8, r24
    1102:	99 2e       	mov	r9, r25
    1104:	a2 2c       	mov	r10, r2
    1106:	b3 2c       	mov	r11, r3
    1108:	c4 2c       	mov	r12, r4
    110a:	d5 2c       	mov	r13, r5
    110c:	e6 2c       	mov	r14, r6
    110e:	f7 2c       	mov	r15, r7
    1110:	08 2d       	mov	r16, r8
    1112:	19 2d       	mov	r17, r9
    1114:	86 e9       	ldi	r24, 0x96	; 150
    1116:	28 2e       	mov	r2, r24
    1118:	31 2c       	mov	r3, r1
    111a:	41 2c       	mov	r4, r1
    111c:	51 2c       	mov	r5, r1
    111e:	61 2c       	mov	r6, r1
    1120:	71 2c       	mov	r7, r1
    1122:	43 01       	movw	r8, r6
    1124:	2a 2d       	mov	r18, r10
    1126:	3b 2d       	mov	r19, r11
    1128:	4c 2d       	mov	r20, r12
    112a:	5d 2d       	mov	r21, r13
    112c:	6e 2d       	mov	r22, r14
    112e:	7f 2d       	mov	r23, r15
    1130:	80 2f       	mov	r24, r16
    1132:	91 2f       	mov	r25, r17
    1134:	a2 2c       	mov	r10, r2
    1136:	b3 2c       	mov	r11, r3
    1138:	c4 2c       	mov	r12, r4
    113a:	d5 2c       	mov	r13, r5
    113c:	e6 2c       	mov	r14, r6
    113e:	f7 2c       	mov	r15, r7
    1140:	08 2d       	mov	r16, r8
    1142:	19 2d       	mov	r17, r9
    1144:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__cmpdi2>
    1148:	09 f0       	breq	.+2      	; 0x114c <Configure_Timer+0x16e>
    114a:	10 f4       	brcc	.+4      	; 0x1150 <Configure_Timer+0x172>
		return TIMER_FAULT;
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	28 c3       	rjmp	.+1616   	; 0x17a0 <Configure_Timer+0x7c2>
		Adjusted_Cycles = ((TC_CLK + (F_CLK/2))/F_CLK) * Avg_ISR_Cycles;
	} */

	// Disable the timer interrupts as the timer is being re-configured:

	uint64_t Numerator = Time * TC_CLK;
    1150:	8b a5       	ldd	r24, Y+43	; 0x2b
    1152:	9c a5       	ldd	r25, Y+44	; 0x2c
    1154:	9c 01       	movw	r18, r24
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TC_CLK>
    115e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <TC_CLK+0x1>
    1162:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <TC_CLK+0x2>
    1166:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <TC_CLK+0x3>
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__mulsi3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9c 01       	movw	r18, r24
    1178:	ad 01       	movw	r20, r26
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	cb 01       	movw	r24, r22
    1180:	28 87       	std	Y+8, r18	; 0x08
    1182:	39 87       	std	Y+9, r19	; 0x09
    1184:	4a 87       	std	Y+10, r20	; 0x0a
    1186:	5b 87       	std	Y+11, r21	; 0x0b
    1188:	6c 87       	std	Y+12, r22	; 0x0c
    118a:	7d 87       	std	Y+13, r23	; 0x0d
    118c:	8e 87       	std	Y+14, r24	; 0x0e
    118e:	9f 87       	std	Y+15, r25	; 0x0f
	uint64_t Scaled_Ticks = Numerator / Unit; // How many times we have to count for the requested time to have passed at the current clock frequency
    1190:	8d a5       	ldd	r24, Y+45	; 0x2d
    1192:	9e a5       	ldd	r25, Y+46	; 0x2e
    1194:	af a5       	ldd	r26, Y+47	; 0x2f
    1196:	b8 a9       	ldd	r27, Y+48	; 0x30
    1198:	9c 01       	movw	r18, r24
    119a:	ad 01       	movw	r20, r26
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	cb 01       	movw	r24, r22
    11a2:	a2 2e       	mov	r10, r18
    11a4:	b3 2e       	mov	r11, r19
    11a6:	c4 2e       	mov	r12, r20
    11a8:	d5 2e       	mov	r13, r21
    11aa:	e6 2e       	mov	r14, r22
    11ac:	f7 2e       	mov	r15, r23
    11ae:	08 2f       	mov	r16, r24
    11b0:	19 2f       	mov	r17, r25
    11b2:	28 85       	ldd	r18, Y+8	; 0x08
    11b4:	39 85       	ldd	r19, Y+9	; 0x09
    11b6:	4a 85       	ldd	r20, Y+10	; 0x0a
    11b8:	5b 85       	ldd	r21, Y+11	; 0x0b
    11ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    11bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    11be:	8e 85       	ldd	r24, Y+14	; 0x0e
    11c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    11c2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__udivdi3>
    11c6:	a2 2e       	mov	r10, r18
    11c8:	b3 2e       	mov	r11, r19
    11ca:	c4 2e       	mov	r12, r20
    11cc:	d5 2e       	mov	r13, r21
    11ce:	e6 2e       	mov	r14, r22
    11d0:	f7 2e       	mov	r15, r23
    11d2:	08 2f       	mov	r16, r24
    11d4:	19 2f       	mov	r17, r25
    11d6:	a8 8a       	std	Y+16, r10	; 0x10
    11d8:	b9 8a       	std	Y+17, r11	; 0x11
    11da:	ca 8a       	std	Y+18, r12	; 0x12
    11dc:	db 8a       	std	Y+19, r13	; 0x13
    11de:	ec 8a       	std	Y+20, r14	; 0x14
    11e0:	fd 8a       	std	Y+21, r15	; 0x15
    11e2:	0e 8b       	std	Y+22, r16	; 0x16
    11e4:	1f 8b       	std	Y+23, r17	; 0x17
	
	uint16_t Prescaler = 0;
    11e6:	1a 82       	std	Y+2, r1	; 0x02
    11e8:	19 82       	std	Y+1, r1	; 0x01
	uint32_t Calculated_Prescaler = 0; // Ensures that OCRxA is <= (2^n - 1)
    11ea:	1b 82       	std	Y+3, r1	; 0x03
    11ec:	1c 82       	std	Y+4, r1	; 0x04
    11ee:	1d 82       	std	Y+5, r1	; 0x05
    11f0:	1e 82       	std	Y+6, r1	; 0x06
	
	switch(Selected_Timer){
    11f2:	89 a9       	ldd	r24, Y+49	; 0x31
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <Configure_Timer+0x222>
    11fe:	51 c0       	rjmp	.+162    	; 0x12a2 <Configure_Timer+0x2c4>
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	91 05       	cpc	r25, r1
    1204:	09 f4       	brne	.+2      	; 0x1208 <Configure_Timer+0x22a>
    1206:	96 c0       	rjmp	.+300    	; 0x1334 <Configure_Timer+0x356>
    1208:	89 2b       	or	r24, r25
    120a:	09 f0       	breq	.+2      	; 0x120e <Configure_Timer+0x230>
    120c:	dc c0       	rjmp	.+440    	; 0x13c6 <Configure_Timer+0x3e8>
		
		case _16_bit:
			
			TIMSK1 = TIMSK1 & ~(1 << OCIE1A); // Disable the timer interrupt as it is being reconfigured.
    120e:	8f e6       	ldi	r24, 0x6F	; 111
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	2f e6       	ldi	r18, 0x6F	; 111
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	f9 01       	movw	r30, r18
    1218:	20 81       	ld	r18, Z
    121a:	2d 7f       	andi	r18, 0xFD	; 253
    121c:	fc 01       	movw	r30, r24
    121e:	20 83       	st	Z, r18

			Calculated_Prescaler = (Scaled_Ticks+65534)/65535; // Ceiling function
    1220:	28 89       	ldd	r18, Y+16	; 0x10
    1222:	39 89       	ldd	r19, Y+17	; 0x11
    1224:	4a 89       	ldd	r20, Y+18	; 0x12
    1226:	5b 89       	ldd	r21, Y+19	; 0x13
    1228:	6c 89       	ldd	r22, Y+20	; 0x14
    122a:	7d 89       	ldd	r23, Y+21	; 0x15
    122c:	8e 89       	ldd	r24, Y+22	; 0x16
    122e:	9f 89       	ldd	r25, Y+23	; 0x17
    1230:	22 50       	subi	r18, 0x02	; 2
    1232:	31 09       	sbc	r19, r1
    1234:	4f 4f       	sbci	r20, 0xFF	; 255
    1236:	5f 4f       	sbci	r21, 0xFF	; 255
    1238:	6f 4f       	sbci	r22, 0xFF	; 255
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	8f 4f       	sbci	r24, 0xFF	; 255
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	22 2e       	mov	r2, r18
    1242:	33 2e       	mov	r3, r19
    1244:	44 2e       	mov	r4, r20
    1246:	55 2e       	mov	r5, r21
    1248:	66 2e       	mov	r6, r22
    124a:	77 2e       	mov	r7, r23
    124c:	88 2e       	mov	r8, r24
    124e:	99 2e       	mov	r9, r25
    1250:	aa 24       	eor	r10, r10
    1252:	aa 94       	dec	r10
    1254:	bb 24       	eor	r11, r11
    1256:	ba 94       	dec	r11
    1258:	c1 2c       	mov	r12, r1
    125a:	d1 2c       	mov	r13, r1
    125c:	e1 2c       	mov	r14, r1
    125e:	f1 2c       	mov	r15, r1
    1260:	00 e0       	ldi	r16, 0x00	; 0
    1262:	10 e0       	ldi	r17, 0x00	; 0
    1264:	22 2d       	mov	r18, r2
    1266:	33 2d       	mov	r19, r3
    1268:	44 2d       	mov	r20, r4
    126a:	55 2d       	mov	r21, r5
    126c:	66 2d       	mov	r22, r6
    126e:	77 2d       	mov	r23, r7
    1270:	88 2d       	mov	r24, r8
    1272:	99 2d       	mov	r25, r9
    1274:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__udivdi3>
    1278:	a2 2e       	mov	r10, r18
    127a:	b3 2e       	mov	r11, r19
    127c:	c4 2e       	mov	r12, r20
    127e:	d5 2e       	mov	r13, r21
    1280:	e6 2e       	mov	r14, r22
    1282:	f7 2e       	mov	r15, r23
    1284:	08 2f       	mov	r16, r24
    1286:	19 2f       	mov	r17, r25
    1288:	2a 2d       	mov	r18, r10
    128a:	3b 2d       	mov	r19, r11
    128c:	4c 2d       	mov	r20, r12
    128e:	5d 2d       	mov	r21, r13
    1290:	6e 2d       	mov	r22, r14
    1292:	7f 2d       	mov	r23, r15
    1294:	80 2f       	mov	r24, r16
    1296:	91 2f       	mov	r25, r17
    1298:	2b 83       	std	Y+3, r18	; 0x03
    129a:	3c 83       	std	Y+4, r19	; 0x04
    129c:	4d 83       	std	Y+5, r20	; 0x05
    129e:	5e 83       	std	Y+6, r21	; 0x06

			break;
    12a0:	94 c0       	rjmp	.+296    	; 0x13ca <Configure_Timer+0x3ec>
		
		case _8_bit1:
			
			TIMSK0 = TIMSK0 & ~(1 << OCIE0A);
    12a2:	8e e6       	ldi	r24, 0x6E	; 110
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	2e e6       	ldi	r18, 0x6E	; 110
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	f9 01       	movw	r30, r18
    12ac:	20 81       	ld	r18, Z
    12ae:	2d 7f       	andi	r18, 0xFD	; 253
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18
			
			Calculated_Prescaler = (Scaled_Ticks+254)/255;
    12b4:	28 89       	ldd	r18, Y+16	; 0x10
    12b6:	39 89       	ldd	r19, Y+17	; 0x11
    12b8:	4a 89       	ldd	r20, Y+18	; 0x12
    12ba:	5b 89       	ldd	r21, Y+19	; 0x13
    12bc:	6c 89       	ldd	r22, Y+20	; 0x14
    12be:	7d 89       	ldd	r23, Y+21	; 0x15
    12c0:	8e 89       	ldd	r24, Y+22	; 0x16
    12c2:	9f 89       	ldd	r25, Y+23	; 0x17
    12c4:	22 50       	subi	r18, 0x02	; 2
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	4f 4f       	sbci	r20, 0xFF	; 255
    12ca:	5f 4f       	sbci	r21, 0xFF	; 255
    12cc:	6f 4f       	sbci	r22, 0xFF	; 255
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	8f 4f       	sbci	r24, 0xFF	; 255
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	22 2e       	mov	r2, r18
    12d6:	33 2e       	mov	r3, r19
    12d8:	44 2e       	mov	r4, r20
    12da:	55 2e       	mov	r5, r21
    12dc:	66 2e       	mov	r6, r22
    12de:	77 2e       	mov	r7, r23
    12e0:	88 2e       	mov	r8, r24
    12e2:	99 2e       	mov	r9, r25
    12e4:	aa 24       	eor	r10, r10
    12e6:	aa 94       	dec	r10
    12e8:	b1 2c       	mov	r11, r1
    12ea:	c1 2c       	mov	r12, r1
    12ec:	d1 2c       	mov	r13, r1
    12ee:	e1 2c       	mov	r14, r1
    12f0:	f1 2c       	mov	r15, r1
    12f2:	00 e0       	ldi	r16, 0x00	; 0
    12f4:	10 e0       	ldi	r17, 0x00	; 0
    12f6:	22 2d       	mov	r18, r2
    12f8:	33 2d       	mov	r19, r3
    12fa:	44 2d       	mov	r20, r4
    12fc:	55 2d       	mov	r21, r5
    12fe:	66 2d       	mov	r22, r6
    1300:	77 2d       	mov	r23, r7
    1302:	88 2d       	mov	r24, r8
    1304:	99 2d       	mov	r25, r9
    1306:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__udivdi3>
    130a:	a2 2e       	mov	r10, r18
    130c:	b3 2e       	mov	r11, r19
    130e:	c4 2e       	mov	r12, r20
    1310:	d5 2e       	mov	r13, r21
    1312:	e6 2e       	mov	r14, r22
    1314:	f7 2e       	mov	r15, r23
    1316:	08 2f       	mov	r16, r24
    1318:	19 2f       	mov	r17, r25
    131a:	2a 2d       	mov	r18, r10
    131c:	3b 2d       	mov	r19, r11
    131e:	4c 2d       	mov	r20, r12
    1320:	5d 2d       	mov	r21, r13
    1322:	6e 2d       	mov	r22, r14
    1324:	7f 2d       	mov	r23, r15
    1326:	80 2f       	mov	r24, r16
    1328:	91 2f       	mov	r25, r17
    132a:	2b 83       	std	Y+3, r18	; 0x03
    132c:	3c 83       	std	Y+4, r19	; 0x04
    132e:	4d 83       	std	Y+5, r20	; 0x05
    1330:	5e 83       	std	Y+6, r21	; 0x06
			
			break;
    1332:	4b c0       	rjmp	.+150    	; 0x13ca <Configure_Timer+0x3ec>
			
		case _8_bit2:
			
			TIMSK2 = TIMSK2 & ~(1 << OCIE2A);
    1334:	80 e7       	ldi	r24, 0x70	; 112
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	20 e7       	ldi	r18, 0x70	; 112
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	f9 01       	movw	r30, r18
    133e:	20 81       	ld	r18, Z
    1340:	2d 7f       	andi	r18, 0xFD	; 253
    1342:	fc 01       	movw	r30, r24
    1344:	20 83       	st	Z, r18
			
			Calculated_Prescaler = (Scaled_Ticks+254)/255;
    1346:	28 89       	ldd	r18, Y+16	; 0x10
    1348:	39 89       	ldd	r19, Y+17	; 0x11
    134a:	4a 89       	ldd	r20, Y+18	; 0x12
    134c:	5b 89       	ldd	r21, Y+19	; 0x13
    134e:	6c 89       	ldd	r22, Y+20	; 0x14
    1350:	7d 89       	ldd	r23, Y+21	; 0x15
    1352:	8e 89       	ldd	r24, Y+22	; 0x16
    1354:	9f 89       	ldd	r25, Y+23	; 0x17
    1356:	22 50       	subi	r18, 0x02	; 2
    1358:	3f 4f       	sbci	r19, 0xFF	; 255
    135a:	4f 4f       	sbci	r20, 0xFF	; 255
    135c:	5f 4f       	sbci	r21, 0xFF	; 255
    135e:	6f 4f       	sbci	r22, 0xFF	; 255
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	8f 4f       	sbci	r24, 0xFF	; 255
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	22 2e       	mov	r2, r18
    1368:	33 2e       	mov	r3, r19
    136a:	44 2e       	mov	r4, r20
    136c:	55 2e       	mov	r5, r21
    136e:	66 2e       	mov	r6, r22
    1370:	77 2e       	mov	r7, r23
    1372:	88 2e       	mov	r8, r24
    1374:	99 2e       	mov	r9, r25
    1376:	aa 24       	eor	r10, r10
    1378:	aa 94       	dec	r10
    137a:	b1 2c       	mov	r11, r1
    137c:	c1 2c       	mov	r12, r1
    137e:	d1 2c       	mov	r13, r1
    1380:	e1 2c       	mov	r14, r1
    1382:	f1 2c       	mov	r15, r1
    1384:	00 e0       	ldi	r16, 0x00	; 0
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	22 2d       	mov	r18, r2
    138a:	33 2d       	mov	r19, r3
    138c:	44 2d       	mov	r20, r4
    138e:	55 2d       	mov	r21, r5
    1390:	66 2d       	mov	r22, r6
    1392:	77 2d       	mov	r23, r7
    1394:	88 2d       	mov	r24, r8
    1396:	99 2d       	mov	r25, r9
    1398:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__udivdi3>
    139c:	a2 2e       	mov	r10, r18
    139e:	b3 2e       	mov	r11, r19
    13a0:	c4 2e       	mov	r12, r20
    13a2:	d5 2e       	mov	r13, r21
    13a4:	e6 2e       	mov	r14, r22
    13a6:	f7 2e       	mov	r15, r23
    13a8:	08 2f       	mov	r16, r24
    13aa:	19 2f       	mov	r17, r25
    13ac:	2a 2d       	mov	r18, r10
    13ae:	3b 2d       	mov	r19, r11
    13b0:	4c 2d       	mov	r20, r12
    13b2:	5d 2d       	mov	r21, r13
    13b4:	6e 2d       	mov	r22, r14
    13b6:	7f 2d       	mov	r23, r15
    13b8:	80 2f       	mov	r24, r16
    13ba:	91 2f       	mov	r25, r17
    13bc:	2b 83       	std	Y+3, r18	; 0x03
    13be:	3c 83       	std	Y+4, r19	; 0x04
    13c0:	4d 83       	std	Y+5, r20	; 0x05
    13c2:	5e 83       	std	Y+6, r21	; 0x06
		
			break;
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <Configure_Timer+0x3ec>
			
		default:
		
			return TIMER_FAULT;
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	eb c1       	rjmp	.+982    	; 0x17a0 <Configure_Timer+0x7c2>
		
	}


	if(Calculated_Prescaler > 1024){  // The required count will overflow the selected timer, even with the largest available prescaler
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	ad 81       	ldd	r26, Y+5	; 0x05
    13d0:	be 81       	ldd	r27, Y+6	; 0x06
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	94 40       	sbci	r25, 0x04	; 4
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	08 f4       	brcc	.+2      	; 0x13de <Configure_Timer+0x400>
    13dc:	91 c0       	rjmp	.+290    	; 0x1500 <Configure_Timer+0x522>

		Prescaler = 1024;
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	94 e0       	ldi	r25, 0x04	; 4
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01
		
		//Adjusted_Cycles = (((TC_CLK + (F_CLK*Prescaler/2))/F_CLK*Prescaler) * Avg_ISR_Cycles); // I may revisit this. Quite challenging to get right, and even harder to get consistently right
		
		Calculated_Ticks[Selected_Timer] = (Scaled_Ticks >> 10);
    13e6:	89 a9       	ldd	r24, Y+49	; 0x31
    13e8:	e8 2f       	mov	r30, r24
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	28 89       	ldd	r18, Y+16	; 0x10
    13ee:	39 89       	ldd	r19, Y+17	; 0x11
    13f0:	4a 89       	ldd	r20, Y+18	; 0x12
    13f2:	5b 89       	ldd	r21, Y+19	; 0x13
    13f4:	6c 89       	ldd	r22, Y+20	; 0x14
    13f6:	7d 89       	ldd	r23, Y+21	; 0x15
    13f8:	8e 89       	ldd	r24, Y+22	; 0x16
    13fa:	9f 89       	ldd	r25, Y+23	; 0x17
    13fc:	0a e0       	ldi	r16, 0x0A	; 10
    13fe:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__lshrdi3>
    1402:	a2 2e       	mov	r10, r18
    1404:	b3 2e       	mov	r11, r19
    1406:	c4 2e       	mov	r12, r20
    1408:	d5 2e       	mov	r13, r21
    140a:	e6 2e       	mov	r14, r22
    140c:	f7 2e       	mov	r15, r23
    140e:	08 2f       	mov	r16, r24
    1410:	19 2f       	mov	r17, r25
    1412:	d6 01       	movw	r26, r12
    1414:	c5 01       	movw	r24, r10
    1416:	9f 01       	movw	r18, r30
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	22 0f       	add	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	27 5c       	subi	r18, 0xC7	; 199
    1422:	3e 4f       	sbci	r19, 0xFE	; 254
    1424:	f9 01       	movw	r30, r18
    1426:	80 83       	st	Z, r24
    1428:	91 83       	std	Z+1, r25	; 0x01
    142a:	a2 83       	std	Z+2, r26	; 0x02
    142c:	b3 83       	std	Z+3, r27	; 0x03
		
		Remaining_Ticks[Selected_Timer] = Calculated_Ticks[Selected_Timer];
    142e:	89 a9       	ldd	r24, Y+49	; 0x31
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	89 a9       	ldd	r24, Y+49	; 0x31
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	87 5c       	subi	r24, 0xC7	; 199
    1444:	9e 4f       	sbci	r25, 0xFE	; 254
    1446:	fc 01       	movw	r30, r24
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	a2 81       	ldd	r26, Z+2	; 0x02
    144e:	b3 81       	ldd	r27, Z+3	; 0x03
    1450:	22 0f       	add	r18, r18
    1452:	33 1f       	adc	r19, r19
    1454:	22 0f       	add	r18, r18
    1456:	33 1f       	adc	r19, r19
    1458:	2b 5b       	subi	r18, 0xBB	; 187
    145a:	3e 4f       	sbci	r19, 0xFE	; 254
    145c:	f9 01       	movw	r30, r18
    145e:	80 83       	st	Z, r24
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	a2 83       	std	Z+2, r26	; 0x02
    1464:	b3 83       	std	Z+3, r27	; 0x03
		
		switch(Selected_Timer){
    1466:	89 a9       	ldd	r24, Y+49	; 0x31
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	91 05       	cpc	r25, r1
    1470:	d9 f0       	breq	.+54     	; 0x14a8 <Configure_Timer+0x4ca>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	91 05       	cpc	r25, r1
    1476:	69 f1       	breq	.+90     	; 0x14d2 <Configure_Timer+0x4f4>
    1478:	89 2b       	or	r24, r25
    147a:	09 f0       	breq	.+2      	; 0x147e <Configure_Timer+0x4a0>
    147c:	3f c0       	rjmp	.+126    	; 0x14fc <Configure_Timer+0x51e>
			
			case _16_bit:
				
				TCCR1B = (1 << CS12) | (1 << CS10) | (1 << WGM12); // Set prescaler to 1024, CTC mode (TCCR = Timer counter control register)
    147e:	81 e8       	ldi	r24, 0x81	; 129
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	2d e0       	ldi	r18, 0x0D	; 13
    1484:	fc 01       	movw	r30, r24
    1486:	20 83       	st	Z, r18
								
				OCR1AH = 0xFF;
    1488:	89 e8       	ldi	r24, 0x89	; 137
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	2f ef       	ldi	r18, 0xFF	; 255
    148e:	fc 01       	movw	r30, r24
    1490:	20 83       	st	Z, r18
				OCR1AL = 0xFF; // Timer begins
    1492:	88 e8       	ldi	r24, 0x88	; 136
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	2f ef       	ldi	r18, 0xFF	; 255
    1498:	fc 01       	movw	r30, r24
    149a:	20 83       	st	Z, r18
				
				TIMSK1 = (1 << OCIE1A); // Timer/Counter1 Interrupt Mask Register -> Enabled interrupt for progrm at TIMER1_COMPA_vect to be executed on compare match
    149c:	8f e6       	ldi	r24, 0x6F	; 111
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	22 e0       	ldi	r18, 0x02	; 2
    14a2:	fc 01       	movw	r30, r24
    14a4:	20 83       	st	Z, r18
				break;
    14a6:	2a c0       	rjmp	.+84     	; 0x14fc <Configure_Timer+0x51e>
			
			case _8_bit1:
				
				TCCR0A = (1 << WGM01);
    14a8:	84 e4       	ldi	r24, 0x44	; 68
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	22 e0       	ldi	r18, 0x02	; 2
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 83       	st	Z, r18
				TCCR0B = (1 << CS02) | (1 << CS00);
    14b2:	85 e4       	ldi	r24, 0x45	; 69
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	25 e0       	ldi	r18, 0x05	; 5
    14b8:	fc 01       	movw	r30, r24
    14ba:	20 83       	st	Z, r18
				
				TIMSK0 = (1 << OCIE0A);
    14bc:	8e e6       	ldi	r24, 0x6E	; 110
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	22 e0       	ldi	r18, 0x02	; 2
    14c2:	fc 01       	movw	r30, r24
    14c4:	20 83       	st	Z, r18
				
				OCR0A = 0xFF;
    14c6:	87 e4       	ldi	r24, 0x47	; 71
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	2f ef       	ldi	r18, 0xFF	; 255
    14cc:	fc 01       	movw	r30, r24
    14ce:	20 83       	st	Z, r18
				break;
    14d0:	15 c0       	rjmp	.+42     	; 0x14fc <Configure_Timer+0x51e>
			
			case _8_bit2:

				TCCR2A = (1 << WGM21);
    14d2:	80 eb       	ldi	r24, 0xB0	; 176
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	22 e0       	ldi	r18, 0x02	; 2
    14d8:	fc 01       	movw	r30, r24
    14da:	20 83       	st	Z, r18
				TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);
    14dc:	81 eb       	ldi	r24, 0xB1	; 177
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	27 e0       	ldi	r18, 0x07	; 7
    14e2:	fc 01       	movw	r30, r24
    14e4:	20 83       	st	Z, r18

				TIMSK2 = (1 << OCIE2A);
    14e6:	80 e7       	ldi	r24, 0x70	; 112
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	22 e0       	ldi	r18, 0x02	; 2
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
	
				OCR2A = 0xFF;
    14f0:	83 eb       	ldi	r24, 0xB3	; 179
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	2f ef       	ldi	r18, 0xFF	; 255
    14f6:	fc 01       	movw	r30, r24
    14f8:	20 83       	st	Z, r18
				break;
    14fa:	00 00       	nop
			
		}
		
		return TIMER_OK;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	50 c1       	rjmp	.+672    	; 0x17a0 <Configure_Timer+0x7c2>
		
	}else{
		
		Calculated_Ticks[Selected_Timer] = 0;
    1500:	89 a9       	ldd	r24, Y+49	; 0x31
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	87 5c       	subi	r24, 0xC7	; 199
    1510:	9e 4f       	sbci	r25, 0xFE	; 254
    1512:	fc 01       	movw	r30, r24
    1514:	10 82       	st	Z, r1
    1516:	11 82       	std	Z+1, r1	; 0x01
    1518:	12 82       	std	Z+2, r1	; 0x02
    151a:	13 82       	std	Z+3, r1	; 0x03
		
		uint16_t Clock_Dividers[5] = {1, 8, 64, 256, 1024}; 
    151c:	8a e0       	ldi	r24, 0x0A	; 10
    151e:	eb e0       	ldi	r30, 0x0B	; 11
    1520:	f1 e0       	ldi	r31, 0x01	; 1
    1522:	de 01       	movw	r26, r28
    1524:	91 96       	adiw	r26, 0x21	; 33
    1526:	01 90       	ld	r0, Z+
    1528:	0d 92       	st	X+, r0
    152a:	8a 95       	dec	r24
    152c:	e1 f7       	brne	.-8      	; 0x1526 <Configure_Timer+0x548>
		
		for(uint8_t i = 0; i <= 4; i++){  // Logic to ensure that the Raw_Count <= uint16_t
    152e:	1f 82       	std	Y+7, r1	; 0x07
    1530:	2e c0       	rjmp	.+92     	; 0x158e <Configure_Timer+0x5b0>
			
			if(Clock_Dividers[i] >= Calculated_Prescaler){
    1532:	8f 81       	ldd	r24, Y+7	; 0x07
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	9e 01       	movw	r18, r28
    153e:	2f 5f       	subi	r18, 0xFF	; 255
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	82 0f       	add	r24, r18
    1544:	93 1f       	adc	r25, r19
    1546:	80 96       	adiw	r24, 0x20	; 32
    1548:	fc 01       	movw	r30, r24
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	9c 01       	movw	r18, r24
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	ad 81       	ldd	r26, Y+5	; 0x05
    155a:	be 81       	ldd	r27, Y+6	; 0x06
    155c:	28 17       	cp	r18, r24
    155e:	39 07       	cpc	r19, r25
    1560:	4a 07       	cpc	r20, r26
    1562:	5b 07       	cpc	r21, r27
    1564:	88 f0       	brcs	.+34     	; 0x1588 <Configure_Timer+0x5aa>
				Prescaler = Clock_Dividers[i];
    1566:	8f 81       	ldd	r24, Y+7	; 0x07
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	9e 01       	movw	r18, r28
    1572:	2f 5f       	subi	r18, 0xFF	; 255
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	82 0f       	add	r24, r18
    1578:	93 1f       	adc	r25, r19
    157a:	80 96       	adiw	r24, 0x20	; 32
    157c:	fc 01       	movw	r30, r24
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	89 83       	std	Y+1, r24	; 0x01
				break;
    1586:	06 c0       	rjmp	.+12     	; 0x1594 <Configure_Timer+0x5b6>
		
		Calculated_Ticks[Selected_Timer] = 0;
		
		uint16_t Clock_Dividers[5] = {1, 8, 64, 256, 1024}; 
		
		for(uint8_t i = 0; i <= 4; i++){  // Logic to ensure that the Raw_Count <= uint16_t
    1588:	8f 81       	ldd	r24, Y+7	; 0x07
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	8f 83       	std	Y+7, r24	; 0x07
    158e:	8f 81       	ldd	r24, Y+7	; 0x07
    1590:	85 30       	cpi	r24, 0x05	; 5
    1592:	78 f2       	brcs	.-98     	; 0x1532 <Configure_Timer+0x554>
			}
			
		}
	}
	
	uint32_t Denominator =  Prescaler * Unit;
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	9c 01       	movw	r18, r24
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	8d a5       	ldd	r24, Y+45	; 0x2d
    15a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    15a2:	af a5       	ldd	r26, Y+47	; 0x2f
    15a4:	b8 a9       	ldd	r27, Y+48	; 0x30
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__mulsi3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	88 8f       	std	Y+24, r24	; 0x18
    15b4:	99 8f       	std	Y+25, r25	; 0x19
    15b6:	aa 8f       	std	Y+26, r26	; 0x1a
    15b8:	bb 8f       	std	Y+27, r27	; 0x1b

	if(Denominator == 0) return TIMER_FAULT;
    15ba:	88 8d       	ldd	r24, Y+24	; 0x18
    15bc:	99 8d       	ldd	r25, Y+25	; 0x19
    15be:	aa 8d       	ldd	r26, Y+26	; 0x1a
    15c0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    15c2:	89 2b       	or	r24, r25
    15c4:	8a 2b       	or	r24, r26
    15c6:	8b 2b       	or	r24, r27
    15c8:	11 f4       	brne	.+4      	; 0x15ce <Configure_Timer+0x5f0>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	e9 c0       	rjmp	.+466    	; 0x17a0 <Configure_Timer+0x7c2>
	
	//Adjusted_Cycles = (((TC_CLK + (F_CLK*Prescaler/2))/F_CLK*Prescaler) * Avg_ISR_Cycles); 
	
	// Rounding integer division (A new trick I learned) reduces error of Timer_Top ideally to +- 0.5:
	
	uint32_t Timer_Top = ((Numerator + (Denominator/2)) / Denominator); 
    15ce:	88 8d       	ldd	r24, Y+24	; 0x18
    15d0:	99 8d       	ldd	r25, Y+25	; 0x19
    15d2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    15d4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    15d6:	b6 95       	lsr	r27
    15d8:	a7 95       	ror	r26
    15da:	97 95       	ror	r25
    15dc:	87 95       	ror	r24
    15de:	5c 01       	movw	r10, r24
    15e0:	6d 01       	movw	r12, r26
    15e2:	e1 2c       	mov	r14, r1
    15e4:	f1 2c       	mov	r15, r1
    15e6:	87 01       	movw	r16, r14
    15e8:	2a 2d       	mov	r18, r10
    15ea:	3b 2d       	mov	r19, r11
    15ec:	4c 2d       	mov	r20, r12
    15ee:	5d 2d       	mov	r21, r13
    15f0:	6e 2d       	mov	r22, r14
    15f2:	7f 2d       	mov	r23, r15
    15f4:	80 2f       	mov	r24, r16
    15f6:	91 2f       	mov	r25, r17
    15f8:	a8 84       	ldd	r10, Y+8	; 0x08
    15fa:	b9 84       	ldd	r11, Y+9	; 0x09
    15fc:	ca 84       	ldd	r12, Y+10	; 0x0a
    15fe:	db 84       	ldd	r13, Y+11	; 0x0b
    1600:	ec 84       	ldd	r14, Y+12	; 0x0c
    1602:	fd 84       	ldd	r15, Y+13	; 0x0d
    1604:	0e 85       	ldd	r16, Y+14	; 0x0e
    1606:	1f 85       	ldd	r17, Y+15	; 0x0f
    1608:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__adddi3>
    160c:	22 2e       	mov	r2, r18
    160e:	33 2e       	mov	r3, r19
    1610:	44 2e       	mov	r4, r20
    1612:	55 2e       	mov	r5, r21
    1614:	66 2e       	mov	r6, r22
    1616:	77 2e       	mov	r7, r23
    1618:	88 2e       	mov	r8, r24
    161a:	99 2e       	mov	r9, r25
    161c:	88 8d       	ldd	r24, Y+24	; 0x18
    161e:	99 8d       	ldd	r25, Y+25	; 0x19
    1620:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1622:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1624:	9c 01       	movw	r18, r24
    1626:	ad 01       	movw	r20, r26
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	cb 01       	movw	r24, r22
    162e:	a2 2e       	mov	r10, r18
    1630:	b3 2e       	mov	r11, r19
    1632:	c4 2e       	mov	r12, r20
    1634:	d5 2e       	mov	r13, r21
    1636:	e6 2e       	mov	r14, r22
    1638:	f7 2e       	mov	r15, r23
    163a:	08 2f       	mov	r16, r24
    163c:	19 2f       	mov	r17, r25
    163e:	22 2d       	mov	r18, r2
    1640:	33 2d       	mov	r19, r3
    1642:	44 2d       	mov	r20, r4
    1644:	55 2d       	mov	r21, r5
    1646:	66 2d       	mov	r22, r6
    1648:	77 2d       	mov	r23, r7
    164a:	88 2d       	mov	r24, r8
    164c:	99 2d       	mov	r25, r9
    164e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__udivdi3>
    1652:	a2 2e       	mov	r10, r18
    1654:	b3 2e       	mov	r11, r19
    1656:	c4 2e       	mov	r12, r20
    1658:	d5 2e       	mov	r13, r21
    165a:	e6 2e       	mov	r14, r22
    165c:	f7 2e       	mov	r15, r23
    165e:	08 2f       	mov	r16, r24
    1660:	19 2f       	mov	r17, r25
    1662:	2a 2d       	mov	r18, r10
    1664:	3b 2d       	mov	r19, r11
    1666:	4c 2d       	mov	r20, r12
    1668:	5d 2d       	mov	r21, r13
    166a:	6e 2d       	mov	r22, r14
    166c:	7f 2d       	mov	r23, r15
    166e:	80 2f       	mov	r24, r16
    1670:	91 2f       	mov	r25, r17
    1672:	2c 8f       	std	Y+28, r18	; 0x1c
    1674:	3d 8f       	std	Y+29, r19	; 0x1d
    1676:	4e 8f       	std	Y+30, r20	; 0x1e
    1678:	5f 8f       	std	Y+31, r21	; 0x1f
	
	if (Timer_Top == 0) return TIMER_FAULT;
    167a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    167c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    167e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1680:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1682:	89 2b       	or	r24, r25
    1684:	8a 2b       	or	r24, r26
    1686:	8b 2b       	or	r24, r27
    1688:	11 f4       	brne	.+4      	; 0x168e <Configure_Timer+0x6b0>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	89 c0       	rjmp	.+274    	; 0x17a0 <Configure_Timer+0x7c2>

	if( (Selected_Timer == _8_bit1 || Selected_Timer == _8_bit2) && Timer_Top > 255 ){
    168e:	89 a9       	ldd	r24, Y+49	; 0x31
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	19 f0       	breq	.+6      	; 0x169a <Configure_Timer+0x6bc>
    1694:	89 a9       	ldd	r24, Y+49	; 0x31
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	61 f4       	brne	.+24     	; 0x16b2 <Configure_Timer+0x6d4>
    169a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    169c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    169e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    16a0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    16a2:	8f 3f       	cpi	r24, 0xFF	; 255
    16a4:	91 05       	cpc	r25, r1
    16a6:	a1 05       	cpc	r26, r1
    16a8:	b1 05       	cpc	r27, r1
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <Configure_Timer+0x6d4>
    16ac:	10 f0       	brcs	.+4      	; 0x16b2 <Configure_Timer+0x6d4>
		
		return TIMER_FAULT; 
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	77 c0       	rjmp	.+238    	; 0x17a0 <Configure_Timer+0x7c2>
		
	}else if(Selected_Timer == _16_bit && Timer_Top > 65535){
    16b2:	89 a9       	ldd	r24, Y+49	; 0x31
    16b4:	88 23       	and	r24, r24
    16b6:	51 f4       	brne	.+20     	; 0x16cc <Configure_Timer+0x6ee>
    16b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16bc:	ae 8d       	ldd	r26, Y+30	; 0x1e
    16be:	bf 8d       	ldd	r27, Y+31	; 0x1f
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	a1 40       	sbci	r26, 0x01	; 1
    16c4:	b1 05       	cpc	r27, r1
    16c6:	10 f0       	brcs	.+4      	; 0x16cc <Configure_Timer+0x6ee>
		
		return TIMER_FAULT;
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	6a c0       	rjmp	.+212    	; 0x17a0 <Configure_Timer+0x7c2>
		
	}
	
	Timer_Status Status = Set_Prescaler(Selected_Timer, Prescaler);
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	bc 01       	movw	r22, r24
    16d2:	89 a9       	ldd	r24, Y+49	; 0x31
    16d4:	0e 94 f4 06 	call	0xde8	; 0xde8 <Set_Prescaler>
    16d8:	88 a3       	std	Y+32, r24	; 0x20
	
	if(Status == TIMER_FAULT){
    16da:	88 a1       	ldd	r24, Y+32	; 0x20
    16dc:	88 23       	and	r24, r24
    16de:	11 f4       	brne	.+4      	; 0x16e4 <Configure_Timer+0x706>
		return TIMER_FAULT;
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	5e c0       	rjmp	.+188    	; 0x17a0 <Configure_Timer+0x7c2>
	}
	
	switch(Selected_Timer){
    16e4:	89 a9       	ldd	r24, Y+49	; 0x31
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	49 f1       	breq	.+82     	; 0x1742 <Configure_Timer+0x764>
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	91 05       	cpc	r25, r1
    16f4:	e9 f1       	breq	.+122    	; 0x1770 <Configure_Timer+0x792>
    16f6:	89 2b       	or	r24, r25
    16f8:	09 f0       	breq	.+2      	; 0x16fc <Configure_Timer+0x71e>
    16fa:	51 c0       	rjmp	.+162    	; 0x179e <Configure_Timer+0x7c0>
		
		case _16_bit:
				
			Modes[_16_bit] = TIMER_CTC;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Modes>
				
			TCCR1B |= (1 << WGM12); 
    1702:	81 e8       	ldi	r24, 0x81	; 129
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	21 e8       	ldi	r18, 0x81	; 129
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	f9 01       	movw	r30, r18
    170c:	20 81       	ld	r18, Z
    170e:	28 60       	ori	r18, 0x08	; 8
    1710:	fc 01       	movw	r30, r24
    1712:	20 83       	st	Z, r18
			
			OCR1AH = (Timer_Top >> 8) & 0xFF;
    1714:	29 e8       	ldi	r18, 0x89	; 137
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	8c 8d       	ldd	r24, Y+28	; 0x1c
    171a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    171c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    171e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1720:	89 2f       	mov	r24, r25
    1722:	9a 2f       	mov	r25, r26
    1724:	ab 2f       	mov	r26, r27
    1726:	bb 27       	eor	r27, r27
    1728:	f9 01       	movw	r30, r18
    172a:	80 83       	st	Z, r24
			TIMSK1 = (1 << OCIE1A); // Timer/Counter1 Interrupt Mask Register -> Enabled interrupt for progrm at TIMER1_COMPA_vect to be executed on compare match
    172c:	8f e6       	ldi	r24, 0x6F	; 111
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	22 e0       	ldi	r18, 0x02	; 2
    1732:	fc 01       	movw	r30, r24
    1734:	20 83       	st	Z, r18
			OCR1AL = (Timer_Top & 0xFF); // Timer begins
    1736:	88 e8       	ldi	r24, 0x88	; 136
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    173c:	fc 01       	movw	r30, r24
    173e:	20 83       	st	Z, r18
			
				
			break;
    1740:	2e c0       	rjmp	.+92     	; 0x179e <Configure_Timer+0x7c0>
			
		case _8_bit1:
			
			Modes[_8_bit1] = TIMER_CTC;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Modes+0x1>

			TCCR0A |= (1 << WGM01); 	
    1748:	84 e4       	ldi	r24, 0x44	; 68
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	24 e4       	ldi	r18, 0x44	; 68
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	f9 01       	movw	r30, r18
    1752:	20 81       	ld	r18, Z
    1754:	22 60       	ori	r18, 0x02	; 2
    1756:	fc 01       	movw	r30, r24
    1758:	20 83       	st	Z, r18
			
			TIMSK0 = (1 << OCIE0A);
    175a:	8e e6       	ldi	r24, 0x6E	; 110
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	22 e0       	ldi	r18, 0x02	; 2
    1760:	fc 01       	movw	r30, r24
    1762:	20 83       	st	Z, r18
			OCR0A = Timer_Top;		
    1764:	87 e4       	ldi	r24, 0x47	; 71
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	2c 8d       	ldd	r18, Y+28	; 0x1c
    176a:	fc 01       	movw	r30, r24
    176c:	20 83       	st	Z, r18
		
			break;
    176e:	17 c0       	rjmp	.+46     	; 0x179e <Configure_Timer+0x7c0>
			
		case _8_bit2:
			
			Modes[_8_bit2] = TIMER_CTC;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Modes+0x2>

			TCCR2A |= (1 << WGM21);		
    1776:	80 eb       	ldi	r24, 0xB0	; 176
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	20 eb       	ldi	r18, 0xB0	; 176
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	f9 01       	movw	r30, r18
    1780:	20 81       	ld	r18, Z
    1782:	22 60       	ori	r18, 0x02	; 2
    1784:	fc 01       	movw	r30, r24
    1786:	20 83       	st	Z, r18
			
			TIMSK2 = (1 << OCIE2A);
    1788:	80 e7       	ldi	r24, 0x70	; 112
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	22 e0       	ldi	r18, 0x02	; 2
    178e:	fc 01       	movw	r30, r24
    1790:	20 83       	st	Z, r18
			OCR2A = Timer_Top; 
    1792:	83 eb       	ldi	r24, 0xB3	; 179
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1798:	fc 01       	movw	r30, r24
    179a:	20 83       	st	Z, r18
		
			break;
    179c:	00 00       	nop
				
	}
	
	return TIMER_OK;
    179e:	81 e0       	ldi	r24, 0x01	; 1

}
    17a0:	e1 96       	adiw	r28, 0x31	; 49
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	cf 90       	pop	r12
    17bc:	bf 90       	pop	r11
    17be:	af 90       	pop	r10
    17c0:	9f 90       	pop	r9
    17c2:	8f 90       	pop	r8
    17c4:	7f 90       	pop	r7
    17c6:	6f 90       	pop	r6
    17c8:	5f 90       	pop	r5
    17ca:	4f 90       	pop	r4
    17cc:	3f 90       	pop	r3
    17ce:	2f 90       	pop	r2
    17d0:	08 95       	ret

000017d2 <Reset_Timer_If_CTC>:

// f_PWM = f_clk/N*256

static void Reset_Timer_If_CTC() {
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
	
	switch(Selected_Timer) {
    17da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Selected_Timer>
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	91 05       	cpc	r25, r1
    17e6:	b9 f0       	breq	.+46     	; 0x1816 <Reset_Timer_If_CTC+0x44>
    17e8:	82 30       	cpi	r24, 0x02	; 2
    17ea:	91 05       	cpc	r25, r1
    17ec:	29 f1       	breq	.+74     	; 0x1838 <Reset_Timer_If_CTC+0x66>
    17ee:	89 2b       	or	r24, r25
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <Reset_Timer_If_CTC+0x22>
			}
			
			break;
	}
	
}
    17f2:	38 c0       	rjmp	.+112    	; 0x1864 <Reset_Timer_If_CTC+0x92>
	
	switch(Selected_Timer) {
		
		case _16_bit:
		
			if(Modes[_16_bit] == TIMER_CTC){
    17f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Modes>
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	79 f5       	brne	.+94     	; 0x185a <Reset_Timer_If_CTC+0x88>
				
				TIMSK1 = 0; // Disable all timer interrupts
    17fc:	8f e6       	ldi	r24, 0x6F	; 111
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	fc 01       	movw	r30, r24
    1802:	10 82       	st	Z, r1
				TCCR1A = 0;
    1804:	80 e8       	ldi	r24, 0x80	; 128
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	fc 01       	movw	r30, r24
    180a:	10 82       	st	Z, r1
				TCCR1B = 0;
    180c:	81 e8       	ldi	r24, 0x81	; 129
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	fc 01       	movw	r30, r24
    1812:	10 82       	st	Z, r1
				
			}
			
			break;
    1814:	22 c0       	rjmp	.+68     	; 0x185a <Reset_Timer_If_CTC+0x88>
			
		case _8_bit1:
		
			if(Modes[_8_bit1] == TIMER_CTC){
    1816:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Modes+0x1>
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	01 f5       	brne	.+64     	; 0x185e <Reset_Timer_If_CTC+0x8c>
				
				TIMSK0 = 0;
    181e:	8e e6       	ldi	r24, 0x6E	; 110
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	fc 01       	movw	r30, r24
    1824:	10 82       	st	Z, r1
				TCCR0A = 0;
    1826:	84 e4       	ldi	r24, 0x44	; 68
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	fc 01       	movw	r30, r24
    182c:	10 82       	st	Z, r1
				TCCR0B = 0;
    182e:	85 e4       	ldi	r24, 0x45	; 69
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	fc 01       	movw	r30, r24
    1834:	10 82       	st	Z, r1
				
			}
			
			break;
    1836:	13 c0       	rjmp	.+38     	; 0x185e <Reset_Timer_If_CTC+0x8c>
			
		case _8_bit2:
		
			if(Modes[_8_bit2] == TIMER_CTC){
    1838:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Modes+0x2>
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	89 f4       	brne	.+34     	; 0x1862 <Reset_Timer_If_CTC+0x90>
				
				TIMSK2 = 0;
    1840:	80 e7       	ldi	r24, 0x70	; 112
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	fc 01       	movw	r30, r24
    1846:	10 82       	st	Z, r1
				TCCR2A = 0;
    1848:	80 eb       	ldi	r24, 0xB0	; 176
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	fc 01       	movw	r30, r24
    184e:	10 82       	st	Z, r1
				TCCR2B = 0;
    1850:	81 eb       	ldi	r24, 0xB1	; 177
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fc 01       	movw	r30, r24
    1856:	10 82       	st	Z, r1
				
			}
			
			break;
    1858:	04 c0       	rjmp	.+8      	; 0x1862 <Reset_Timer_If_CTC+0x90>
				TCCR1A = 0;
				TCCR1B = 0;
				
			}
			
			break;
    185a:	00 00       	nop
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <Reset_Timer_If_CTC+0x92>
				TCCR0A = 0;
				TCCR0B = 0;
				
			}
			
			break;
    185e:	00 00       	nop
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <Reset_Timer_If_CTC+0x92>
				TCCR2A = 0;
				TCCR2B = 0;
				
			}
			
			break;
    1862:	00 00       	nop
	}
	
}
    1864:	00 00       	nop
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <Init_PWM>:

Timer_Status Init_PWM(PWM_Setup* PWM) { // Hardware is incapable of variable freq. variable duty %, except for 16 bit timer.
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	00 d0       	rcall	.+0      	; 0x1872 <Init_PWM+0x6>
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01
	
	switch(PWM->Pin){ // I repeat myself seemingly a fair bit here, but the only way the timer is known, without having to pass the timer, is by knowing which pin it is.
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	9a 81       	ldd	r25, Y+2	; 0x02
    187e:	fc 01       	movw	r30, r24
    1880:	80 81       	ld	r24, Z
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	91 05       	cpc	r25, r1
    188a:	79 f1       	breq	.+94     	; 0x18ea <Init_PWM+0x7e>
    188c:	83 30       	cpi	r24, 0x03	; 3
    188e:	91 05       	cpc	r25, r1
    1890:	2c f4       	brge	.+10     	; 0x189c <Init_PWM+0x30>
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	71 f0       	breq	.+28     	; 0x18b2 <Init_PWM+0x46>
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	d1 f0       	breq	.+52     	; 0x18ce <Init_PWM+0x62>
    189a:	63 c0       	rjmp	.+198    	; 0x1962 <Init_PWM+0xf6>
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	91 05       	cpc	r25, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <Init_PWM+0x38>
    18a2:	41 c0       	rjmp	.+130    	; 0x1926 <Init_PWM+0xba>
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	91 05       	cpc	r25, r1
    18a8:	7c f1       	brlt	.+94     	; 0x1908 <Init_PWM+0x9c>
    18aa:	05 97       	sbiw	r24, 0x05	; 5
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <Init_PWM+0x44>
    18ae:	4a c0       	rjmp	.+148    	; 0x1944 <Init_PWM+0xd8>
    18b0:	58 c0       	rjmp	.+176    	; 0x1962 <Init_PWM+0xf6>
		
		case PB1_OC1A:
			
			Selected_Timer = _16_bit;
    18b2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Selected_Timer>
			
			Reset_Timer_If_CTC();
    18b6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <Reset_Timer_If_CTC>
			
			TCCR1A |= (1 << COM1A1); // Non inverting phase correct PWM
    18ba:	80 e8       	ldi	r24, 0x80	; 128
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	20 e8       	ldi	r18, 0x80	; 128
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	f9 01       	movw	r30, r18
    18c4:	20 81       	ld	r18, Z
    18c6:	20 68       	ori	r18, 0x80	; 128
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 83       	st	Z, r18
		
			break;
    18cc:	4c c0       	rjmp	.+152    	; 0x1966 <Init_PWM+0xfa>
		
		case PB2_OC1B:
			
			Selected_Timer = _16_bit;
    18ce:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Selected_Timer>
			
			Reset_Timer_If_CTC();
    18d2:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <Reset_Timer_If_CTC>
			
			TCCR1A |= (1 << COM1B1);
    18d6:	80 e8       	ldi	r24, 0x80	; 128
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	20 e8       	ldi	r18, 0x80	; 128
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	f9 01       	movw	r30, r18
    18e0:	20 81       	ld	r18, Z
    18e2:	20 62       	ori	r18, 0x20	; 32
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
			
			break;
    18e8:	3e c0       	rjmp	.+124    	; 0x1966 <Init_PWM+0xfa>
		
		case PD5_OC0B:
			
			Selected_Timer = _8_bit1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Selected_Timer>
			
			Reset_Timer_If_CTC();
    18f0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <Reset_Timer_If_CTC>
		
			TCCR0A |= (1 << COM0B1);
    18f4:	84 e4       	ldi	r24, 0x44	; 68
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	24 e4       	ldi	r18, 0x44	; 68
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	f9 01       	movw	r30, r18
    18fe:	20 81       	ld	r18, Z
    1900:	20 62       	ori	r18, 0x20	; 32
    1902:	fc 01       	movw	r30, r24
    1904:	20 83       	st	Z, r18
			
			break;
    1906:	2f c0       	rjmp	.+94     	; 0x1966 <Init_PWM+0xfa>
		
		case PD6_OC0A:
		
			Selected_Timer = _8_bit1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Selected_Timer>
			
			Reset_Timer_If_CTC();
    190e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <Reset_Timer_If_CTC>
				
			TCCR0A |= (1 << COM0A1);
    1912:	84 e4       	ldi	r24, 0x44	; 68
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	24 e4       	ldi	r18, 0x44	; 68
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	f9 01       	movw	r30, r18
    191c:	20 81       	ld	r18, Z
    191e:	20 68       	ori	r18, 0x80	; 128
    1920:	fc 01       	movw	r30, r24
    1922:	20 83       	st	Z, r18
			
			break;
    1924:	20 c0       	rjmp	.+64     	; 0x1966 <Init_PWM+0xfa>
		
		case PB3_OC2A:
			
			Selected_Timer = _8_bit2;
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Selected_Timer>
			
			Reset_Timer_If_CTC();
    192c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <Reset_Timer_If_CTC>
		
			TCCR2A |= (1 << COM2A1);
    1930:	80 eb       	ldi	r24, 0xB0	; 176
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	20 eb       	ldi	r18, 0xB0	; 176
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	f9 01       	movw	r30, r18
    193a:	20 81       	ld	r18, Z
    193c:	20 68       	ori	r18, 0x80	; 128
    193e:	fc 01       	movw	r30, r24
    1940:	20 83       	st	Z, r18
			
			break;
    1942:	11 c0       	rjmp	.+34     	; 0x1966 <Init_PWM+0xfa>
		
		case PD3_OC2B:
		
			Selected_Timer = _8_bit2;
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Selected_Timer>
			
			Reset_Timer_If_CTC();
    194a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <Reset_Timer_If_CTC>
					
			TCCR2A |= (1 << COM2B1);
    194e:	80 eb       	ldi	r24, 0xB0	; 176
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	20 eb       	ldi	r18, 0xB0	; 176
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	f9 01       	movw	r30, r18
    1958:	20 81       	ld	r18, Z
    195a:	20 62       	ori	r18, 0x20	; 32
    195c:	fc 01       	movw	r30, r24
    195e:	20 83       	st	Z, r18
			
			break;
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <Init_PWM+0xfa>
		
		default:
		
			return TIMER_FAULT;
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	47 c0       	rjmp	.+142    	; 0x19f4 <Init_PWM+0x188>
		
	}

	switch(Selected_Timer) {
    1966:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Selected_Timer>
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	91 05       	cpc	r25, r1
    1972:	29 f1       	breq	.+74     	; 0x19be <Init_PWM+0x152>
    1974:	82 30       	cpi	r24, 0x02	; 2
    1976:	91 05       	cpc	r25, r1
    1978:	71 f1       	breq	.+92     	; 0x19d6 <Init_PWM+0x16a>
    197a:	89 2b       	or	r24, r25
    197c:	c1 f5       	brne	.+112    	; 0x19ee <Init_PWM+0x182>
		
		case _16_bit:	
			
			// PWM Mode 10: Phase correct, variable freq & duty cycle
			TCCR1A |= (1 << WGM11);
    197e:	80 e8       	ldi	r24, 0x80	; 128
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	20 e8       	ldi	r18, 0x80	; 128
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	f9 01       	movw	r30, r18
    1988:	20 81       	ld	r18, Z
    198a:	22 60       	ori	r18, 0x02	; 2
    198c:	fc 01       	movw	r30, r24
    198e:	20 83       	st	Z, r18
			//TCCR1B |= (1 << WGM13);
			
			ICR1H = (uint8_t)(PWM->ICR >> 8); // A new style of doing this. Is this more clear? I think so.
    1990:	87 e8       	ldi	r24, 0x87	; 135
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	29 81       	ldd	r18, Y+1	; 0x01
    1996:	3a 81       	ldd	r19, Y+2	; 0x02
    1998:	f9 01       	movw	r30, r18
    199a:	21 81       	ldd	r18, Z+1	; 0x01
    199c:	32 81       	ldd	r19, Z+2	; 0x02
    199e:	23 2f       	mov	r18, r19
    19a0:	33 27       	eor	r19, r19
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18
			ICR1L = (uint8_t)(PWM->ICR);
    19a6:	86 e8       	ldi	r24, 0x86	; 134
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	29 81       	ldd	r18, Y+1	; 0x01
    19ac:	3a 81       	ldd	r19, Y+2	; 0x02
    19ae:	f9 01       	movw	r30, r18
    19b0:	21 81       	ldd	r18, Z+1	; 0x01
    19b2:	32 81       	ldd	r19, Z+2	; 0x02
    19b4:	fc 01       	movw	r30, r24
    19b6:	20 83       	st	Z, r18
			
			Modes[_16_bit] = TIMER_PWM;
    19b8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Modes>
			
			break;
    19bc:	1a c0       	rjmp	.+52     	; 0x19f2 <Init_PWM+0x186>
		
		case  _8_bit1:
				
			TCCR0A |= (1 << WGM00); // Phase correct PWM
    19be:	84 e4       	ldi	r24, 0x44	; 68
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	24 e4       	ldi	r18, 0x44	; 68
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	f9 01       	movw	r30, r18
    19c8:	20 81       	ld	r18, Z
    19ca:	21 60       	ori	r18, 0x01	; 1
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 83       	st	Z, r18
			//TCCR0B |= (1 << WGM02); 
			
			Modes[_8_bit1] = TIMER_PWM;
    19d0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Modes+0x1>
		
			break;
    19d4:	0e c0       	rjmp	.+28     	; 0x19f2 <Init_PWM+0x186>
		
		case _8_bit2:
			
			TCCR2A |= (1 << WGM20); // Phase correct PWM
    19d6:	80 eb       	ldi	r24, 0xB0	; 176
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	20 eb       	ldi	r18, 0xB0	; 176
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	f9 01       	movw	r30, r18
    19e0:	20 81       	ld	r18, Z
    19e2:	21 60       	ori	r18, 0x01	; 1
    19e4:	fc 01       	movw	r30, r24
    19e6:	20 83       	st	Z, r18
			//TCCR2B |= (1 << WGM22);
	
			Modes[_8_bit2] = TIMER_PWM;
    19e8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <Modes+0x2>
			
			break;
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <Init_PWM+0x186>
		
		default:
		
			return TIMER_FAULT;
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <Init_PWM+0x188>
	
	}
	
	return TIMER_OK;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
	
}
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <Configure_PWM>:

Timer_Status Configure_PWM(PWM_Setup* PWM, uint16_t Prescaler, uint8_t Duty_Cycle){
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <Configure_PWM+0xa>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <Configure_PWM+0xc>
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <Configure_PWM+0xe>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9b 83       	std	Y+3, r25	; 0x03
    1a12:	8a 83       	std	Y+2, r24	; 0x02
    1a14:	7d 83       	std	Y+5, r23	; 0x05
    1a16:	6c 83       	std	Y+4, r22	; 0x04
    1a18:	4e 83       	std	Y+6, r20	; 0x06
	
	if(Duty_Cycle > 100) {
    1a1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1c:	85 36       	cpi	r24, 0x65	; 101
    1a1e:	10 f0       	brcs	.+4      	; 0x1a24 <Configure_PWM+0x26>
		return TIMER_FAULT;
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	d1 c0       	rjmp	.+418    	; 0x1bc6 <Configure_PWM+0x1c8>
	}
	
	switch(PWM->Pin){
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	9b 81       	ldd	r25, Y+3	; 0x03
    1a28:	fc 01       	movw	r30, r24
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	82 30       	cpi	r24, 0x02	; 2
    1a32:	91 05       	cpc	r25, r1
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <Configure_PWM+0x3a>
    1a36:	56 c0       	rjmp	.+172    	; 0x1ae4 <Configure_PWM+0xe6>
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <Configure_PWM+0x4a>
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	79 f0       	breq	.+30     	; 0x1a60 <Configure_PWM+0x62>
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	71 f1       	breq	.+92     	; 0x1aa2 <Configure_PWM+0xa4>
    1a46:	ae c0       	rjmp	.+348    	; 0x1ba4 <Configure_PWM+0x1a6>
    1a48:	84 30       	cpi	r24, 0x04	; 4
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <Configure_PWM+0x52>
    1a4e:	7a c0       	rjmp	.+244    	; 0x1b44 <Configure_PWM+0x146>
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	91 05       	cpc	r25, r1
    1a54:	0c f4       	brge	.+2      	; 0x1a58 <Configure_PWM+0x5a>
    1a56:	5e c0       	rjmp	.+188    	; 0x1b14 <Configure_PWM+0x116>
    1a58:	05 97       	sbiw	r24, 0x05	; 5
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <Configure_PWM+0x60>
    1a5c:	8b c0       	rjmp	.+278    	; 0x1b74 <Configure_PWM+0x176>
    1a5e:	a2 c0       	rjmp	.+324    	; 0x1ba4 <Configure_PWM+0x1a6>
		
		case PB1_OC1A:
		
			OCR1A = (Duty_Cycle * 65535 + 50) / 100;
    1a60:	08 e8       	ldi	r16, 0x88	; 136
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	8e 81       	ldd	r24, Y+6	; 0x06
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	50 e0       	ldi	r21, 0x00	; 0
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
    1a72:	dc 01       	movw	r26, r24
    1a74:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__muluhisi3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	c2 96       	adiw	r24, 0x32	; 50
    1a7e:	a1 1d       	adc	r26, r1
    1a80:	b1 1d       	adc	r27, r1
    1a82:	24 e6       	ldi	r18, 0x64	; 100
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__divmodsi4>
    1a92:	da 01       	movw	r26, r20
    1a94:	c9 01       	movw	r24, r18
    1a96:	f8 01       	movw	r30, r16
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
			Selected_Timer = _16_bit;
    1a9c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Selected_Timer>
		
			break;
    1aa0:	83 c0       	rjmp	.+262    	; 0x1ba8 <Configure_PWM+0x1aa>
		
		case PB2_OC1B:
		
			OCR1B = (Duty_Cycle * 65535 + 50) / 100;
    1aa2:	0a e8       	ldi	r16, 0x8A	; 138
    1aa4:	10 e0       	ldi	r17, 0x00	; 0
    1aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	9f ef       	ldi	r25, 0xFF	; 255
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__muluhisi3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	c2 96       	adiw	r24, 0x32	; 50
    1ac0:	a1 1d       	adc	r26, r1
    1ac2:	b1 1d       	adc	r27, r1
    1ac4:	24 e6       	ldi	r18, 0x64	; 100
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__divmodsi4>
    1ad4:	da 01       	movw	r26, r20
    1ad6:	c9 01       	movw	r24, r18
    1ad8:	f8 01       	movw	r30, r16
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
			Selected_Timer = _16_bit;
    1ade:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Selected_Timer>
		
			break;
    1ae2:	62 c0       	rjmp	.+196    	; 0x1ba8 <Configure_PWM+0x1aa>
		
		case PD5_OC0B:
		
			OCR0B = (Duty_Cycle * 255 + 50) / 100;
    1ae4:	28 e4       	ldi	r18, 0x48	; 72
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	48 2f       	mov	r20, r24
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	6f ef       	ldi	r22, 0xFF	; 255
    1af0:	64 9f       	mul	r22, r20
    1af2:	c0 01       	movw	r24, r0
    1af4:	65 9f       	mul	r22, r21
    1af6:	90 0d       	add	r25, r0
    1af8:	11 24       	eor	r1, r1
    1afa:	c2 96       	adiw	r24, 0x32	; 50
    1afc:	44 e6       	ldi	r20, 0x64	; 100
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	ba 01       	movw	r22, r20
    1b02:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divmodhi4>
    1b06:	cb 01       	movw	r24, r22
    1b08:	f9 01       	movw	r30, r18
    1b0a:	80 83       	st	Z, r24
			Selected_Timer = _8_bit1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Selected_Timer>
		
			break;
    1b12:	4a c0       	rjmp	.+148    	; 0x1ba8 <Configure_PWM+0x1aa>
		
		case PD6_OC0A:
		
			OCR0A = (Duty_Cycle * 255 + 50) / 100;
    1b14:	27 e4       	ldi	r18, 0x47	; 71
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	6f ef       	ldi	r22, 0xFF	; 255
    1b20:	64 9f       	mul	r22, r20
    1b22:	c0 01       	movw	r24, r0
    1b24:	65 9f       	mul	r22, r21
    1b26:	90 0d       	add	r25, r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	c2 96       	adiw	r24, 0x32	; 50
    1b2c:	44 e6       	ldi	r20, 0x64	; 100
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	ba 01       	movw	r22, r20
    1b32:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divmodhi4>
    1b36:	cb 01       	movw	r24, r22
    1b38:	f9 01       	movw	r30, r18
    1b3a:	80 83       	st	Z, r24
			Selected_Timer = _8_bit1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Selected_Timer>
		
			break;
    1b42:	32 c0       	rjmp	.+100    	; 0x1ba8 <Configure_PWM+0x1aa>
		
		case PB3_OC2A:
		
			OCR2A = (Duty_Cycle * 255 + 50) / 100;
    1b44:	23 eb       	ldi	r18, 0xB3	; 179
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	6f ef       	ldi	r22, 0xFF	; 255
    1b50:	64 9f       	mul	r22, r20
    1b52:	c0 01       	movw	r24, r0
    1b54:	65 9f       	mul	r22, r21
    1b56:	90 0d       	add	r25, r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	c2 96       	adiw	r24, 0x32	; 50
    1b5c:	44 e6       	ldi	r20, 0x64	; 100
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	ba 01       	movw	r22, r20
    1b62:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divmodhi4>
    1b66:	cb 01       	movw	r24, r22
    1b68:	f9 01       	movw	r30, r18
    1b6a:	80 83       	st	Z, r24
			Selected_Timer = _8_bit2;
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Selected_Timer>
		
			break;
    1b72:	1a c0       	rjmp	.+52     	; 0x1ba8 <Configure_PWM+0x1aa>
		
		case PD3_OC2B:
		
			OCR2B = (Duty_Cycle * 255 + 50) / 100;
    1b74:	24 eb       	ldi	r18, 0xB4	; 180
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	6f ef       	ldi	r22, 0xFF	; 255
    1b80:	64 9f       	mul	r22, r20
    1b82:	c0 01       	movw	r24, r0
    1b84:	65 9f       	mul	r22, r21
    1b86:	90 0d       	add	r25, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	c2 96       	adiw	r24, 0x32	; 50
    1b8c:	44 e6       	ldi	r20, 0x64	; 100
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	ba 01       	movw	r22, r20
    1b92:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__divmodhi4>
    1b96:	cb 01       	movw	r24, r22
    1b98:	f9 01       	movw	r30, r18
    1b9a:	80 83       	st	Z, r24
			Selected_Timer = _8_bit2;
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Selected_Timer>
		
			break;
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <Configure_PWM+0x1aa>
		
		default:
		
			return TIMER_FAULT;
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	0f c0       	rjmp	.+30     	; 0x1bc6 <Configure_PWM+0x1c8>
		
	}
	
	Timer_Status Status = Set_Prescaler(Selected_Timer, Prescaler);
    1ba8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <Selected_Timer>
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	82 2f       	mov	r24, r18
    1bb4:	0e 94 f4 06 	call	0xde8	; 0xde8 <Set_Prescaler>
    1bb8:	89 83       	std	Y+1, r24	; 0x01
	
	if(Status == TIMER_FAULT){
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	88 23       	and	r24, r24
    1bbe:	11 f4       	brne	.+4      	; 0x1bc4 <Configure_PWM+0x1c6>
		return TIMER_FAULT;
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <Configure_PWM+0x1c8>
	}
	
	return TIMER_OK;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
	
}
    1bc6:	26 96       	adiw	r28, 0x06	; 6
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	08 95       	ret

00001bdc <__mulsi3>:
    1bdc:	db 01       	movw	r26, r22
    1bde:	8f 93       	push	r24
    1be0:	9f 93       	push	r25
    1be2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__muluhisi3>
    1be6:	bf 91       	pop	r27
    1be8:	af 91       	pop	r26
    1bea:	a2 9f       	mul	r26, r18
    1bec:	80 0d       	add	r24, r0
    1bee:	91 1d       	adc	r25, r1
    1bf0:	a3 9f       	mul	r26, r19
    1bf2:	90 0d       	add	r25, r0
    1bf4:	b2 9f       	mul	r27, r18
    1bf6:	90 0d       	add	r25, r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	08 95       	ret

00001bfc <__divmodhi4>:
    1bfc:	97 fb       	bst	r25, 7
    1bfe:	07 2e       	mov	r0, r23
    1c00:	16 f4       	brtc	.+4      	; 0x1c06 <__divmodhi4+0xa>
    1c02:	00 94       	com	r0
    1c04:	07 d0       	rcall	.+14     	; 0x1c14 <__divmodhi4_neg1>
    1c06:	77 fd       	sbrc	r23, 7
    1c08:	09 d0       	rcall	.+18     	; 0x1c1c <__divmodhi4_neg2>
    1c0a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__udivmodhi4>
    1c0e:	07 fc       	sbrc	r0, 7
    1c10:	05 d0       	rcall	.+10     	; 0x1c1c <__divmodhi4_neg2>
    1c12:	3e f4       	brtc	.+14     	; 0x1c22 <__divmodhi4_exit>

00001c14 <__divmodhi4_neg1>:
    1c14:	90 95       	com	r25
    1c16:	81 95       	neg	r24
    1c18:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1a:	08 95       	ret

00001c1c <__divmodhi4_neg2>:
    1c1c:	70 95       	com	r23
    1c1e:	61 95       	neg	r22
    1c20:	7f 4f       	sbci	r23, 0xFF	; 255

00001c22 <__divmodhi4_exit>:
    1c22:	08 95       	ret

00001c24 <__divmodsi4>:
    1c24:	05 2e       	mov	r0, r21
    1c26:	97 fb       	bst	r25, 7
    1c28:	1e f4       	brtc	.+6      	; 0x1c30 <__divmodsi4+0xc>
    1c2a:	00 94       	com	r0
    1c2c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__negsi2>
    1c30:	57 fd       	sbrc	r21, 7
    1c32:	07 d0       	rcall	.+14     	; 0x1c42 <__divmodsi4_neg2>
    1c34:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__udivmodsi4>
    1c38:	07 fc       	sbrc	r0, 7
    1c3a:	03 d0       	rcall	.+6      	; 0x1c42 <__divmodsi4_neg2>
    1c3c:	4e f4       	brtc	.+18     	; 0x1c50 <__divmodsi4_exit>
    1c3e:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__negsi2>

00001c42 <__divmodsi4_neg2>:
    1c42:	50 95       	com	r21
    1c44:	40 95       	com	r20
    1c46:	30 95       	com	r19
    1c48:	21 95       	neg	r18
    1c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1c4e:	5f 4f       	sbci	r21, 0xFF	; 255

00001c50 <__divmodsi4_exit>:
    1c50:	08 95       	ret

00001c52 <__negsi2>:
    1c52:	90 95       	com	r25
    1c54:	80 95       	com	r24
    1c56:	70 95       	com	r23
    1c58:	61 95       	neg	r22
    1c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	08 95       	ret

00001c62 <__tablejump2__>:
    1c62:	ee 0f       	add	r30, r30
    1c64:	ff 1f       	adc	r31, r31
    1c66:	05 90       	lpm	r0, Z+
    1c68:	f4 91       	lpm	r31, Z
    1c6a:	e0 2d       	mov	r30, r0
    1c6c:	09 94       	ijmp

00001c6e <__muluhisi3>:
    1c6e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
    1c72:	a5 9f       	mul	r26, r21
    1c74:	90 0d       	add	r25, r0
    1c76:	b4 9f       	mul	r27, r20
    1c78:	90 0d       	add	r25, r0
    1c7a:	a4 9f       	mul	r26, r20
    1c7c:	80 0d       	add	r24, r0
    1c7e:	91 1d       	adc	r25, r1
    1c80:	11 24       	eor	r1, r1
    1c82:	08 95       	ret

00001c84 <__muldi3>:
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	1f 93       	push	r17
    1c8a:	0f 93       	push	r16
    1c8c:	9a 9d       	mul	r25, r10
    1c8e:	f0 2d       	mov	r31, r0
    1c90:	21 9f       	mul	r18, r17
    1c92:	f0 0d       	add	r31, r0
    1c94:	8b 9d       	mul	r24, r11
    1c96:	f0 0d       	add	r31, r0
    1c98:	8a 9d       	mul	r24, r10
    1c9a:	e0 2d       	mov	r30, r0
    1c9c:	f1 0d       	add	r31, r1
    1c9e:	03 9f       	mul	r16, r19
    1ca0:	f0 0d       	add	r31, r0
    1ca2:	02 9f       	mul	r16, r18
    1ca4:	e0 0d       	add	r30, r0
    1ca6:	f1 1d       	adc	r31, r1
    1ca8:	4e 9d       	mul	r20, r14
    1caa:	e0 0d       	add	r30, r0
    1cac:	f1 1d       	adc	r31, r1
    1cae:	5e 9d       	mul	r21, r14
    1cb0:	f0 0d       	add	r31, r0
    1cb2:	4f 9d       	mul	r20, r15
    1cb4:	f0 0d       	add	r31, r0
    1cb6:	7f 93       	push	r23
    1cb8:	6f 93       	push	r22
    1cba:	bf 92       	push	r11
    1cbc:	af 92       	push	r10
    1cbe:	5f 93       	push	r21
    1cc0:	4f 93       	push	r20
    1cc2:	d5 01       	movw	r26, r10
    1cc4:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
    1cc8:	8b 01       	movw	r16, r22
    1cca:	ac 01       	movw	r20, r24
    1ccc:	d7 01       	movw	r26, r14
    1cce:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
    1cd2:	eb 01       	movw	r28, r22
    1cd4:	e8 0f       	add	r30, r24
    1cd6:	f9 1f       	adc	r31, r25
    1cd8:	d6 01       	movw	r26, r12
    1cda:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__muldi3_6>
    1cde:	2f 91       	pop	r18
    1ce0:	3f 91       	pop	r19
    1ce2:	d6 01       	movw	r26, r12
    1ce4:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
    1ce8:	c6 0f       	add	r28, r22
    1cea:	d7 1f       	adc	r29, r23
    1cec:	e8 1f       	adc	r30, r24
    1cee:	f9 1f       	adc	r31, r25
    1cf0:	af 91       	pop	r26
    1cf2:	bf 91       	pop	r27
    1cf4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__muldi3_6>
    1cf8:	2f 91       	pop	r18
    1cfa:	3f 91       	pop	r19
    1cfc:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
    1d00:	c6 0f       	add	r28, r22
    1d02:	d7 1f       	adc	r29, r23
    1d04:	e8 1f       	adc	r30, r24
    1d06:	f9 1f       	adc	r31, r25
    1d08:	d6 01       	movw	r26, r12
    1d0a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
    1d0e:	e6 0f       	add	r30, r22
    1d10:	f7 1f       	adc	r31, r23
    1d12:	98 01       	movw	r18, r16
    1d14:	be 01       	movw	r22, r28
    1d16:	cf 01       	movw	r24, r30
    1d18:	11 24       	eor	r1, r1
    1d1a:	0f 91       	pop	r16
    1d1c:	1f 91       	pop	r17
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <__muldi3_6>:
    1d24:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
    1d28:	46 0f       	add	r20, r22
    1d2a:	57 1f       	adc	r21, r23
    1d2c:	c8 1f       	adc	r28, r24
    1d2e:	d9 1f       	adc	r29, r25
    1d30:	08 f4       	brcc	.+2      	; 0x1d34 <__muldi3_6+0x10>
    1d32:	31 96       	adiw	r30, 0x01	; 1
    1d34:	08 95       	ret

00001d36 <__umoddi3>:
    1d36:	68 94       	set
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <__udivdi3_umoddi3>

00001d3a <__udivdi3>:
    1d3a:	e8 94       	clt

00001d3c <__udivdi3_umoddi3>:
    1d3c:	8f 92       	push	r8
    1d3e:	9f 92       	push	r9
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__udivmod64>
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	9f 90       	pop	r9
    1d4e:	8f 90       	pop	r8
    1d50:	08 95       	ret

00001d52 <__udivmod64>:
    1d52:	88 24       	eor	r8, r8
    1d54:	99 24       	eor	r9, r9
    1d56:	f4 01       	movw	r30, r8
    1d58:	e4 01       	movw	r28, r8
    1d5a:	b0 e4       	ldi	r27, 0x40	; 64
    1d5c:	9f 93       	push	r25
    1d5e:	aa 27       	eor	r26, r26
    1d60:	9a 15       	cp	r25, r10
    1d62:	8b 04       	cpc	r8, r11
    1d64:	9c 04       	cpc	r9, r12
    1d66:	ed 05       	cpc	r30, r13
    1d68:	fe 05       	cpc	r31, r14
    1d6a:	cf 05       	cpc	r28, r15
    1d6c:	d0 07       	cpc	r29, r16
    1d6e:	a1 07       	cpc	r26, r17
    1d70:	98 f4       	brcc	.+38     	; 0x1d98 <__udivmod64+0x46>
    1d72:	ad 2f       	mov	r26, r29
    1d74:	dc 2f       	mov	r29, r28
    1d76:	cf 2f       	mov	r28, r31
    1d78:	fe 2f       	mov	r31, r30
    1d7a:	e9 2d       	mov	r30, r9
    1d7c:	98 2c       	mov	r9, r8
    1d7e:	89 2e       	mov	r8, r25
    1d80:	98 2f       	mov	r25, r24
    1d82:	87 2f       	mov	r24, r23
    1d84:	76 2f       	mov	r23, r22
    1d86:	65 2f       	mov	r22, r21
    1d88:	54 2f       	mov	r21, r20
    1d8a:	43 2f       	mov	r20, r19
    1d8c:	32 2f       	mov	r19, r18
    1d8e:	22 27       	eor	r18, r18
    1d90:	b8 50       	subi	r27, 0x08	; 8
    1d92:	31 f7       	brne	.-52     	; 0x1d60 <__udivmod64+0xe>
    1d94:	bf 91       	pop	r27
    1d96:	27 c0       	rjmp	.+78     	; 0x1de6 <__udivmod64+0x94>
    1d98:	1b 2e       	mov	r1, r27
    1d9a:	bf 91       	pop	r27
    1d9c:	bb 27       	eor	r27, r27
    1d9e:	22 0f       	add	r18, r18
    1da0:	33 1f       	adc	r19, r19
    1da2:	44 1f       	adc	r20, r20
    1da4:	55 1f       	adc	r21, r21
    1da6:	66 1f       	adc	r22, r22
    1da8:	77 1f       	adc	r23, r23
    1daa:	88 1f       	adc	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	88 1c       	adc	r8, r8
    1db0:	99 1c       	adc	r9, r9
    1db2:	ee 1f       	adc	r30, r30
    1db4:	ff 1f       	adc	r31, r31
    1db6:	cc 1f       	adc	r28, r28
    1db8:	dd 1f       	adc	r29, r29
    1dba:	aa 1f       	adc	r26, r26
    1dbc:	bb 1f       	adc	r27, r27
    1dbe:	8a 14       	cp	r8, r10
    1dc0:	9b 04       	cpc	r9, r11
    1dc2:	ec 05       	cpc	r30, r12
    1dc4:	fd 05       	cpc	r31, r13
    1dc6:	ce 05       	cpc	r28, r14
    1dc8:	df 05       	cpc	r29, r15
    1dca:	a0 07       	cpc	r26, r16
    1dcc:	b1 07       	cpc	r27, r17
    1dce:	48 f0       	brcs	.+18     	; 0x1de2 <__udivmod64+0x90>
    1dd0:	8a 18       	sub	r8, r10
    1dd2:	9b 08       	sbc	r9, r11
    1dd4:	ec 09       	sbc	r30, r12
    1dd6:	fd 09       	sbc	r31, r13
    1dd8:	ce 09       	sbc	r28, r14
    1dda:	df 09       	sbc	r29, r15
    1ddc:	a0 0b       	sbc	r26, r16
    1dde:	b1 0b       	sbc	r27, r17
    1de0:	21 60       	ori	r18, 0x01	; 1
    1de2:	1a 94       	dec	r1
    1de4:	e1 f6       	brne	.-72     	; 0x1d9e <__udivmod64+0x4c>
    1de6:	2e f4       	brtc	.+10     	; 0x1df2 <__udivmod64+0xa0>
    1de8:	94 01       	movw	r18, r8
    1dea:	af 01       	movw	r20, r30
    1dec:	be 01       	movw	r22, r28
    1dee:	cd 01       	movw	r24, r26
    1df0:	00 0c       	add	r0, r0
    1df2:	08 95       	ret

00001df4 <__ashrdi3>:
    1df4:	97 fb       	bst	r25, 7
    1df6:	10 f8       	bld	r1, 0

00001df8 <__lshrdi3>:
    1df8:	16 94       	lsr	r1
    1dfa:	00 08       	sbc	r0, r0
    1dfc:	0f 93       	push	r16
    1dfe:	08 30       	cpi	r16, 0x08	; 8
    1e00:	98 f0       	brcs	.+38     	; 0x1e28 <__lshrdi3+0x30>
    1e02:	08 50       	subi	r16, 0x08	; 8
    1e04:	23 2f       	mov	r18, r19
    1e06:	34 2f       	mov	r19, r20
    1e08:	45 2f       	mov	r20, r21
    1e0a:	56 2f       	mov	r21, r22
    1e0c:	67 2f       	mov	r22, r23
    1e0e:	78 2f       	mov	r23, r24
    1e10:	89 2f       	mov	r24, r25
    1e12:	90 2d       	mov	r25, r0
    1e14:	f4 cf       	rjmp	.-24     	; 0x1dfe <__lshrdi3+0x6>
    1e16:	05 94       	asr	r0
    1e18:	97 95       	ror	r25
    1e1a:	87 95       	ror	r24
    1e1c:	77 95       	ror	r23
    1e1e:	67 95       	ror	r22
    1e20:	57 95       	ror	r21
    1e22:	47 95       	ror	r20
    1e24:	37 95       	ror	r19
    1e26:	27 95       	ror	r18
    1e28:	0a 95       	dec	r16
    1e2a:	aa f7       	brpl	.-22     	; 0x1e16 <__lshrdi3+0x1e>
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <__adddi3>:
    1e30:	2a 0d       	add	r18, r10
    1e32:	3b 1d       	adc	r19, r11
    1e34:	4c 1d       	adc	r20, r12
    1e36:	5d 1d       	adc	r21, r13
    1e38:	6e 1d       	adc	r22, r14
    1e3a:	7f 1d       	adc	r23, r15
    1e3c:	80 1f       	adc	r24, r16
    1e3e:	91 1f       	adc	r25, r17
    1e40:	08 95       	ret

00001e42 <__adddi3_s8>:
    1e42:	00 24       	eor	r0, r0
    1e44:	a7 fd       	sbrc	r26, 7
    1e46:	00 94       	com	r0
    1e48:	2a 0f       	add	r18, r26
    1e4a:	30 1d       	adc	r19, r0
    1e4c:	40 1d       	adc	r20, r0
    1e4e:	50 1d       	adc	r21, r0
    1e50:	60 1d       	adc	r22, r0
    1e52:	70 1d       	adc	r23, r0
    1e54:	80 1d       	adc	r24, r0
    1e56:	90 1d       	adc	r25, r0
    1e58:	08 95       	ret

00001e5a <__cmpdi2>:
    1e5a:	2a 15       	cp	r18, r10
    1e5c:	3b 05       	cpc	r19, r11
    1e5e:	4c 05       	cpc	r20, r12
    1e60:	5d 05       	cpc	r21, r13
    1e62:	6e 05       	cpc	r22, r14
    1e64:	7f 05       	cpc	r23, r15
    1e66:	80 07       	cpc	r24, r16
    1e68:	91 07       	cpc	r25, r17
    1e6a:	08 95       	ret

00001e6c <__udivmodhi4>:
    1e6c:	aa 1b       	sub	r26, r26
    1e6e:	bb 1b       	sub	r27, r27
    1e70:	51 e1       	ldi	r21, 0x11	; 17
    1e72:	07 c0       	rjmp	.+14     	; 0x1e82 <__udivmodhi4_ep>

00001e74 <__udivmodhi4_loop>:
    1e74:	aa 1f       	adc	r26, r26
    1e76:	bb 1f       	adc	r27, r27
    1e78:	a6 17       	cp	r26, r22
    1e7a:	b7 07       	cpc	r27, r23
    1e7c:	10 f0       	brcs	.+4      	; 0x1e82 <__udivmodhi4_ep>
    1e7e:	a6 1b       	sub	r26, r22
    1e80:	b7 0b       	sbc	r27, r23

00001e82 <__udivmodhi4_ep>:
    1e82:	88 1f       	adc	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	5a 95       	dec	r21
    1e88:	a9 f7       	brne	.-22     	; 0x1e74 <__udivmodhi4_loop>
    1e8a:	80 95       	com	r24
    1e8c:	90 95       	com	r25
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	08 95       	ret

00001e94 <__udivmodsi4>:
    1e94:	a1 e2       	ldi	r26, 0x21	; 33
    1e96:	1a 2e       	mov	r1, r26
    1e98:	aa 1b       	sub	r26, r26
    1e9a:	bb 1b       	sub	r27, r27
    1e9c:	fd 01       	movw	r30, r26
    1e9e:	0d c0       	rjmp	.+26     	; 0x1eba <__udivmodsi4_ep>

00001ea0 <__udivmodsi4_loop>:
    1ea0:	aa 1f       	adc	r26, r26
    1ea2:	bb 1f       	adc	r27, r27
    1ea4:	ee 1f       	adc	r30, r30
    1ea6:	ff 1f       	adc	r31, r31
    1ea8:	a2 17       	cp	r26, r18
    1eaa:	b3 07       	cpc	r27, r19
    1eac:	e4 07       	cpc	r30, r20
    1eae:	f5 07       	cpc	r31, r21
    1eb0:	20 f0       	brcs	.+8      	; 0x1eba <__udivmodsi4_ep>
    1eb2:	a2 1b       	sub	r26, r18
    1eb4:	b3 0b       	sbc	r27, r19
    1eb6:	e4 0b       	sbc	r30, r20
    1eb8:	f5 0b       	sbc	r31, r21

00001eba <__udivmodsi4_ep>:
    1eba:	66 1f       	adc	r22, r22
    1ebc:	77 1f       	adc	r23, r23
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	1a 94       	dec	r1
    1ec4:	69 f7       	brne	.-38     	; 0x1ea0 <__udivmodsi4_loop>
    1ec6:	60 95       	com	r22
    1ec8:	70 95       	com	r23
    1eca:	80 95       	com	r24
    1ecc:	90 95       	com	r25
    1ece:	9b 01       	movw	r18, r22
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	bd 01       	movw	r22, r26
    1ed4:	cf 01       	movw	r24, r30
    1ed6:	08 95       	ret

00001ed8 <__umulhisi3>:
    1ed8:	a2 9f       	mul	r26, r18
    1eda:	b0 01       	movw	r22, r0
    1edc:	b3 9f       	mul	r27, r19
    1ede:	c0 01       	movw	r24, r0
    1ee0:	a3 9f       	mul	r26, r19
    1ee2:	70 0d       	add	r23, r0
    1ee4:	81 1d       	adc	r24, r1
    1ee6:	11 24       	eor	r1, r1
    1ee8:	91 1d       	adc	r25, r1
    1eea:	b2 9f       	mul	r27, r18
    1eec:	70 0d       	add	r23, r0
    1eee:	81 1d       	adc	r24, r1
    1ef0:	11 24       	eor	r1, r1
    1ef2:	91 1d       	adc	r25, r1
    1ef4:	08 95       	ret

00001ef6 <malloc>:
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	82 30       	cpi	r24, 0x02	; 2
    1f00:	91 05       	cpc	r25, r1
    1f02:	10 f4       	brcc	.+4      	; 0x1f08 <malloc+0x12>
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <__flp>
    1f0c:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <__flp+0x1>
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	a0 e0       	ldi	r26, 0x00	; 0
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	30 97       	sbiw	r30, 0x00	; 0
    1f1a:	19 f1       	breq	.+70     	; 0x1f62 <malloc+0x6c>
    1f1c:	40 81       	ld	r20, Z
    1f1e:	51 81       	ldd	r21, Z+1	; 0x01
    1f20:	02 81       	ldd	r16, Z+2	; 0x02
    1f22:	13 81       	ldd	r17, Z+3	; 0x03
    1f24:	48 17       	cp	r20, r24
    1f26:	59 07       	cpc	r21, r25
    1f28:	c8 f0       	brcs	.+50     	; 0x1f5c <malloc+0x66>
    1f2a:	84 17       	cp	r24, r20
    1f2c:	95 07       	cpc	r25, r21
    1f2e:	69 f4       	brne	.+26     	; 0x1f4a <malloc+0x54>
    1f30:	10 97       	sbiw	r26, 0x00	; 0
    1f32:	31 f0       	breq	.+12     	; 0x1f40 <malloc+0x4a>
    1f34:	12 96       	adiw	r26, 0x02	; 2
    1f36:	0c 93       	st	X, r16
    1f38:	12 97       	sbiw	r26, 0x02	; 2
    1f3a:	13 96       	adiw	r26, 0x03	; 3
    1f3c:	1c 93       	st	X, r17
    1f3e:	27 c0       	rjmp	.+78     	; 0x1f8e <malloc+0x98>
    1f40:	00 93 55 01 	sts	0x0155, r16	; 0x800155 <__flp>
    1f44:	10 93 56 01 	sts	0x0156, r17	; 0x800156 <__flp+0x1>
    1f48:	22 c0       	rjmp	.+68     	; 0x1f8e <malloc+0x98>
    1f4a:	21 15       	cp	r18, r1
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	19 f0       	breq	.+6      	; 0x1f56 <malloc+0x60>
    1f50:	42 17       	cp	r20, r18
    1f52:	53 07       	cpc	r21, r19
    1f54:	18 f4       	brcc	.+6      	; 0x1f5c <malloc+0x66>
    1f56:	9a 01       	movw	r18, r20
    1f58:	bd 01       	movw	r22, r26
    1f5a:	ef 01       	movw	r28, r30
    1f5c:	df 01       	movw	r26, r30
    1f5e:	f8 01       	movw	r30, r16
    1f60:	db cf       	rjmp	.-74     	; 0x1f18 <malloc+0x22>
    1f62:	21 15       	cp	r18, r1
    1f64:	31 05       	cpc	r19, r1
    1f66:	f9 f0       	breq	.+62     	; 0x1fa6 <malloc+0xb0>
    1f68:	28 1b       	sub	r18, r24
    1f6a:	39 0b       	sbc	r19, r25
    1f6c:	24 30       	cpi	r18, 0x04	; 4
    1f6e:	31 05       	cpc	r19, r1
    1f70:	80 f4       	brcc	.+32     	; 0x1f92 <malloc+0x9c>
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	61 15       	cp	r22, r1
    1f78:	71 05       	cpc	r23, r1
    1f7a:	21 f0       	breq	.+8      	; 0x1f84 <malloc+0x8e>
    1f7c:	fb 01       	movw	r30, r22
    1f7e:	93 83       	std	Z+3, r25	; 0x03
    1f80:	82 83       	std	Z+2, r24	; 0x02
    1f82:	04 c0       	rjmp	.+8      	; 0x1f8c <malloc+0x96>
    1f84:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <__flp+0x1>
    1f88:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <__flp>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	32 96       	adiw	r30, 0x02	; 2
    1f90:	44 c0       	rjmp	.+136    	; 0x201a <malloc+0x124>
    1f92:	fe 01       	movw	r30, r28
    1f94:	e2 0f       	add	r30, r18
    1f96:	f3 1f       	adc	r31, r19
    1f98:	81 93       	st	Z+, r24
    1f9a:	91 93       	st	Z+, r25
    1f9c:	22 50       	subi	r18, 0x02	; 2
    1f9e:	31 09       	sbc	r19, r1
    1fa0:	39 83       	std	Y+1, r19	; 0x01
    1fa2:	28 83       	st	Y, r18
    1fa4:	3a c0       	rjmp	.+116    	; 0x201a <malloc+0x124>
    1fa6:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <__brkval>
    1faa:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <__brkval+0x1>
    1fae:	23 2b       	or	r18, r19
    1fb0:	41 f4       	brne	.+16     	; 0x1fc2 <malloc+0xcc>
    1fb2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1fb6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1fba:	30 93 54 01 	sts	0x0154, r19	; 0x800154 <__brkval+0x1>
    1fbe:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <__brkval>
    1fc2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1fc6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1fca:	21 15       	cp	r18, r1
    1fcc:	31 05       	cpc	r19, r1
    1fce:	41 f4       	brne	.+16     	; 0x1fe0 <malloc+0xea>
    1fd0:	2d b7       	in	r18, 0x3d	; 61
    1fd2:	3e b7       	in	r19, 0x3e	; 62
    1fd4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1fd8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1fdc:	24 1b       	sub	r18, r20
    1fde:	35 0b       	sbc	r19, r21
    1fe0:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <__brkval>
    1fe4:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <__brkval+0x1>
    1fe8:	e2 17       	cp	r30, r18
    1fea:	f3 07       	cpc	r31, r19
    1fec:	a0 f4       	brcc	.+40     	; 0x2016 <malloc+0x120>
    1fee:	2e 1b       	sub	r18, r30
    1ff0:	3f 0b       	sbc	r19, r31
    1ff2:	28 17       	cp	r18, r24
    1ff4:	39 07       	cpc	r19, r25
    1ff6:	78 f0       	brcs	.+30     	; 0x2016 <malloc+0x120>
    1ff8:	ac 01       	movw	r20, r24
    1ffa:	4e 5f       	subi	r20, 0xFE	; 254
    1ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffe:	24 17       	cp	r18, r20
    2000:	35 07       	cpc	r19, r21
    2002:	48 f0       	brcs	.+18     	; 0x2016 <malloc+0x120>
    2004:	4e 0f       	add	r20, r30
    2006:	5f 1f       	adc	r21, r31
    2008:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <__brkval+0x1>
    200c:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <__brkval>
    2010:	81 93       	st	Z+, r24
    2012:	91 93       	st	Z+, r25
    2014:	02 c0       	rjmp	.+4      	; 0x201a <malloc+0x124>
    2016:	e0 e0       	ldi	r30, 0x00	; 0
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	cf 01       	movw	r24, r30
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	0f 91       	pop	r16
    2024:	08 95       	ret

00002026 <free>:
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	09 f4       	brne	.+2      	; 0x2030 <free+0xa>
    202e:	81 c0       	rjmp	.+258    	; 0x2132 <free+0x10c>
    2030:	fc 01       	movw	r30, r24
    2032:	32 97       	sbiw	r30, 0x02	; 2
    2034:	13 82       	std	Z+3, r1	; 0x03
    2036:	12 82       	std	Z+2, r1	; 0x02
    2038:	a0 91 55 01 	lds	r26, 0x0155	; 0x800155 <__flp>
    203c:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <__flp+0x1>
    2040:	10 97       	sbiw	r26, 0x00	; 0
    2042:	81 f4       	brne	.+32     	; 0x2064 <free+0x3e>
    2044:	20 81       	ld	r18, Z
    2046:	31 81       	ldd	r19, Z+1	; 0x01
    2048:	82 0f       	add	r24, r18
    204a:	93 1f       	adc	r25, r19
    204c:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <__brkval>
    2050:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <__brkval+0x1>
    2054:	28 17       	cp	r18, r24
    2056:	39 07       	cpc	r19, r25
    2058:	51 f5       	brne	.+84     	; 0x20ae <free+0x88>
    205a:	f0 93 54 01 	sts	0x0154, r31	; 0x800154 <__brkval+0x1>
    205e:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <__brkval>
    2062:	67 c0       	rjmp	.+206    	; 0x2132 <free+0x10c>
    2064:	ed 01       	movw	r28, r26
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	ce 17       	cp	r28, r30
    206c:	df 07       	cpc	r29, r31
    206e:	40 f4       	brcc	.+16     	; 0x2080 <free+0x5a>
    2070:	4a 81       	ldd	r20, Y+2	; 0x02
    2072:	5b 81       	ldd	r21, Y+3	; 0x03
    2074:	9e 01       	movw	r18, r28
    2076:	41 15       	cp	r20, r1
    2078:	51 05       	cpc	r21, r1
    207a:	f1 f0       	breq	.+60     	; 0x20b8 <free+0x92>
    207c:	ea 01       	movw	r28, r20
    207e:	f5 cf       	rjmp	.-22     	; 0x206a <free+0x44>
    2080:	d3 83       	std	Z+3, r29	; 0x03
    2082:	c2 83       	std	Z+2, r28	; 0x02
    2084:	40 81       	ld	r20, Z
    2086:	51 81       	ldd	r21, Z+1	; 0x01
    2088:	84 0f       	add	r24, r20
    208a:	95 1f       	adc	r25, r21
    208c:	c8 17       	cp	r28, r24
    208e:	d9 07       	cpc	r29, r25
    2090:	59 f4       	brne	.+22     	; 0x20a8 <free+0x82>
    2092:	88 81       	ld	r24, Y
    2094:	99 81       	ldd	r25, Y+1	; 0x01
    2096:	84 0f       	add	r24, r20
    2098:	95 1f       	adc	r25, r21
    209a:	02 96       	adiw	r24, 0x02	; 2
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	9b 81       	ldd	r25, Y+3	; 0x03
    20a4:	93 83       	std	Z+3, r25	; 0x03
    20a6:	82 83       	std	Z+2, r24	; 0x02
    20a8:	21 15       	cp	r18, r1
    20aa:	31 05       	cpc	r19, r1
    20ac:	29 f4       	brne	.+10     	; 0x20b8 <free+0x92>
    20ae:	f0 93 56 01 	sts	0x0156, r31	; 0x800156 <__flp+0x1>
    20b2:	e0 93 55 01 	sts	0x0155, r30	; 0x800155 <__flp>
    20b6:	3d c0       	rjmp	.+122    	; 0x2132 <free+0x10c>
    20b8:	e9 01       	movw	r28, r18
    20ba:	fb 83       	std	Y+3, r31	; 0x03
    20bc:	ea 83       	std	Y+2, r30	; 0x02
    20be:	49 91       	ld	r20, Y+
    20c0:	59 91       	ld	r21, Y+
    20c2:	c4 0f       	add	r28, r20
    20c4:	d5 1f       	adc	r29, r21
    20c6:	ec 17       	cp	r30, r28
    20c8:	fd 07       	cpc	r31, r29
    20ca:	61 f4       	brne	.+24     	; 0x20e4 <free+0xbe>
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	84 0f       	add	r24, r20
    20d2:	95 1f       	adc	r25, r21
    20d4:	02 96       	adiw	r24, 0x02	; 2
    20d6:	e9 01       	movw	r28, r18
    20d8:	99 83       	std	Y+1, r25	; 0x01
    20da:	88 83       	st	Y, r24
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	9b 83       	std	Y+3, r25	; 0x03
    20e2:	8a 83       	std	Y+2, r24	; 0x02
    20e4:	e0 e0       	ldi	r30, 0x00	; 0
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	12 96       	adiw	r26, 0x02	; 2
    20ea:	8d 91       	ld	r24, X+
    20ec:	9c 91       	ld	r25, X
    20ee:	13 97       	sbiw	r26, 0x03	; 3
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	19 f0       	breq	.+6      	; 0x20fa <free+0xd4>
    20f4:	fd 01       	movw	r30, r26
    20f6:	dc 01       	movw	r26, r24
    20f8:	f7 cf       	rjmp	.-18     	; 0x20e8 <free+0xc2>
    20fa:	8d 91       	ld	r24, X+
    20fc:	9c 91       	ld	r25, X
    20fe:	11 97       	sbiw	r26, 0x01	; 1
    2100:	9d 01       	movw	r18, r26
    2102:	2e 5f       	subi	r18, 0xFE	; 254
    2104:	3f 4f       	sbci	r19, 0xFF	; 255
    2106:	82 0f       	add	r24, r18
    2108:	93 1f       	adc	r25, r19
    210a:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <__brkval>
    210e:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <__brkval+0x1>
    2112:	28 17       	cp	r18, r24
    2114:	39 07       	cpc	r19, r25
    2116:	69 f4       	brne	.+26     	; 0x2132 <free+0x10c>
    2118:	30 97       	sbiw	r30, 0x00	; 0
    211a:	29 f4       	brne	.+10     	; 0x2126 <free+0x100>
    211c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__flp+0x1>
    2120:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__flp>
    2124:	02 c0       	rjmp	.+4      	; 0x212a <free+0x104>
    2126:	13 82       	std	Z+3, r1	; 0x03
    2128:	12 82       	std	Z+2, r1	; 0x02
    212a:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <__brkval+0x1>
    212e:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <__brkval>
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	08 95       	ret

00002138 <realloc>:
    2138:	a0 e0       	ldi	r26, 0x00	; 0
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e2 ea       	ldi	r30, 0xA2	; 162
    213e:	f0 e1       	ldi	r31, 0x10	; 16
    2140:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__+0x8>
    2144:	ec 01       	movw	r28, r24
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	21 f4       	brne	.+8      	; 0x2152 <realloc+0x1a>
    214a:	cb 01       	movw	r24, r22
    214c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <malloc>
    2150:	b4 c0       	rjmp	.+360    	; 0x22ba <realloc+0x182>
    2152:	fc 01       	movw	r30, r24
    2154:	e6 0f       	add	r30, r22
    2156:	f7 1f       	adc	r31, r23
    2158:	9c 01       	movw	r18, r24
    215a:	22 50       	subi	r18, 0x02	; 2
    215c:	31 09       	sbc	r19, r1
    215e:	e2 17       	cp	r30, r18
    2160:	f3 07       	cpc	r31, r19
    2162:	08 f4       	brcc	.+2      	; 0x2166 <realloc+0x2e>
    2164:	a8 c0       	rjmp	.+336    	; 0x22b6 <realloc+0x17e>
    2166:	d9 01       	movw	r26, r18
    2168:	0d 91       	ld	r16, X+
    216a:	1c 91       	ld	r17, X
    216c:	11 97       	sbiw	r26, 0x01	; 1
    216e:	06 17       	cp	r16, r22
    2170:	17 07       	cpc	r17, r23
    2172:	b0 f0       	brcs	.+44     	; 0x21a0 <realloc+0x68>
    2174:	05 30       	cpi	r16, 0x05	; 5
    2176:	11 05       	cpc	r17, r1
    2178:	08 f4       	brcc	.+2      	; 0x217c <realloc+0x44>
    217a:	9b c0       	rjmp	.+310    	; 0x22b2 <realloc+0x17a>
    217c:	c8 01       	movw	r24, r16
    217e:	04 97       	sbiw	r24, 0x04	; 4
    2180:	86 17       	cp	r24, r22
    2182:	97 07       	cpc	r25, r23
    2184:	08 f4       	brcc	.+2      	; 0x2188 <realloc+0x50>
    2186:	95 c0       	rjmp	.+298    	; 0x22b2 <realloc+0x17a>
    2188:	02 50       	subi	r16, 0x02	; 2
    218a:	11 09       	sbc	r17, r1
    218c:	06 1b       	sub	r16, r22
    218e:	17 0b       	sbc	r17, r23
    2190:	01 93       	st	Z+, r16
    2192:	11 93       	st	Z+, r17
    2194:	6d 93       	st	X+, r22
    2196:	7c 93       	st	X, r23
    2198:	cf 01       	movw	r24, r30
    219a:	0e 94 13 10 	call	0x2026	; 0x2026 <free>
    219e:	89 c0       	rjmp	.+274    	; 0x22b2 <realloc+0x17a>
    21a0:	5b 01       	movw	r10, r22
    21a2:	a0 1a       	sub	r10, r16
    21a4:	b1 0a       	sbc	r11, r17
    21a6:	4c 01       	movw	r8, r24
    21a8:	80 0e       	add	r8, r16
    21aa:	91 1e       	adc	r9, r17
    21ac:	a0 91 55 01 	lds	r26, 0x0155	; 0x800155 <__flp>
    21b0:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <__flp+0x1>
    21b4:	61 2c       	mov	r6, r1
    21b6:	71 2c       	mov	r7, r1
    21b8:	e1 2c       	mov	r14, r1
    21ba:	f1 2c       	mov	r15, r1
    21bc:	10 97       	sbiw	r26, 0x00	; 0
    21be:	09 f4       	brne	.+2      	; 0x21c2 <realloc+0x8a>
    21c0:	46 c0       	rjmp	.+140    	; 0x224e <realloc+0x116>
    21c2:	8d 91       	ld	r24, X+
    21c4:	9c 91       	ld	r25, X
    21c6:	11 97       	sbiw	r26, 0x01	; 1
    21c8:	a8 15       	cp	r26, r8
    21ca:	b9 05       	cpc	r27, r9
    21cc:	b1 f5       	brne	.+108    	; 0x223a <realloc+0x102>
    21ce:	6c 01       	movw	r12, r24
    21d0:	42 e0       	ldi	r20, 0x02	; 2
    21d2:	c4 0e       	add	r12, r20
    21d4:	d1 1c       	adc	r13, r1
    21d6:	ca 14       	cp	r12, r10
    21d8:	db 04       	cpc	r13, r11
    21da:	78 f1       	brcs	.+94     	; 0x223a <realloc+0x102>
    21dc:	4c 01       	movw	r8, r24
    21de:	8a 18       	sub	r8, r10
    21e0:	9b 08       	sbc	r9, r11
    21e2:	64 01       	movw	r12, r8
    21e4:	42 e0       	ldi	r20, 0x02	; 2
    21e6:	c4 0e       	add	r12, r20
    21e8:	d1 1c       	adc	r13, r1
    21ea:	12 96       	adiw	r26, 0x02	; 2
    21ec:	bc 90       	ld	r11, X
    21ee:	12 97       	sbiw	r26, 0x02	; 2
    21f0:	13 96       	adiw	r26, 0x03	; 3
    21f2:	ac 91       	ld	r26, X
    21f4:	b5 e0       	ldi	r27, 0x05	; 5
    21f6:	cb 16       	cp	r12, r27
    21f8:	d1 04       	cpc	r13, r1
    21fa:	40 f0       	brcs	.+16     	; 0x220c <realloc+0xd4>
    21fc:	b2 82       	std	Z+2, r11	; 0x02
    21fe:	a3 83       	std	Z+3, r26	; 0x03
    2200:	91 82       	std	Z+1, r9	; 0x01
    2202:	80 82       	st	Z, r8
    2204:	d9 01       	movw	r26, r18
    2206:	6d 93       	st	X+, r22
    2208:	7c 93       	st	X, r23
    220a:	09 c0       	rjmp	.+18     	; 0x221e <realloc+0xe6>
    220c:	0e 5f       	subi	r16, 0xFE	; 254
    220e:	1f 4f       	sbci	r17, 0xFF	; 255
    2210:	80 0f       	add	r24, r16
    2212:	91 1f       	adc	r25, r17
    2214:	f9 01       	movw	r30, r18
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
    221a:	eb 2d       	mov	r30, r11
    221c:	fa 2f       	mov	r31, r26
    221e:	e1 14       	cp	r14, r1
    2220:	f1 04       	cpc	r15, r1
    2222:	31 f0       	breq	.+12     	; 0x2230 <realloc+0xf8>
    2224:	d7 01       	movw	r26, r14
    2226:	13 96       	adiw	r26, 0x03	; 3
    2228:	fc 93       	st	X, r31
    222a:	ee 93       	st	-X, r30
    222c:	12 97       	sbiw	r26, 0x02	; 2
    222e:	41 c0       	rjmp	.+130    	; 0x22b2 <realloc+0x17a>
    2230:	f0 93 56 01 	sts	0x0156, r31	; 0x800156 <__flp+0x1>
    2234:	e0 93 55 01 	sts	0x0155, r30	; 0x800155 <__flp>
    2238:	3c c0       	rjmp	.+120    	; 0x22b2 <realloc+0x17a>
    223a:	68 16       	cp	r6, r24
    223c:	79 06       	cpc	r7, r25
    223e:	08 f4       	brcc	.+2      	; 0x2242 <realloc+0x10a>
    2240:	3c 01       	movw	r6, r24
    2242:	7d 01       	movw	r14, r26
    2244:	12 96       	adiw	r26, 0x02	; 2
    2246:	0d 90       	ld	r0, X+
    2248:	bc 91       	ld	r27, X
    224a:	a0 2d       	mov	r26, r0
    224c:	b7 cf       	rjmp	.-146    	; 0x21bc <realloc+0x84>
    224e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <__brkval>
    2252:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <__brkval+0x1>
    2256:	88 16       	cp	r8, r24
    2258:	99 06       	cpc	r9, r25
    225a:	e1 f4       	brne	.+56     	; 0x2294 <realloc+0x15c>
    225c:	66 16       	cp	r6, r22
    225e:	77 06       	cpc	r7, r23
    2260:	c8 f4       	brcc	.+50     	; 0x2294 <realloc+0x15c>
    2262:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2266:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	41 f4       	brne	.+16     	; 0x227e <realloc+0x146>
    226e:	8d b7       	in	r24, 0x3d	; 61
    2270:	9e b7       	in	r25, 0x3e	; 62
    2272:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2276:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    227a:	84 1b       	sub	r24, r20
    227c:	95 0b       	sbc	r25, r21
    227e:	e8 17       	cp	r30, r24
    2280:	f9 07       	cpc	r31, r25
    2282:	c8 f4       	brcc	.+50     	; 0x22b6 <realloc+0x17e>
    2284:	f0 93 54 01 	sts	0x0154, r31	; 0x800154 <__brkval+0x1>
    2288:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <__brkval>
    228c:	f9 01       	movw	r30, r18
    228e:	71 83       	std	Z+1, r23	; 0x01
    2290:	60 83       	st	Z, r22
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <realloc+0x17a>
    2294:	cb 01       	movw	r24, r22
    2296:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <malloc>
    229a:	7c 01       	movw	r14, r24
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	59 f0       	breq	.+22     	; 0x22b6 <realloc+0x17e>
    22a0:	a8 01       	movw	r20, r16
    22a2:	be 01       	movw	r22, r28
    22a4:	0e 94 62 11 	call	0x22c4	; 0x22c4 <memcpy>
    22a8:	ce 01       	movw	r24, r28
    22aa:	0e 94 13 10 	call	0x2026	; 0x2026 <free>
    22ae:	c7 01       	movw	r24, r14
    22b0:	04 c0       	rjmp	.+8      	; 0x22ba <realloc+0x182>
    22b2:	ce 01       	movw	r24, r28
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <realloc+0x182>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	ee e0       	ldi	r30, 0x0E	; 14
    22c0:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__+0x8>

000022c4 <memcpy>:
    22c4:	fb 01       	movw	r30, r22
    22c6:	dc 01       	movw	r26, r24
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <memcpy+0xa>
    22ca:	01 90       	ld	r0, Z+
    22cc:	0d 92       	st	X+, r0
    22ce:	41 50       	subi	r20, 0x01	; 1
    22d0:	50 40       	sbci	r21, 0x00	; 0
    22d2:	d8 f7       	brcc	.-10     	; 0x22ca <memcpy+0x6>
    22d4:	08 95       	ret

000022d6 <__prologue_saves__>:
    22d6:	2f 92       	push	r2
    22d8:	3f 92       	push	r3
    22da:	4f 92       	push	r4
    22dc:	5f 92       	push	r5
    22de:	6f 92       	push	r6
    22e0:	7f 92       	push	r7
    22e2:	8f 92       	push	r8
    22e4:	9f 92       	push	r9
    22e6:	af 92       	push	r10
    22e8:	bf 92       	push	r11
    22ea:	cf 92       	push	r12
    22ec:	df 92       	push	r13
    22ee:	ef 92       	push	r14
    22f0:	ff 92       	push	r15
    22f2:	0f 93       	push	r16
    22f4:	1f 93       	push	r17
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	ca 1b       	sub	r28, r26
    2300:	db 0b       	sbc	r29, r27
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	09 94       	ijmp

0000230e <__epilogue_restores__>:
    230e:	2a 88       	ldd	r2, Y+18	; 0x12
    2310:	39 88       	ldd	r3, Y+17	; 0x11
    2312:	48 88       	ldd	r4, Y+16	; 0x10
    2314:	5f 84       	ldd	r5, Y+15	; 0x0f
    2316:	6e 84       	ldd	r6, Y+14	; 0x0e
    2318:	7d 84       	ldd	r7, Y+13	; 0x0d
    231a:	8c 84       	ldd	r8, Y+12	; 0x0c
    231c:	9b 84       	ldd	r9, Y+11	; 0x0b
    231e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2320:	b9 84       	ldd	r11, Y+9	; 0x09
    2322:	c8 84       	ldd	r12, Y+8	; 0x08
    2324:	df 80       	ldd	r13, Y+7	; 0x07
    2326:	ee 80       	ldd	r14, Y+6	; 0x06
    2328:	fd 80       	ldd	r15, Y+5	; 0x05
    232a:	0c 81       	ldd	r16, Y+4	; 0x04
    232c:	1b 81       	ldd	r17, Y+3	; 0x03
    232e:	aa 81       	ldd	r26, Y+2	; 0x02
    2330:	b9 81       	ldd	r27, Y+1	; 0x01
    2332:	ce 0f       	add	r28, r30
    2334:	d1 1d       	adc	r29, r1
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	ed 01       	movw	r28, r26
    2342:	08 95       	ret

00002344 <_exit>:
    2344:	f8 94       	cli

00002346 <__stop_program>:
    2346:	ff cf       	rjmp	.-2      	; 0x2346 <__stop_program>
