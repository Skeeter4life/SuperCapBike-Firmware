
SuperCapBike-Firmware-ATMEGA328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001430  000014c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  0080011e  0080011e  000014e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000162d  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abe  00000000  00000000  00002c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011f2  00000000  00000000  00003743  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  00004938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099f  00000000  00000000  00004e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b33  00000000  00000000  000057ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00006322  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_2>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_7>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__vector_11>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_14>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_22>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_24>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      68:	a4 00       	.word	0x00a4	; ????
      6a:	c2 00       	.word	0x00c2	; ????
      6c:	e7 00       	.word	0x00e7	; ????
      6e:	0b 01       	movw	r0, r22
      70:	35 01       	movw	r6, r10
      72:	58 01       	movw	r10, r16
      74:	99 01       	movw	r18, r18
      76:	a7 01       	movw	r20, r14
      78:	a3 01       	movw	r20, r6

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e0 e3       	ldi	r30, 0x30	; 48
      8e:	f4 e1       	ldi	r31, 0x14	; 20
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	ae 31       	cpi	r26, 0x1E	; 30
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	21 e0       	ldi	r18, 0x01	; 1
      9e:	ae e1       	ldi	r26, 0x1E	; 30
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a5 36       	cpi	r26, 0x65	; 101
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 22 02 	call	0x444	; 0x444 <main>
      b0:	0c 94 16 0a 	jmp	0x142c	; 0x142c <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <__vector_22>:

#include "../Headers/EEPROM.h"

volatile bool EEPROM_Ready = false; // Not used

ISR(EE_READY_vect){ // Not used
      b8:	1f 92       	push	r1
      ba:	0f 92       	push	r0
      bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	8f 93       	push	r24
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
	
	EEPROM_Ready = true;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
		
      d4:	00 00       	nop
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	8f 91       	pop	r24
      dc:	0f 90       	pop	r0
      de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
      e2:	0f 90       	pop	r0
      e4:	1f 90       	pop	r1
      e6:	18 95       	reti

000000e8 <__vector_24>:

volatile TWI_States Next_I2C_State = TWI_IDLE;

volatile TWI_Status I2C_Status = TWI_OK; // Useful for debugging and checking I suppose

ISR(TWI_vect){
      e8:	1f 92       	push	r1
      ea:	0f 92       	push	r0
      ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
      f0:	0f 92       	push	r0
      f2:	11 24       	eor	r1, r1
      f4:	2f 93       	push	r18
      f6:	3f 93       	push	r19
      f8:	4f 93       	push	r20
      fa:	5f 93       	push	r21
      fc:	6f 93       	push	r22
      fe:	7f 93       	push	r23
     100:	8f 93       	push	r24
     102:	9f 93       	push	r25
     104:	af 93       	push	r26
     106:	bf 93       	push	r27
     108:	ef 93       	push	r30
     10a:	ff 93       	push	r31
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t Transmit_Code = (1 << TWINT) | (1 << TWEN) | (1 << TWIE); // Clear the interrupt flag, enable TWI and TWI interrupts
     116:	85 e8       	ldi	r24, 0x85	; 133
     118:	89 83       	std	Y+1, r24	; 0x01
	
	switch(Next_I2C_State){
     11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     11e:	88 2f       	mov	r24, r24
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	09 2e       	mov	r0, r25
     124:	00 0c       	add	r0, r0
     126:	aa 0b       	sbc	r26, r26
     128:	bb 0b       	sbc	r27, r27
     12a:	40 e0       	ldi	r20, 0x00	; 0
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	28 e0       	ldi	r18, 0x08	; 8
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	84 1b       	sub	r24, r20
     134:	95 0b       	sbc	r25, r21
     136:	28 17       	cp	r18, r24
     138:	39 07       	cpc	r19, r25
     13a:	08 f4       	brcc	.+2      	; 0x13e <__vector_24+0x56>
     13c:	0b c1       	rjmp	.+534    	; 0x354 <__vector_24+0x26c>
     13e:	8c 5c       	subi	r24, 0xCC	; 204
     140:	9f 4f       	sbci	r25, 0xFF	; 255
     142:	fc 01       	movw	r30, r24
     144:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__tablejump2__>
		
		case TWI_REPEATED_START:
		
			switch(TWSR_Status){
     148:	89 eb       	ldi	r24, 0xB9	; 185
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	fc 01       	movw	r30, r24
     14e:	80 81       	ld	r24, Z
     150:	88 2f       	mov	r24, r24
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	88 7f       	andi	r24, 0xF8	; 248
     156:	99 27       	eor	r25, r25
     158:	88 97       	sbiw	r24, 0x28	; 40
     15a:	71 f4       	brne	.+28     	; 0x178 <__vector_24+0x90>
				
				case WRITE_DATA_ACK:
					
					Next_I2C_State = TWI_ADDRESS_READ;
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				
					break;
     162:	00 00       	nop
					I2C_Status = TWI_FAULT;
					return;
				
			}

			TWCR = Transmit_Code | (1 << TWSTA);
     164:	8c eb       	ldi	r24, 0xBC	; 188
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	29 81       	ldd	r18, Y+1	; 0x01
     16a:	20 62       	ori	r18, 0x20	; 32
     16c:	fc 01       	movw	r30, r24
     16e:	20 83       	st	Z, r18
			
			I2C_Status = TWI_OK;
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <I2C_Status>
			return;
     176:	ee c0       	rjmp	.+476    	; 0x354 <__vector_24+0x26c>
				
					break;
				
				default:
				
					Next_I2C_State = TWI_STOP;
     178:	86 e0       	ldi	r24, 0x06	; 6
     17a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					
					I2C_Status = TWI_FAULT;
     17e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <I2C_Status>
					return;
     182:	e8 c0       	rjmp	.+464    	; 0x354 <__vector_24+0x26c>
			I2C_Status = TWI_OK;
			return;
		
		case TWI_ADDRESS_READ:
		
			switch(TWSR_Status){
     184:	89 eb       	ldi	r24, 0xB9	; 185
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	fc 01       	movw	r30, r24
     18a:	80 81       	ld	r24, Z
     18c:	88 2f       	mov	r24, r24
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	88 7f       	andi	r24, 0xF8	; 248
     192:	99 27       	eor	r25, r25
     194:	40 97       	sbiw	r24, 0x10	; 16
     196:	a9 f4       	brne	.+42     	; 0x1c2 <__vector_24+0xda>
				
				case REPEATED_START:
				
					Next_I2C_State = TWI_READING;
     198:	85 e0       	ldi	r24, 0x05	; 5
     19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
     19e:	00 00       	nop
					return;
					
			}
			
			
			TWDR = (I2C_Data.Device_Address << 1) + 1;
     1a0:	8b eb       	ldi	r24, 0xBB	; 187
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <I2C_Data>
     1a8:	22 0f       	add	r18, r18
     1aa:	2f 5f       	subi	r18, 0xFF	; 255
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     1b0:	8c eb       	ldi	r24, 0xBC	; 188
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	29 81       	ldd	r18, Y+1	; 0x01
     1b6:	fc 01       	movw	r30, r24
     1b8:	20 83       	st	Z, r18
			
			I2C_Status = TWI_OK;
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <I2C_Status>
			return;
     1c0:	c9 c0       	rjmp	.+402    	; 0x354 <__vector_24+0x26c>
					break;
				
				
				default:
				
					Next_I2C_State = TWI_STOP;
     1c2:	86 e0       	ldi	r24, 0x06	; 6
     1c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					
					I2C_Status = TWI_FAULT;
     1c8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <I2C_Status>
					return;
     1cc:	c3 c0       	rjmp	.+390    	; 0x354 <__vector_24+0x26c>
			I2C_Status = TWI_OK;
			return;
		
		case TWI_ADDRESS_WRITE:
		
			switch(TWSR_Status){
     1ce:	89 eb       	ldi	r24, 0xB9	; 185
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	fc 01       	movw	r30, r24
     1d4:	80 81       	ld	r24, Z
     1d6:	88 2f       	mov	r24, r24
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	88 7f       	andi	r24, 0xF8	; 248
     1dc:	99 27       	eor	r25, r25
     1de:	08 97       	sbiw	r24, 0x08	; 8
     1e0:	a1 f4       	brne	.+40     	; 0x20a <__vector_24+0x122>
				
				case START:
				
					Next_I2C_State = TWI_ADDRESS_REGISTER;
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
     1e8:	00 00       	nop
				
					I2C_Status = TWI_FAULT;
					return;
			}

			TWDR = (I2C_Data.Device_Address << 1);
     1ea:	8b eb       	ldi	r24, 0xBB	; 187
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <I2C_Data>
     1f2:	22 0f       	add	r18, r18
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     1f8:	8c eb       	ldi	r24, 0xBC	; 188
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	29 81       	ldd	r18, Y+1	; 0x01
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18

			
			I2C_Status = TWI_OK;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <I2C_Status>
			return;
     208:	a5 c0       	rjmp	.+330    	; 0x354 <__vector_24+0x26c>
					Next_I2C_State = TWI_ADDRESS_REGISTER;
					break;
				
				default:
				
					Next_I2C_State = TWI_STOP;
     20a:	86 e0       	ldi	r24, 0x06	; 6
     20c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				
					I2C_Status = TWI_FAULT;
     210:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <I2C_Status>
					return;
     214:	9f c0       	rjmp	.+318    	; 0x354 <__vector_24+0x26c>
			I2C_Status = TWI_OK;
			return;
		
		case TWI_ADDRESS_REGISTER:
		
			switch(TWSR_Status){
     216:	89 eb       	ldi	r24, 0xB9	; 185
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	fc 01       	movw	r30, r24
     21c:	80 81       	ld	r24, Z
     21e:	88 2f       	mov	r24, r24
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	88 7f       	andi	r24, 0xF8	; 248
     224:	99 27       	eor	r25, r25
     226:	48 97       	sbiw	r24, 0x18	; 24
     228:	59 f4       	brne	.+22     	; 0x240 <__vector_24+0x158>

				case WRITE_ADDRESS_ACK: // Same code for sending device address and register address

					if (I2C_Data.Mode == READING_MODE){
     22a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_Data+0x2>
     22e:	88 23       	and	r24, r24
     230:	19 f4       	brne	.+6      	; 0x238 <__vector_24+0x150>
				
						Next_I2C_State = TWI_REPEATED_START;
     232:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				
						Next_I2C_State = TWI_WRITING;
				
					}
			
					break;
     236:	0a c0       	rjmp	.+20     	; 0x24c <__vector_24+0x164>
				
						Next_I2C_State = TWI_REPEATED_START;
				
					}else{
				
						Next_I2C_State = TWI_WRITING;
     238:	84 e0       	ldi	r24, 0x04	; 4
     23a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				
					}
			
					break;
     23e:	06 c0       	rjmp	.+12     	; 0x24c <__vector_24+0x164>

				default:
			
					Next_I2C_State = TWI_STOP;
     240:	86 e0       	ldi	r24, 0x06	; 6
     242:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
					I2C_Status = TWI_FAULT;
     246:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <I2C_Status>
					return;
     24a:	84 c0       	rjmp	.+264    	; 0x354 <__vector_24+0x26c>
				
			}
		
			TWDR = I2C_Data.Register_Address;
     24c:	8b eb       	ldi	r24, 0xBB	; 187
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <I2C_Data+0x1>
     254:	fc 01       	movw	r30, r24
     256:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     258:	8c eb       	ldi	r24, 0xBC	; 188
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	29 81       	ldd	r18, Y+1	; 0x01
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18
		
			I2C_Status = TWI_OK;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <I2C_Status>
			return;
     268:	75 c0       	rjmp	.+234    	; 0x354 <__vector_24+0x26c>
		
		case TWI_WRITING:
		
			switch(TWSR_Status){
     26a:	89 eb       	ldi	r24, 0xB9	; 185
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	fc 01       	movw	r30, r24
     270:	80 81       	ld	r24, Z
     272:	88 2f       	mov	r24, r24
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	88 7f       	andi	r24, 0xF8	; 248
     278:	99 27       	eor	r25, r25
     27a:	88 97       	sbiw	r24, 0x28	; 40
     27c:	99 f4       	brne	.+38     	; 0x2a4 <__vector_24+0x1bc>
			
				case WRITE_DATA_ACK: // Same code for sending device address and register address
			
					Next_I2C_State = TWI_STOP;
     27e:	86 e0       	ldi	r24, 0x06	; 6
     280:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
     284:	00 00       	nop
					I2C_Status = TWI_FAULT;
					return;
			
			}
		
			TWDR = I2C_Data.Data;
     286:	8b eb       	ldi	r24, 0xBB	; 187
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <I2C_Data+0x3>
     28e:	fc 01       	movw	r30, r24
     290:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     292:	8c eb       	ldi	r24, 0xBC	; 188
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	29 81       	ldd	r18, Y+1	; 0x01
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
		
			I2C_Status = TWI_OK;
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <I2C_Status>
			return;
     2a2:	58 c0       	rjmp	.+176    	; 0x354 <__vector_24+0x26c>
					Next_I2C_State = TWI_STOP;
					break;
			
				default:
			
					Next_I2C_State = TWI_STOP;
     2a4:	86 e0       	ldi	r24, 0x06	; 6
     2a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
					I2C_Status = TWI_FAULT;
     2aa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <I2C_Status>
					return;
     2ae:	52 c0       	rjmp	.+164    	; 0x354 <__vector_24+0x26c>
			I2C_Status = TWI_OK;
			return;
		
		case TWI_READING:
		
			switch(TWSR_Status){
     2b0:	89 eb       	ldi	r24, 0xB9	; 185
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	fc 01       	movw	r30, r24
     2b6:	80 81       	ld	r24, Z
     2b8:	88 2f       	mov	r24, r24
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	88 7f       	andi	r24, 0xF8	; 248
     2be:	99 27       	eor	r25, r25
     2c0:	80 34       	cpi	r24, 0x40	; 64
     2c2:	91 05       	cpc	r25, r1
     2c4:	21 f0       	breq	.+8      	; 0x2ce <__vector_24+0x1e6>
     2c6:	88 35       	cpi	r24, 0x58	; 88
     2c8:	91 05       	cpc	r25, r1
     2ca:	51 f0       	breq	.+20     	; 0x2e0 <__vector_24+0x1f8>
     2cc:	2c c0       	rjmp	.+88     	; 0x326 <__vector_24+0x23e>
			
				case READ_ADDRESS_ACK:
			
					TWCR = Transmit_Code; // Ready to receive the 1 byte
     2ce:	8c eb       	ldi	r24, 0xBC	; 188
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	29 81       	ldd	r18, Y+1	; 0x01
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 83       	st	Z, r18
			
					I2C_Status = TWI_OK;
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <I2C_Status>
					return;
     2de:	3a c0       	rjmp	.+116    	; 0x354 <__vector_24+0x26c>
			
				case BYTE_RECEIVED:
			
					*(I2C_Data.Data_Out) = TWDR;
     2e0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <I2C_Data+0x4>
     2e4:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <I2C_Data+0x5>
     2e8:	2b eb       	ldi	r18, 0xBB	; 187
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	f9 01       	movw	r30, r18
     2ee:	20 81       	ld	r18, Z
     2f0:	fc 01       	movw	r30, r24
     2f2:	20 83       	st	Z, r18
			
					//Next_I2C_State = TWI_STOP;
					
					I2C_Status = TWI_OK;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <I2C_Status>
					
					if(I2C_Data.Callback != NULL){
     2fa:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <I2C_Data+0x6>
     2fe:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <I2C_Data+0x7>
     302:	89 2b       	or	r24, r25
     304:	31 f0       	breq	.+12     	; 0x312 <__vector_24+0x22a>
						I2C_Data.Callback();
     306:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <I2C_Data+0x6>
     30a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <I2C_Data+0x7>
     30e:	fc 01       	movw	r30, r24
     310:	09 95       	icall
					}	
					
					TWCR = Transmit_Code | (1 << TWSTO);
     312:	8c eb       	ldi	r24, 0xBC	; 188
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	29 81       	ldd	r18, Y+1	; 0x01
     318:	20 61       	ori	r18, 0x10	; 16
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18
					Next_I2C_State = TWI_IDLE;
     31e:	88 e0       	ldi	r24, 0x08	; 8
     320:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					
					return;
     324:	17 c0       	rjmp	.+46     	; 0x354 <__vector_24+0x26c>
					
				default:
			
					Next_I2C_State = TWI_STOP;
     326:	86 e0       	ldi	r24, 0x06	; 6
     328:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

					I2C_Status = TWI_FAULT;
     32c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <I2C_Status>
					return;
     330:	11 c0       	rjmp	.+34     	; 0x354 <__vector_24+0x26c>
		
			break; // Just for correctness
		
		case TWI_STOP:
		
			TWCR = Transmit_Code | (1 << TWSTO); 
     332:	8c eb       	ldi	r24, 0xBC	; 188
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	20 61       	ori	r18, 0x10	; 16
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
			Next_I2C_State = TWI_IDLE;
     33e:	88 e0       	ldi	r24, 0x08	; 8
     340:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			break;
     344:	07 c0       	rjmp	.+14     	; 0x354 <__vector_24+0x26c>
		
		case TWI_IDLE:
			
			I2C_Status = TWI_OK;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <I2C_Status>
			return;
     34c:	03 c0       	rjmp	.+6      	; 0x354 <__vector_24+0x26c>
		
		case TWI_TIMEOUT:
		
			I2C_Status = TWI_FAULT;
     34e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <I2C_Status>
			return;
     352:	00 00       	nop

	}

	
}
     354:	0f 90       	pop	r0
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	bf 91       	pop	r27
     360:	af 91       	pop	r26
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	7f 91       	pop	r23
     368:	6f 91       	pop	r22
     36a:	5f 91       	pop	r21
     36c:	4f 91       	pop	r20
     36e:	3f 91       	pop	r19
     370:	2f 91       	pop	r18
     372:	0f 90       	pop	r0
     374:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <Start_TWI>:

void Start_TWI(void){
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
	
	TWSR = 0x00;
     386:	89 eb       	ldi	r24, 0xB9	; 185
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	fc 01       	movw	r30, r24
     38c:	10 82       	st	Z, r1
	TWBR = 0; // 12 = 400 kHz SCL frequency at F_CLK = 16MHZ, 17 at F_CLK = 20MHz 0 = 1.25Mhz @ F_CLK = 20MHz
     38e:	88 eb       	ldi	r24, 0xB8	; 184
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	fc 01       	movw	r30, r24
     394:	10 82       	st	Z, r1
		
	Next_I2C_State = TWI_ADDRESS_WRITE;
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWSTA); // Send start
     39c:	8c eb       	ldi	r24, 0xBC	; 188
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	25 ea       	ldi	r18, 0xA5	; 165
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
	
}
     3a6:	00 00       	nop
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <TWI_Write>:


TWI_Status TWI_Write(uint8_t Device_Address, uint8_t Register_Address, uint8_t Data){
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <TWI_Write+0x6>
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	89 83       	std	Y+1, r24	; 0x01
     3bc:	6a 83       	std	Y+2, r22	; 0x02
     3be:	4b 83       	std	Y+3, r20	; 0x03
	
	//while(Next_I2C_State != TWI_IDLE);
	
	I2C_Data.Device_Address = Device_Address;
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_Data>
	I2C_Data.Register_Address = Register_Address;
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
     3c8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I2C_Data+0x1>
	I2C_Data.Data = Data;
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_Data+0x3>
	
	I2C_Data.Mode = WRITING_MODE;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <I2C_Data+0x2>
	
	Start_TWI();
     3d8:	0e 94 bf 01 	call	0x37e	; 0x37e <Start_TWI>
	
	return TWI_OK;
     3dc:	81 e0       	ldi	r24, 0x01	; 1

}
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <TWI_Read>:

TWI_Status TWI_Read(uint8_t Device_Address, uint8_t Register_Address, uint8_t* Data_Out, void (*Callback)(void)){
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <TWI_Read+0x6>
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <TWI_Read+0x8>
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <TWI_Read+0xa>
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	6a 83       	std	Y+2, r22	; 0x02
     3fc:	5c 83       	std	Y+4, r21	; 0x04
     3fe:	4b 83       	std	Y+3, r20	; 0x03
     400:	3e 83       	std	Y+6, r19	; 0x06
     402:	2d 83       	std	Y+5, r18	; 0x05
	
	//while(Next_I2C_State != TWI_IDLE);
	
	I2C_Data.Device_Address = Device_Address;
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_Data>
	I2C_Data.Register_Address = Register_Address;
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I2C_Data+0x1>
	I2C_Data.Data_Out = Data_Out;
     410:	8b 81       	ldd	r24, Y+3	; 0x03
     412:	9c 81       	ldd	r25, Y+4	; 0x04
     414:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <I2C_Data+0x5>
     418:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <I2C_Data+0x4>
	I2C_Data.Callback = Callback;
     41c:	8d 81       	ldd	r24, Y+5	; 0x05
     41e:	9e 81       	ldd	r25, Y+6	; 0x06
     420:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <I2C_Data+0x7>
     424:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <I2C_Data+0x6>
	
	I2C_Data.Mode = READING_MODE;
     428:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <I2C_Data+0x2>
	
	
	Start_TWI();
     42c:	0e 94 bf 01 	call	0x37e	; 0x37e <Start_TWI>
	
	return TWI_OK;
     430:	81 e0       	ldi	r24, 0x01	; 1

     432:	26 96       	adiw	r28, 0x06	; 6
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <main>:

// To whoever is going through this. To be honest the casing and the way I named my variables changes on the daily. I am sorry. LOL.
// I promise in a real environment ill stick to a proper convention :) (atleast I use enums, okay?)

int main(void)
{
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	1f 92       	push	r1
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
	sei();
     44e:	78 94       	sei
	
	Motor_Status Motor_Setup = Init_Motor();
     450:	0e 94 3c 03 	call	0x678	; 0x678 <Init_Motor>
     454:	89 83       	std	Y+1, r24	; 0x01
	
	if(Motor_Setup == Motor_FAULT) return 1;
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	19 f4       	brne	.+6      	; 0x462 <main+0x1e>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0a c0       	rjmp	.+20     	; 0x476 <main+0x32>
	
	MCUCR |= (1 << PUD); // Disable pull up resistors
     462:	85 e5       	ldi	r24, 0x55	; 85
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	25 e5       	ldi	r18, 0x55	; 85
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	f9 01       	movw	r30, r18
     46c:	20 81       	ld	r18, Z
     46e:	20 61       	ori	r18, 0x10	; 16
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
		//if(TWI_Buffer_Enabled && Current_Speed <= 20 && !IsEmpty(p_TWI_Buffer)){
			//Fetch_TWI(p_TWI_Buffer);
		//}

		
	}
     474:	ff cf       	rjmp	.-2      	; 0x474 <main+0x30>
		//}
	//
	//} // Part of TWI_Old
	
	return 0;
}
     476:	0f 90       	pop	r0
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <__vector_2>:
	[0b011] = {Phase_C, Phase_B, Phase_A},
	[0b111] = {Phase_Invalid, Phase_Invalid, Phase_Invalid}
	
};

ISR(INT1_vect){
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	2f 93       	push	r18
     48c:	3f 93       	push	r19
     48e:	4f 93       	push	r20
     490:	5f 93       	push	r21
     492:	6f 93       	push	r22
     494:	7f 93       	push	r23
     496:	8f 93       	push	r24
     498:	9f 93       	push	r25
     49a:	af 93       	push	r26
     49c:	bf 93       	push	r27
     49e:	ef 93       	push	r30
     4a0:	ff 93       	push	r31
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
	
	if(Next_I2C_State == TWI_IDLE){
     4aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4ae:	88 30       	cpi	r24, 0x08	; 8
     4b0:	59 f4       	brne	.+22     	; 0x4c8 <__vector_2+0x4a>
		Status = TWI_Read(MCP23017_Address, 0x11, &Hall_State, &Update_Commutation); // Clear interrupt flag (read INTCAPB register)
     4b2:	2b e7       	ldi	r18, 0x7B	; 123
     4b4:	32 e0       	ldi	r19, 0x02	; 2
     4b6:	47 e2       	ldi	r20, 0x27	; 39
     4b8:	51 e0       	ldi	r21, 0x01	; 1
     4ba:	61 e1       	ldi	r22, 0x11	; 17
     4bc:	80 e2       	ldi	r24, 0x20	; 32
     4be:	0e 94 f5 01 	call	0x3ea	; 0x3ea <TWI_Read>
     4c2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <Status>
	}else{
		Status = TWI_FAULT;
	}	
}
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__vector_2+0x4e>
ISR(INT1_vect){
	
	if(Next_I2C_State == TWI_IDLE){
		Status = TWI_Read(MCP23017_Address, 0x11, &Hall_State, &Update_Commutation); // Clear interrupt flag (read INTCAPB register)
	}else{
		Status = TWI_FAULT;
     4c8:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <Status>
	}	
}
     4cc:	00 00       	nop
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	7f 91       	pop	r23
     4e0:	6f 91       	pop	r22
     4e2:	5f 91       	pop	r21
     4e4:	4f 91       	pop	r20
     4e6:	3f 91       	pop	r19
     4e8:	2f 91       	pop	r18
     4ea:	0f 90       	pop	r0
     4ec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <Update_Commutation>:

void Update_Commutation(void){
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <Update_Commutation+0x6>
     4fc:	1f 92       	push	r1
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	
	if(Status == TWI_FAULT) return; // Error state -> Will add error flag
     502:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <Status>
     506:	88 23       	and	r24, r24
     508:	09 f4       	brne	.+2      	; 0x50c <Update_Commutation+0x16>
     50a:	ad c0       	rjmp	.+346    	; 0x666 <Update_Commutation+0x170>
		
	// ^ Yeah this really slows things down. Design mistake.
	
	uint8_t Phase_Index = (Hall_State>>3) & 0b111;
     50c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <Hall_State>
     510:	86 95       	lsr	r24
     512:	86 95       	lsr	r24
     514:	86 95       	lsr	r24
     516:	87 70       	andi	r24, 0x07	; 7
     518:	89 83       	std	Y+1, r24	; 0x01
	
	if(Phase_Index == 7 || Phase_Index == 0){
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	87 30       	cpi	r24, 0x07	; 7
     51e:	09 f4       	brne	.+2      	; 0x522 <Update_Commutation+0x2c>
     520:	a4 c0       	rjmp	.+328    	; 0x66a <Update_Commutation+0x174>
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	88 23       	and	r24, r24
     526:	09 f4       	brne	.+2      	; 0x52a <Update_Commutation+0x34>
     528:	a0 c0       	rjmp	.+320    	; 0x66a <Update_Commutation+0x174>
		return; // Error state
	}
			
	const Phase_Logic* Current_Phase = &Commutation_LUT[Phase_Index]; // Not checking for out of bounds. Mask GPB5-3.
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	28 2f       	mov	r18, r24
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	c9 01       	movw	r24, r18
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	82 0f       	add	r24, r18
     538:	93 1f       	adc	r25, r19
     53a:	8a 5f       	subi	r24, 0xFA	; 250
     53c:	9e 4f       	sbci	r25, 0xFE	; 254
     53e:	9b 83       	std	Y+3, r25	; 0x03
     540:	8a 83       	std	Y+2, r24	; 0x02
	
	PORTD &= ~((1 << PORTD0) | (1 << PORTD1) | (1 << PORTD4)); // Ensure all IR2014's are in shutdown state
     542:	8b e2       	ldi	r24, 0x2B	; 43
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	2b e2       	ldi	r18, 0x2B	; 43
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	f9 01       	movw	r30, r18
     54c:	20 81       	ld	r18, Z
     54e:	2c 7e       	andi	r18, 0xEC	; 236
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
	
	DDRD &= ~((1 << DDD5) | (1 << DDD6));
     554:	8a e2       	ldi	r24, 0x2A	; 42
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	2a e2       	ldi	r18, 0x2A	; 42
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	f9 01       	movw	r30, r18
     55e:	20 81       	ld	r18, Z
     560:	2f 79       	andi	r18, 0x9F	; 159
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
	DDRB &= ~(1<<DDB1); // Set IN_1, IN_2 and IN_3 as inputs
     566:	84 e2       	ldi	r24, 0x24	; 36
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	24 e2       	ldi	r18, 0x24	; 36
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	2d 7f       	andi	r18, 0xFD	; 253
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
	
	switch(Current_Phase->High){
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	9b 81       	ldd	r25, Y+3	; 0x03
     57c:	fc 01       	movw	r30, r24
     57e:	80 81       	ld	r24, Z
     580:	88 2f       	mov	r24, r24
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	91 05       	cpc	r25, r1
     588:	81 f0       	breq	.+32     	; 0x5aa <Update_Commutation+0xb4>
     58a:	83 30       	cpi	r24, 0x03	; 3
     58c:	91 05       	cpc	r25, r1
     58e:	b9 f0       	breq	.+46     	; 0x5be <Update_Commutation+0xc8>
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	09 f0       	breq	.+2      	; 0x596 <Update_Commutation+0xa0>
			
			break;
			
		default:
		
			return; // Error state
     594:	6b c0       	rjmp	.+214    	; 0x66c <Update_Commutation+0x176>
	
	switch(Current_Phase->High){
		
		case Phase_A:
			
			PORTD |= (1 << PORTD6); // IN_1
     596:	8b e2       	ldi	r24, 0x2B	; 43
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	2b e2       	ldi	r18, 0x2B	; 43
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	20 64       	ori	r18, 0x40	; 64
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18
			
			break;
     5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <Update_Commutation+0xdc>
		
		case Phase_B:
		
			PORTD |= (1 << PORTD5); // IN_2
     5aa:	8b e2       	ldi	r24, 0x2B	; 43
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	2b e2       	ldi	r18, 0x2B	; 43
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	20 62       	ori	r18, 0x20	; 32
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
			
			break;
     5bc:	0a c0       	rjmp	.+20     	; 0x5d2 <Update_Commutation+0xdc>
			
		case Phase_C:
		
			PORTB |= (1 << PORTB1); // IN_3
     5be:	85 e2       	ldi	r24, 0x25	; 37
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	25 e2       	ldi	r18, 0x25	; 37
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	f9 01       	movw	r30, r18
     5c8:	20 81       	ld	r18, Z
     5ca:	22 60       	ori	r18, 0x02	; 2
     5cc:	fc 01       	movw	r30, r24
     5ce:	20 83       	st	Z, r18
			
			break;
     5d0:	00 00       	nop
		
			return; // Error state
			
	}
	
	switch(Current_Phase->High_Z){
     5d2:	8a 81       	ldd	r24, Y+2	; 0x02
     5d4:	9b 81       	ldd	r25, Y+3	; 0x03
     5d6:	fc 01       	movw	r30, r24
     5d8:	82 81       	ldd	r24, Z+2	; 0x02
     5da:	88 2f       	mov	r24, r24
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	91 05       	cpc	r25, r1
     5e2:	c9 f0       	breq	.+50     	; 0x616 <Update_Commutation+0x120>
     5e4:	83 30       	cpi	r24, 0x03	; 3
     5e6:	91 05       	cpc	r25, r1
     5e8:	49 f1       	breq	.+82     	; 0x63c <Update_Commutation+0x146>
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <Update_Commutation+0xfa>
			
			break;
			
		default:
		
			return; // Error state
     5ee:	3e c0       	rjmp	.+124    	; 0x66c <Update_Commutation+0x176>
	
	switch(Current_Phase->High_Z){
		
		case Phase_A: // U1 IR2014
			
			PORTD &= ~(1 << PORTD0); //D0: U1
     5f0:	8b e2       	ldi	r24, 0x2B	; 43
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	2b e2       	ldi	r18, 0x2B	; 43
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	f9 01       	movw	r30, r18
     5fa:	20 81       	ld	r18, Z
     5fc:	2e 7f       	andi	r18, 0xFE	; 254
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
			
			PORTD |= (1 << PORTD1) | (1 << PORTD4); // D1: U3, D4: U2
     602:	8b e2       	ldi	r24, 0x2B	; 43
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	2b e2       	ldi	r18, 0x2B	; 43
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	f9 01       	movw	r30, r18
     60c:	20 81       	ld	r18, Z
     60e:	22 61       	ori	r18, 0x12	; 18
     610:	fc 01       	movw	r30, r24
     612:	20 83       	st	Z, r18
			
			break;
     614:	26 c0       	rjmp	.+76     	; 0x662 <Update_Commutation+0x16c>
			
		case Phase_B: // U2_IR2104
			
			PORTD &= ~(1 << PORTD4); 
     616:	8b e2       	ldi	r24, 0x2B	; 43
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	2b e2       	ldi	r18, 0x2B	; 43
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	f9 01       	movw	r30, r18
     620:	20 81       	ld	r18, Z
     622:	2f 7e       	andi	r18, 0xEF	; 239
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18
			
			PORTD |= (1 << PORTD1) | (1 << PORTD0);
     628:	8b e2       	ldi	r24, 0x2B	; 43
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	2b e2       	ldi	r18, 0x2B	; 43
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	f9 01       	movw	r30, r18
     632:	20 81       	ld	r18, Z
     634:	23 60       	ori	r18, 0x03	; 3
     636:	fc 01       	movw	r30, r24
     638:	20 83       	st	Z, r18
			
			break;
     63a:	13 c0       	rjmp	.+38     	; 0x662 <Update_Commutation+0x16c>
				
		case Phase_C: // U3_IR2104
			
			PORTD &= ~(1 << PORTD1); 
     63c:	8b e2       	ldi	r24, 0x2B	; 43
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	2b e2       	ldi	r18, 0x2B	; 43
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	f9 01       	movw	r30, r18
     646:	20 81       	ld	r18, Z
     648:	2d 7f       	andi	r18, 0xFD	; 253
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
			
			PORTD |= (1 << PORTD0) | (1 << PORTD4);
     64e:	8b e2       	ldi	r24, 0x2B	; 43
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	2b e2       	ldi	r18, 0x2B	; 43
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	f9 01       	movw	r30, r18
     658:	20 81       	ld	r18, Z
     65a:	21 61       	ori	r18, 0x11	; 17
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
			
			break;
     660:	00 00       	nop
			return; // Error state
			
	}
	
	
	return;
     662:	00 00       	nop
     664:	03 c0       	rjmp	.+6      	; 0x66c <Update_Commutation+0x176>
	}	
}

void Update_Commutation(void){
	
	if(Status == TWI_FAULT) return; // Error state -> Will add error flag
     666:	00 00       	nop
     668:	01 c0       	rjmp	.+2      	; 0x66c <Update_Commutation+0x176>
	// ^ Yeah this really slows things down. Design mistake.
	
	uint8_t Phase_Index = (Hall_State>>3) & 0b111;
	
	if(Phase_Index == 7 || Phase_Index == 0){
		return; // Error state
     66a:	00 00       	nop
	}
	
	
	return;
	
}
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <Init_Motor>:

Motor_Status Init_Motor(void){
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	60 97       	sbiw	r28, 0x10	; 16
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
	
	DDRB |= (1 << DDB4) | (1 << DDB1); // Set MOS_DRIVER, IN_3 as a outputs	
     68c:	84 e2       	ldi	r24, 0x24	; 36
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	24 e2       	ldi	r18, 0x24	; 36
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	f9 01       	movw	r30, r18
     696:	20 81       	ld	r18, Z
     698:	22 61       	ori	r18, 0x12	; 18
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18
	DDRD |= (1 << DDD7) | (1 <<DDD5) | (1 << DDD6) | (1 << DDD0) | (1 << DDD1) | (1 << DDD4); // Set RELAYS, IN_2, IN_1 , SD_U1, SD_U3, SD_U2 as outputs
     69e:	8a e2       	ldi	r24, 0x2A	; 42
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	2a e2       	ldi	r18, 0x2A	; 42
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	f9 01       	movw	r30, r18
     6a8:	20 81       	ld	r18, Z
     6aa:	23 6f       	ori	r18, 0xF3	; 243
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
	
	PORTD &= ~((1 << PORTD0) | (1 << PORTD1) | (1 << PORTD4)); // Ensure all IR2014's are in shutdown state
     6b0:	8b e2       	ldi	r24, 0x2B	; 43
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	2b e2       	ldi	r18, 0x2B	; 43
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	20 81       	ld	r18, Z
     6bc:	2c 7e       	andi	r18, 0xEC	; 236
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
	
	DDRD &= ~((1 << DDD5) | (1 << DDD6));
     6c2:	8a e2       	ldi	r24, 0x2A	; 42
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	2a e2       	ldi	r18, 0x2A	; 42
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	2f 79       	andi	r18, 0x9F	; 159
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
	DDRB &= ~(1<<DDB1); // Set IN_1, IN_2 and IN_3 as inputs
     6d4:	84 e2       	ldi	r24, 0x24	; 36
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	24 e2       	ldi	r18, 0x24	; 36
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	2d 7f       	andi	r18, 0xFD	; 253
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
	
	TWI_Write(MCP23017_Address, 0x01, 0xFF);         // IODIRB: Set all Port B to inputs
     6e6:	4f ef       	ldi	r20, 0xFF	; 255
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     6f0:	00 00       	nop
     6f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6f6:	88 30       	cpi	r24, 0x08	; 8
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <Init_Motor+0x7a>

	TWI_Write(MCP23017_Address, 0x0B, 0b00000010);   // IOCON: INTB is active-high, push-pull
     6fa:	42 e0       	ldi	r20, 0x02	; 2
     6fc:	6b e0       	ldi	r22, 0x0B	; 11
     6fe:	80 e2       	ldi	r24, 0x20	; 32
     700:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     704:	00 00       	nop
     706:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     70a:	88 30       	cpi	r24, 0x08	; 8
     70c:	e1 f7       	brne	.-8      	; 0x706 <Init_Motor+0x8e>
	
	TWI_Write(MCP23017_Address, 0x0B, 0b00000100); // Active-low, open-drain
     70e:	44 e0       	ldi	r20, 0x04	; 4
     710:	6b e0       	ldi	r22, 0x0B	; 11
     712:	80 e2       	ldi	r24, 0x20	; 32
     714:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     718:	00 00       	nop
     71a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     71e:	88 30       	cpi	r24, 0x08	; 8
     720:	e1 f7       	brne	.-8      	; 0x71a <Init_Motor+0xa2>

	TWI_Write(MCP23017_Address, 0x07, 0b00000010);   // DEFVALB: Set compare value for GPIOB1 to HIGH
     722:	42 e0       	ldi	r20, 0x02	; 2
     724:	67 e0       	ldi	r22, 0x07	; 7
     726:	80 e2       	ldi	r24, 0x20	; 32
     728:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     72c:	00 00       	nop
     72e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     732:	88 30       	cpi	r24, 0x08	; 8
     734:	e1 f7       	brne	.-8      	; 0x72e <Init_Motor+0xb6>

	TWI_Write(MCP23017_Address, 0x09, 0b00000010);   // INTCONB: Compare GPIOB1 against DEFVALB
     736:	42 e0       	ldi	r20, 0x02	; 2
     738:	69 e0       	ldi	r22, 0x09	; 9
     73a:	80 e2       	ldi	r24, 0x20	; 32
     73c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     740:	00 00       	nop
     742:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     746:	88 30       	cpi	r24, 0x08	; 8
     748:	e1 f7       	brne	.-8      	; 0x742 <Init_Motor+0xca>

	uint8_t dummy_read;
	TWI_Read(MCP23017_Address, 0x13, &dummy_read, NULL);  // Read GPIOB to clear interrupt flag
     74a:	ce 01       	movw	r24, r28
     74c:	07 96       	adiw	r24, 0x07	; 7
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	ac 01       	movw	r20, r24
     754:	63 e1       	ldi	r22, 0x13	; 19
     756:	80 e2       	ldi	r24, 0x20	; 32
     758:	0e 94 f5 01 	call	0x3ea	; 0x3ea <TWI_Read>
	while(Next_I2C_State != TWI_IDLE);
     75c:	00 00       	nop
     75e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     762:	88 30       	cpi	r24, 0x08	; 8
     764:	e1 f7       	brne	.-8      	; 0x75e <Init_Motor+0xe6>
	
	TWI_Write(MCP23017_Address, 0x05, 0b00111000); 
     766:	48 e3       	ldi	r20, 0x38	; 56
     768:	65 e0       	ldi	r22, 0x05	; 5
     76a:	80 e2       	ldi	r24, 0x20	; 32
     76c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TWI_Write>
	while(Next_I2C_State != TWI_IDLE);
     770:	00 00       	nop
     772:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     776:	88 30       	cpi	r24, 0x08	; 8
     778:	e1 f7       	brne	.-8      	; 0x772 <Init_Motor+0xfa>

	PWM_Setup Phase1;

	Phase1.Pin = PD6_OC0A;
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	88 87       	std	Y+8, r24	; 0x08
	
	Timer_Status Timer1_Set = Init_PWM(&Phase1);
     77e:	ce 01       	movw	r24, r28
     780:	08 96       	adiw	r24, 0x08	; 8
     782:	0e 94 b8 07 	call	0xf70	; 0xf70 <Init_PWM>
     786:	89 83       	std	Y+1, r24	; 0x01
	
	Timer_Status Timer1_Config = Configure_PWM(&Phase1, 1, 10); // Testing with 10% duty cycle
     788:	ce 01       	movw	r24, r28
     78a:	08 96       	adiw	r24, 0x08	; 8
     78c:	4a e0       	ldi	r20, 0x0A	; 10
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	0e 94 92 08 	call	0x1124	; 0x1124 <Configure_PWM>
     796:	8a 83       	std	Y+2, r24	; 0x02
	
	if(Timer1_Set == TIMER_FAULT || Timer1_Config == TIMER_FAULT) return Motor_FAULT;
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	88 23       	and	r24, r24
     79c:	19 f0       	breq	.+6      	; 0x7a4 <Init_Motor+0x12c>
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	88 23       	and	r24, r24
     7a2:	11 f4       	brne	.+4      	; 0x7a8 <Init_Motor+0x130>
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	34 c0       	rjmp	.+104    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	
	PWM_Setup Phase2;
	
	Phase2.Pin = PD5_OC0B;
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	8b 87       	std	Y+11, r24	; 0x0b
	
	Timer_Status Timer2_Set = Init_PWM(&Phase2);
     7ac:	ce 01       	movw	r24, r28
     7ae:	0b 96       	adiw	r24, 0x0b	; 11
     7b0:	0e 94 b8 07 	call	0xf70	; 0xf70 <Init_PWM>
     7b4:	8b 83       	std	Y+3, r24	; 0x03
	
	Timer_Status Timer2_Config = Configure_PWM(&Phase2, 1, 10);
     7b6:	ce 01       	movw	r24, r28
     7b8:	0b 96       	adiw	r24, 0x0b	; 11
     7ba:	4a e0       	ldi	r20, 0x0A	; 10
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	0e 94 92 08 	call	0x1124	; 0x1124 <Configure_PWM>
     7c4:	8c 83       	std	Y+4, r24	; 0x04

	if(Timer2_Set == TIMER_FAULT || Timer2_Config == TIMER_FAULT) return Motor_FAULT;
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	88 23       	and	r24, r24
     7ca:	19 f0       	breq	.+6      	; 0x7d2 <Init_Motor+0x15a>
     7cc:	8c 81       	ldd	r24, Y+4	; 0x04
     7ce:	88 23       	and	r24, r24
     7d0:	11 f4       	brne	.+4      	; 0x7d6 <Init_Motor+0x15e>
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	1d c0       	rjmp	.+58     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	
	PWM_Setup Phase3;
	
	Phase3.Pin = PB1_OC1A;
     7d6:	1e 86       	std	Y+14, r1	; 0x0e
	
	Timer_Status Timer3_Set = Init_PWM(&Phase3);
     7d8:	ce 01       	movw	r24, r28
     7da:	0e 96       	adiw	r24, 0x0e	; 14
     7dc:	0e 94 b8 07 	call	0xf70	; 0xf70 <Init_PWM>
     7e0:	8d 83       	std	Y+5, r24	; 0x05
	
	Timer_Status Timer3_Config = Configure_PWM(&Phase3, 1, 10);
     7e2:	ce 01       	movw	r24, r28
     7e4:	0e 96       	adiw	r24, 0x0e	; 14
     7e6:	4a e0       	ldi	r20, 0x0A	; 10
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	0e 94 92 08 	call	0x1124	; 0x1124 <Configure_PWM>
     7f0:	8e 83       	std	Y+6, r24	; 0x06
	
	if(Timer3_Set == TIMER_FAULT || Timer3_Config == TIMER_FAULT) return Motor_FAULT;
     7f2:	8d 81       	ldd	r24, Y+5	; 0x05
     7f4:	88 23       	and	r24, r24
     7f6:	19 f0       	breq	.+6      	; 0x7fe <Init_Motor+0x186>
     7f8:	8e 81       	ldd	r24, Y+6	; 0x06
     7fa:	88 23       	and	r24, r24
     7fc:	11 f4       	brne	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	07 c0       	rjmp	.+14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	
	sei(); // Ensure interrupts are enabled
     802:	78 94       	sei
		
	EICRA = (1 << ISC11); // The falling edge of INT1 generates an interrupt
     804:	89 e6       	ldi	r24, 0x69	; 105
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	28 e0       	ldi	r18, 0x08	; 8
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
	
	return Motor_OK;
     80e:	80 e0       	ldi	r24, 0x00	; 0
	
}
     810:	60 96       	adiw	r28, 0x10	; 16
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <__vector_14>:
	Timer_Mode[Selected_Timer] = TIMER_CTC;
	Timer_Unit[Selected_Timer] = Unit;
	Timer_Step[Selected_Timer] = Step;
	return TIMER_OK;

}
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     82a:	0f 92       	push	r0
     82c:	11 24       	eor	r1, r1
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	2f 93       	push	r18
     838:	3f 93       	push	r19
     83a:	4f 93       	push	r20
     83c:	5f 93       	push	r21
     83e:	8f 93       	push	r24
     840:	9f 93       	push	r25
     842:	af 93       	push	r26
     844:	bf 93       	push	r27
     846:	ef 93       	push	r30
     848:	ff 93       	push	r31
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	1f 92       	push	r1
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Remaining_Ticks+0x4>
     858:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Remaining_Ticks+0x5>
     85c:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <Remaining_Ticks+0x6>
     860:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <Remaining_Ticks+0x7>
     864:	89 2b       	or	r24, r25
     866:	8a 2b       	or	r24, r26
     868:	8b 2b       	or	r24, r27
     86a:	19 f5       	brne	.+70     	; 0x8b2 <__vector_14+0x90>
     86c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <Calculated_Ticks+0x4>
     870:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <Calculated_Ticks+0x5>
     874:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <Calculated_Ticks+0x6>
     878:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <Calculated_Ticks+0x7>
     87c:	89 2b       	or	r24, r25
     87e:	8a 2b       	or	r24, r26
     880:	8b 2b       	or	r24, r27
     882:	09 f4       	brne	.+2      	; 0x886 <__vector_14+0x64>
     884:	51 c0       	rjmp	.+162    	; 0x928 <__stack+0x29>
     886:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <Calculated_Ticks+0x4>
     88a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <Calculated_Ticks+0x5>
     88e:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <Calculated_Ticks+0x6>
     892:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <Calculated_Ticks+0x7>
     896:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <Remaining_Ticks+0x4>
     89a:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <Remaining_Ticks+0x5>
     89e:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <Remaining_Ticks+0x6>
     8a2:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <Remaining_Ticks+0x7>
     8a6:	87 e4       	ldi	r24, 0x47	; 71
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	2f ef       	ldi	r18, 0xFF	; 255
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 83       	st	Z, r18
     8b0:	3b c0       	rjmp	.+118    	; 0x928 <__stack+0x29>
     8b2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Remaining_Ticks+0x4>
     8b6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Remaining_Ticks+0x5>
     8ba:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <Remaining_Ticks+0x6>
     8be:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <Remaining_Ticks+0x7>
     8c2:	8f 3f       	cpi	r24, 0xFF	; 255
     8c4:	91 05       	cpc	r25, r1
     8c6:	a1 05       	cpc	r26, r1
     8c8:	b1 05       	cpc	r27, r1
     8ca:	09 f0       	breq	.+2      	; 0x8ce <__vector_14+0xac>
     8cc:	48 f4       	brcc	.+18     	; 0x8e0 <__vector_14+0xbe>
     8ce:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Remaining_Ticks+0x4>
     8d2:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Remaining_Ticks+0x5>
     8d6:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <Remaining_Ticks+0x6>
     8da:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <Remaining_Ticks+0x7>
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <__vector_14+0xc0>
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	89 83       	std	Y+1, r24	; 0x01
     8e4:	87 e4       	ldi	r24, 0x47	; 71
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	29 81       	ldd	r18, Y+1	; 0x01
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
     8ee:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <Remaining_Ticks+0x4>
     8f2:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <Remaining_Ticks+0x5>
     8f6:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <Remaining_Ticks+0x6>
     8fa:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <Remaining_Ticks+0x7>
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	88 2f       	mov	r24, r24
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a0 e0       	ldi	r26, 0x00	; 0
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	e8 1a       	sub	r14, r24
     90e:	f9 0a       	sbc	r15, r25
     910:	0a 0b       	sbc	r16, r26
     912:	1b 0b       	sbc	r17, r27
     914:	d8 01       	movw	r26, r16
     916:	c7 01       	movw	r24, r14
     918:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <Remaining_Ticks+0x4>
     91c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <Remaining_Ticks+0x5>
     920:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <Remaining_Ticks+0x6>
     924:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <Remaining_Ticks+0x7>
     928:	00 00       	nop
     92a:	0f 90       	pop	r0
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	ff 91       	pop	r31
     932:	ef 91       	pop	r30
     934:	bf 91       	pop	r27
     936:	af 91       	pop	r26
     938:	9f 91       	pop	r25
     93a:	8f 91       	pop	r24
     93c:	5f 91       	pop	r21
     93e:	4f 91       	pop	r20
     940:	3f 91       	pop	r19
     942:	2f 91       	pop	r18
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	0f 90       	pop	r0
     94e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <__vector_7>:
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     960:	0f 92       	push	r0
     962:	11 24       	eor	r1, r1
     964:	af 92       	push	r10
     966:	bf 92       	push	r11
     968:	cf 92       	push	r12
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	2f 93       	push	r18
     976:	3f 93       	push	r19
     978:	4f 93       	push	r20
     97a:	5f 93       	push	r21
     97c:	6f 93       	push	r22
     97e:	7f 93       	push	r23
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	af 93       	push	r26
     986:	bf 93       	push	r27
     988:	ef 93       	push	r30
     98a:	ff 93       	push	r31
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	1f 92       	push	r1
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Remaining_Ticks+0x8>
     99a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <Remaining_Ticks+0x9>
     99e:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <Remaining_Ticks+0xa>
     9a2:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <Remaining_Ticks+0xb>
     9a6:	89 2b       	or	r24, r25
     9a8:	8a 2b       	or	r24, r26
     9aa:	8b 2b       	or	r24, r27
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <__vector_7+0x58>
     9ae:	56 c0       	rjmp	.+172    	; 0xa5c <__vector_7+0x104>
     9b0:	a0 90 38 01 	lds	r10, 0x0138	; 0x800138 <System_Ticks+0x10>
     9b4:	b0 90 39 01 	lds	r11, 0x0139	; 0x800139 <System_Ticks+0x11>
     9b8:	c0 90 3a 01 	lds	r12, 0x013A	; 0x80013a <System_Ticks+0x12>
     9bc:	d0 90 3b 01 	lds	r13, 0x013B	; 0x80013b <System_Ticks+0x13>
     9c0:	e0 90 3c 01 	lds	r14, 0x013C	; 0x80013c <System_Ticks+0x14>
     9c4:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <System_Ticks+0x15>
     9c8:	00 91 3e 01 	lds	r16, 0x013E	; 0x80013e <System_Ticks+0x16>
     9cc:	10 91 3f 01 	lds	r17, 0x013F	; 0x80013f <System_Ticks+0x17>
     9d0:	2a 2d       	mov	r18, r10
     9d2:	3b 2d       	mov	r19, r11
     9d4:	4c 2d       	mov	r20, r12
     9d6:	5d 2d       	mov	r21, r13
     9d8:	6e 2d       	mov	r22, r14
     9da:	7f 2d       	mov	r23, r15
     9dc:	80 2f       	mov	r24, r16
     9de:	91 2f       	mov	r25, r17
     9e0:	a1 e0       	ldi	r26, 0x01	; 1
     9e2:	0e 94 c5 09 	call	0x138a	; 0x138a <__adddi3_s8>
     9e6:	a2 2e       	mov	r10, r18
     9e8:	b3 2e       	mov	r11, r19
     9ea:	c4 2e       	mov	r12, r20
     9ec:	d5 2e       	mov	r13, r21
     9ee:	e6 2e       	mov	r14, r22
     9f0:	f7 2e       	mov	r15, r23
     9f2:	08 2f       	mov	r16, r24
     9f4:	19 2f       	mov	r17, r25
     9f6:	a0 92 38 01 	sts	0x0138, r10	; 0x800138 <System_Ticks+0x10>
     9fa:	b0 92 39 01 	sts	0x0139, r11	; 0x800139 <System_Ticks+0x11>
     9fe:	c0 92 3a 01 	sts	0x013A, r12	; 0x80013a <System_Ticks+0x12>
     a02:	d0 92 3b 01 	sts	0x013B, r13	; 0x80013b <System_Ticks+0x13>
     a06:	e0 92 3c 01 	sts	0x013C, r14	; 0x80013c <System_Ticks+0x14>
     a0a:	f0 92 3d 01 	sts	0x013D, r15	; 0x80013d <System_Ticks+0x15>
     a0e:	00 93 3e 01 	sts	0x013E, r16	; 0x80013e <System_Ticks+0x16>
     a12:	10 93 3f 01 	sts	0x013F, r17	; 0x80013f <System_Ticks+0x17>
     a16:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Calculated_Ticks+0x8>
     a1a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <Calculated_Ticks+0x9>
     a1e:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <Calculated_Ticks+0xa>
     a22:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <Calculated_Ticks+0xb>
     a26:	89 2b       	or	r24, r25
     a28:	8a 2b       	or	r24, r26
     a2a:	8b 2b       	or	r24, r27
     a2c:	09 f4       	brne	.+2      	; 0xa30 <__vector_7+0xd8>
     a2e:	51 c0       	rjmp	.+162    	; 0xad2 <__vector_7+0x17a>
     a30:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Calculated_Ticks+0x8>
     a34:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <Calculated_Ticks+0x9>
     a38:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <Calculated_Ticks+0xa>
     a3c:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <Calculated_Ticks+0xb>
     a40:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <Remaining_Ticks+0x8>
     a44:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <Remaining_Ticks+0x9>
     a48:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <Remaining_Ticks+0xa>
     a4c:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <Remaining_Ticks+0xb>
     a50:	83 eb       	ldi	r24, 0xB3	; 179
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	2f ef       	ldi	r18, 0xFF	; 255
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
     a5a:	3b c0       	rjmp	.+118    	; 0xad2 <__vector_7+0x17a>
     a5c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Remaining_Ticks+0x8>
     a60:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <Remaining_Ticks+0x9>
     a64:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <Remaining_Ticks+0xa>
     a68:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <Remaining_Ticks+0xb>
     a6c:	8f 3f       	cpi	r24, 0xFF	; 255
     a6e:	91 05       	cpc	r25, r1
     a70:	a1 05       	cpc	r26, r1
     a72:	b1 05       	cpc	r27, r1
     a74:	09 f0       	breq	.+2      	; 0xa78 <__vector_7+0x120>
     a76:	48 f4       	brcc	.+18     	; 0xa8a <__vector_7+0x132>
     a78:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Remaining_Ticks+0x8>
     a7c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <Remaining_Ticks+0x9>
     a80:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <Remaining_Ticks+0xa>
     a84:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <Remaining_Ticks+0xb>
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <__vector_7+0x134>
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	89 83       	std	Y+1, r24	; 0x01
     a8e:	83 eb       	ldi	r24, 0xB3	; 179
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	29 81       	ldd	r18, Y+1	; 0x01
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18
     a98:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <Remaining_Ticks+0x8>
     a9c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <Remaining_Ticks+0x9>
     aa0:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <Remaining_Ticks+0xa>
     aa4:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <Remaining_Ticks+0xb>
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	88 2f       	mov	r24, r24
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	79 01       	movw	r14, r18
     ab4:	8a 01       	movw	r16, r20
     ab6:	e8 1a       	sub	r14, r24
     ab8:	f9 0a       	sbc	r15, r25
     aba:	0a 0b       	sbc	r16, r26
     abc:	1b 0b       	sbc	r17, r27
     abe:	d8 01       	movw	r26, r16
     ac0:	c7 01       	movw	r24, r14
     ac2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <Remaining_Ticks+0x8>
     ac6:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <Remaining_Ticks+0x9>
     aca:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <Remaining_Ticks+0xa>
     ace:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <Remaining_Ticks+0xb>
     ad2:	00 00       	nop
     ad4:	0f 90       	pop	r0
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	ff 91       	pop	r31
     adc:	ef 91       	pop	r30
     ade:	bf 91       	pop	r27
     ae0:	af 91       	pop	r26
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	7f 91       	pop	r23
     ae8:	6f 91       	pop	r22
     aea:	5f 91       	pop	r21
     aec:	4f 91       	pop	r20
     aee:	3f 91       	pop	r19
     af0:	2f 91       	pop	r18
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	bf 90       	pop	r11
     b00:	af 90       	pop	r10
     b02:	0f 90       	pop	r0
     b04:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b08:	0f 90       	pop	r0
     b0a:	1f 90       	pop	r1
     b0c:	18 95       	reti

00000b0e <__vector_11>:
     b0e:	1f 92       	push	r1
     b10:	0f 92       	push	r0
     b12:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	4f 93       	push	r20
     b30:	5f 93       	push	r21
     b32:	6f 93       	push	r22
     b34:	7f 93       	push	r23
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	00 d0       	rcall	.+0      	; 0xb48 <__vector_11+0x3a>
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Remaining_Ticks>
     b50:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Remaining_Ticks+0x1>
     b54:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <Remaining_Ticks+0x2>
     b58:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <Remaining_Ticks+0x3>
     b5c:	89 2b       	or	r24, r25
     b5e:	8a 2b       	or	r24, r26
     b60:	8b 2b       	or	r24, r27
     b62:	09 f0       	breq	.+2      	; 0xb66 <__vector_11+0x58>
     b64:	5b c0       	rjmp	.+182    	; 0xc1c <__vector_11+0x10e>
     b66:	a0 90 28 01 	lds	r10, 0x0128	; 0x800128 <System_Ticks>
     b6a:	b0 90 29 01 	lds	r11, 0x0129	; 0x800129 <System_Ticks+0x1>
     b6e:	c0 90 2a 01 	lds	r12, 0x012A	; 0x80012a <System_Ticks+0x2>
     b72:	d0 90 2b 01 	lds	r13, 0x012B	; 0x80012b <System_Ticks+0x3>
     b76:	e0 90 2c 01 	lds	r14, 0x012C	; 0x80012c <System_Ticks+0x4>
     b7a:	f0 90 2d 01 	lds	r15, 0x012D	; 0x80012d <System_Ticks+0x5>
     b7e:	00 91 2e 01 	lds	r16, 0x012E	; 0x80012e <System_Ticks+0x6>
     b82:	10 91 2f 01 	lds	r17, 0x012F	; 0x80012f <System_Ticks+0x7>
     b86:	2a 2d       	mov	r18, r10
     b88:	3b 2d       	mov	r19, r11
     b8a:	4c 2d       	mov	r20, r12
     b8c:	5d 2d       	mov	r21, r13
     b8e:	6e 2d       	mov	r22, r14
     b90:	7f 2d       	mov	r23, r15
     b92:	80 2f       	mov	r24, r16
     b94:	91 2f       	mov	r25, r17
     b96:	a1 e0       	ldi	r26, 0x01	; 1
     b98:	0e 94 c5 09 	call	0x138a	; 0x138a <__adddi3_s8>
     b9c:	a2 2e       	mov	r10, r18
     b9e:	b3 2e       	mov	r11, r19
     ba0:	c4 2e       	mov	r12, r20
     ba2:	d5 2e       	mov	r13, r21
     ba4:	e6 2e       	mov	r14, r22
     ba6:	f7 2e       	mov	r15, r23
     ba8:	08 2f       	mov	r16, r24
     baa:	19 2f       	mov	r17, r25
     bac:	a0 92 28 01 	sts	0x0128, r10	; 0x800128 <System_Ticks>
     bb0:	b0 92 29 01 	sts	0x0129, r11	; 0x800129 <System_Ticks+0x1>
     bb4:	c0 92 2a 01 	sts	0x012A, r12	; 0x80012a <System_Ticks+0x2>
     bb8:	d0 92 2b 01 	sts	0x012B, r13	; 0x80012b <System_Ticks+0x3>
     bbc:	e0 92 2c 01 	sts	0x012C, r14	; 0x80012c <System_Ticks+0x4>
     bc0:	f0 92 2d 01 	sts	0x012D, r15	; 0x80012d <System_Ticks+0x5>
     bc4:	00 93 2e 01 	sts	0x012E, r16	; 0x80012e <System_Ticks+0x6>
     bc8:	10 93 2f 01 	sts	0x012F, r17	; 0x80012f <System_Ticks+0x7>
     bcc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Calculated_Ticks>
     bd0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <Calculated_Ticks+0x1>
     bd4:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <Calculated_Ticks+0x2>
     bd8:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <Calculated_Ticks+0x3>
     bdc:	89 2b       	or	r24, r25
     bde:	8a 2b       	or	r24, r26
     be0:	8b 2b       	or	r24, r27
     be2:	09 f4       	brne	.+2      	; 0xbe6 <__vector_11+0xd8>
     be4:	58 c0       	rjmp	.+176    	; 0xc96 <__vector_11+0x188>
     be6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Calculated_Ticks>
     bea:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <Calculated_Ticks+0x1>
     bee:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <Calculated_Ticks+0x2>
     bf2:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <Calculated_Ticks+0x3>
     bf6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Remaining_Ticks>
     bfa:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <Remaining_Ticks+0x1>
     bfe:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <Remaining_Ticks+0x2>
     c02:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <Remaining_Ticks+0x3>
     c06:	89 e8       	ldi	r24, 0x89	; 137
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	2f ef       	ldi	r18, 0xFF	; 255
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
     c10:	88 e8       	ldi	r24, 0x88	; 136
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	2f ef       	ldi	r18, 0xFF	; 255
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18
     c1a:	3d c0       	rjmp	.+122    	; 0xc96 <__vector_11+0x188>
     c1c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Remaining_Ticks>
     c20:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Remaining_Ticks+0x1>
     c24:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <Remaining_Ticks+0x2>
     c28:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <Remaining_Ticks+0x3>
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	a1 40       	sbci	r26, 0x01	; 1
     c30:	b1 05       	cpc	r27, r1
     c32:	48 f4       	brcc	.+18     	; 0xc46 <__vector_11+0x138>
     c34:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Remaining_Ticks>
     c38:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Remaining_Ticks+0x1>
     c3c:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <Remaining_Ticks+0x2>
     c40:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <Remaining_Ticks+0x3>
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <__vector_11+0x13c>
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	9f ef       	ldi	r25, 0xFF	; 255
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	88 e8       	ldi	r24, 0x88	; 136
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	29 81       	ldd	r18, Y+1	; 0x01
     c54:	3a 81       	ldd	r19, Y+2	; 0x02
     c56:	fc 01       	movw	r30, r24
     c58:	31 83       	std	Z+1, r19	; 0x01
     c5a:	20 83       	st	Z, r18
     c5c:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <Remaining_Ticks>
     c60:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <Remaining_Ticks+0x1>
     c64:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <Remaining_Ticks+0x2>
     c68:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <Remaining_Ticks+0x3>
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	cc 01       	movw	r24, r24
     c72:	a0 e0       	ldi	r26, 0x00	; 0
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	79 01       	movw	r14, r18
     c78:	8a 01       	movw	r16, r20
     c7a:	e8 1a       	sub	r14, r24
     c7c:	f9 0a       	sbc	r15, r25
     c7e:	0a 0b       	sbc	r16, r26
     c80:	1b 0b       	sbc	r17, r27
     c82:	d8 01       	movw	r26, r16
     c84:	c7 01       	movw	r24, r14
     c86:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Remaining_Ticks>
     c8a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <Remaining_Ticks+0x1>
     c8e:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <Remaining_Ticks+0x2>
     c92:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <Remaining_Ticks+0x3>
     c96:	00 00       	nop
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	ff 91       	pop	r31
     ca2:	ef 91       	pop	r30
     ca4:	bf 91       	pop	r27
     ca6:	af 91       	pop	r26
     ca8:	9f 91       	pop	r25
     caa:	8f 91       	pop	r24
     cac:	7f 91       	pop	r23
     cae:	6f 91       	pop	r22
     cb0:	5f 91       	pop	r21
     cb2:	4f 91       	pop	r20
     cb4:	3f 91       	pop	r19
     cb6:	2f 91       	pop	r18
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	0f 90       	pop	r0
     cca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     cce:	0f 90       	pop	r0
     cd0:	1f 90       	pop	r1
     cd2:	18 95       	reti

00000cd4 <Set_Prescaler>:
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	00 d0       	rcall	.+0      	; 0xcda <Set_Prescaler+0x6>
     cda:	1f 92       	push	r1
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	7b 83       	std	Y+3, r23	; 0x03
     ce4:	6a 83       	std	Y+2, r22	; 0x02
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <Set_Prescaler+0x20>
     cf2:	52 c0       	rjmp	.+164    	; 0xd98 <Set_Prescaler+0xc4>
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	91 05       	cpc	r25, r1
     cf8:	09 f4       	brne	.+2      	; 0xcfc <Set_Prescaler+0x28>
     cfa:	99 c0       	rjmp	.+306    	; 0xe2e <Set_Prescaler+0x15a>
     cfc:	89 2b       	or	r24, r25
     cfe:	09 f0       	breq	.+2      	; 0xd02 <Set_Prescaler+0x2e>
     d00:	e1 c0       	rjmp	.+450    	; 0xec4 <Set_Prescaler+0x1f0>
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	9b 81       	ldd	r25, Y+3	; 0x03
     d06:	80 34       	cpi	r24, 0x40	; 64
     d08:	91 05       	cpc	r25, r1
     d0a:	29 f1       	breq	.+74     	; 0xd56 <Set_Prescaler+0x82>
     d0c:	81 34       	cpi	r24, 0x41	; 65
     d0e:	91 05       	cpc	r25, r1
     d10:	30 f4       	brcc	.+12     	; 0xd1e <Set_Prescaler+0x4a>
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	91 05       	cpc	r25, r1
     d16:	59 f0       	breq	.+22     	; 0xd2e <Set_Prescaler+0x5a>
     d18:	08 97       	sbiw	r24, 0x08	; 8
     d1a:	99 f0       	breq	.+38     	; 0xd42 <Set_Prescaler+0x6e>
     d1c:	3a c0       	rjmp	.+116    	; 0xd92 <Set_Prescaler+0xbe>
     d1e:	81 15       	cp	r24, r1
     d20:	21 e0       	ldi	r18, 0x01	; 1
     d22:	92 07       	cpc	r25, r18
     d24:	11 f1       	breq	.+68     	; 0xd6a <Set_Prescaler+0x96>
     d26:	81 15       	cp	r24, r1
     d28:	94 40       	sbci	r25, 0x04	; 4
     d2a:	49 f1       	breq	.+82     	; 0xd7e <Set_Prescaler+0xaa>
     d2c:	32 c0       	rjmp	.+100    	; 0xd92 <Set_Prescaler+0xbe>
     d2e:	81 e8       	ldi	r24, 0x81	; 129
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	21 e8       	ldi	r18, 0x81	; 129
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	f9 01       	movw	r30, r18
     d38:	20 81       	ld	r18, Z
     d3a:	21 60       	ori	r18, 0x01	; 1
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 83       	st	Z, r18
     d40:	2a c0       	rjmp	.+84     	; 0xd96 <Set_Prescaler+0xc2>
     d42:	81 e8       	ldi	r24, 0x81	; 129
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	21 e8       	ldi	r18, 0x81	; 129
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	f9 01       	movw	r30, r18
     d4c:	20 81       	ld	r18, Z
     d4e:	22 60       	ori	r18, 0x02	; 2
     d50:	fc 01       	movw	r30, r24
     d52:	20 83       	st	Z, r18
     d54:	20 c0       	rjmp	.+64     	; 0xd96 <Set_Prescaler+0xc2>
     d56:	81 e8       	ldi	r24, 0x81	; 129
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	21 e8       	ldi	r18, 0x81	; 129
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	f9 01       	movw	r30, r18
     d60:	20 81       	ld	r18, Z
     d62:	23 60       	ori	r18, 0x03	; 3
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18
     d68:	16 c0       	rjmp	.+44     	; 0xd96 <Set_Prescaler+0xc2>
     d6a:	81 e8       	ldi	r24, 0x81	; 129
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	21 e8       	ldi	r18, 0x81	; 129
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	f9 01       	movw	r30, r18
     d74:	20 81       	ld	r18, Z
     d76:	24 60       	ori	r18, 0x04	; 4
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18
     d7c:	0c c0       	rjmp	.+24     	; 0xd96 <Set_Prescaler+0xc2>
     d7e:	81 e8       	ldi	r24, 0x81	; 129
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	21 e8       	ldi	r18, 0x81	; 129
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	f9 01       	movw	r30, r18
     d88:	20 81       	ld	r18, Z
     d8a:	25 60       	ori	r18, 0x05	; 5
     d8c:	fc 01       	movw	r30, r24
     d8e:	20 83       	st	Z, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <Set_Prescaler+0xc2>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	9a c0       	rjmp	.+308    	; 0xeca <Set_Prescaler+0x1f6>
     d96:	98 c0       	rjmp	.+304    	; 0xec8 <Set_Prescaler+0x1f4>
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	9b 81       	ldd	r25, Y+3	; 0x03
     d9c:	80 34       	cpi	r24, 0x40	; 64
     d9e:	91 05       	cpc	r25, r1
     da0:	29 f1       	breq	.+74     	; 0xdec <Set_Prescaler+0x118>
     da2:	81 34       	cpi	r24, 0x41	; 65
     da4:	91 05       	cpc	r25, r1
     da6:	30 f4       	brcc	.+12     	; 0xdb4 <Set_Prescaler+0xe0>
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	91 05       	cpc	r25, r1
     dac:	59 f0       	breq	.+22     	; 0xdc4 <Set_Prescaler+0xf0>
     dae:	08 97       	sbiw	r24, 0x08	; 8
     db0:	99 f0       	breq	.+38     	; 0xdd8 <Set_Prescaler+0x104>
     db2:	3a c0       	rjmp	.+116    	; 0xe28 <Set_Prescaler+0x154>
     db4:	81 15       	cp	r24, r1
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	9f 07       	cpc	r25, r31
     dba:	11 f1       	breq	.+68     	; 0xe00 <Set_Prescaler+0x12c>
     dbc:	81 15       	cp	r24, r1
     dbe:	94 40       	sbci	r25, 0x04	; 4
     dc0:	49 f1       	breq	.+82     	; 0xe14 <Set_Prescaler+0x140>
     dc2:	32 c0       	rjmp	.+100    	; 0xe28 <Set_Prescaler+0x154>
     dc4:	85 e4       	ldi	r24, 0x45	; 69
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	25 e4       	ldi	r18, 0x45	; 69
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	f9 01       	movw	r30, r18
     dce:	20 81       	ld	r18, Z
     dd0:	21 60       	ori	r18, 0x01	; 1
     dd2:	fc 01       	movw	r30, r24
     dd4:	20 83       	st	Z, r18
     dd6:	2a c0       	rjmp	.+84     	; 0xe2c <Set_Prescaler+0x158>
     dd8:	85 e4       	ldi	r24, 0x45	; 69
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	25 e4       	ldi	r18, 0x45	; 69
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	f9 01       	movw	r30, r18
     de2:	20 81       	ld	r18, Z
     de4:	22 60       	ori	r18, 0x02	; 2
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18
     dea:	20 c0       	rjmp	.+64     	; 0xe2c <Set_Prescaler+0x158>
     dec:	85 e4       	ldi	r24, 0x45	; 69
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	25 e4       	ldi	r18, 0x45	; 69
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	f9 01       	movw	r30, r18
     df6:	20 81       	ld	r18, Z
     df8:	23 60       	ori	r18, 0x03	; 3
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 83       	st	Z, r18
     dfe:	16 c0       	rjmp	.+44     	; 0xe2c <Set_Prescaler+0x158>
     e00:	85 e4       	ldi	r24, 0x45	; 69
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	25 e4       	ldi	r18, 0x45	; 69
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	f9 01       	movw	r30, r18
     e0a:	20 81       	ld	r18, Z
     e0c:	24 60       	ori	r18, 0x04	; 4
     e0e:	fc 01       	movw	r30, r24
     e10:	20 83       	st	Z, r18
     e12:	0c c0       	rjmp	.+24     	; 0xe2c <Set_Prescaler+0x158>
     e14:	85 e4       	ldi	r24, 0x45	; 69
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	25 e4       	ldi	r18, 0x45	; 69
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	f9 01       	movw	r30, r18
     e1e:	20 81       	ld	r18, Z
     e20:	25 60       	ori	r18, 0x05	; 5
     e22:	fc 01       	movw	r30, r24
     e24:	20 83       	st	Z, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <Set_Prescaler+0x158>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	4f c0       	rjmp	.+158    	; 0xeca <Set_Prescaler+0x1f6>
     e2c:	4d c0       	rjmp	.+154    	; 0xec8 <Set_Prescaler+0x1f4>
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	9b 81       	ldd	r25, Y+3	; 0x03
     e32:	80 34       	cpi	r24, 0x40	; 64
     e34:	91 05       	cpc	r25, r1
     e36:	29 f1       	breq	.+74     	; 0xe82 <Set_Prescaler+0x1ae>
     e38:	81 34       	cpi	r24, 0x41	; 65
     e3a:	91 05       	cpc	r25, r1
     e3c:	30 f4       	brcc	.+12     	; 0xe4a <Set_Prescaler+0x176>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	91 05       	cpc	r25, r1
     e42:	59 f0       	breq	.+22     	; 0xe5a <Set_Prescaler+0x186>
     e44:	08 97       	sbiw	r24, 0x08	; 8
     e46:	99 f0       	breq	.+38     	; 0xe6e <Set_Prescaler+0x19a>
     e48:	3a c0       	rjmp	.+116    	; 0xebe <Set_Prescaler+0x1ea>
     e4a:	81 15       	cp	r24, r1
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	9f 07       	cpc	r25, r31
     e50:	11 f1       	breq	.+68     	; 0xe96 <Set_Prescaler+0x1c2>
     e52:	81 15       	cp	r24, r1
     e54:	94 40       	sbci	r25, 0x04	; 4
     e56:	49 f1       	breq	.+82     	; 0xeaa <Set_Prescaler+0x1d6>
     e58:	32 c0       	rjmp	.+100    	; 0xebe <Set_Prescaler+0x1ea>
     e5a:	81 eb       	ldi	r24, 0xB1	; 177
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	21 eb       	ldi	r18, 0xB1	; 177
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	f9 01       	movw	r30, r18
     e64:	20 81       	ld	r18, Z
     e66:	21 60       	ori	r18, 0x01	; 1
     e68:	fc 01       	movw	r30, r24
     e6a:	20 83       	st	Z, r18
     e6c:	2a c0       	rjmp	.+84     	; 0xec2 <Set_Prescaler+0x1ee>
     e6e:	81 eb       	ldi	r24, 0xB1	; 177
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	21 eb       	ldi	r18, 0xB1	; 177
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	f9 01       	movw	r30, r18
     e78:	20 81       	ld	r18, Z
     e7a:	22 60       	ori	r18, 0x02	; 2
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
     e80:	20 c0       	rjmp	.+64     	; 0xec2 <Set_Prescaler+0x1ee>
     e82:	81 eb       	ldi	r24, 0xB1	; 177
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	21 eb       	ldi	r18, 0xB1	; 177
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	20 81       	ld	r18, Z
     e8e:	24 60       	ori	r18, 0x04	; 4
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18
     e94:	16 c0       	rjmp	.+44     	; 0xec2 <Set_Prescaler+0x1ee>
     e96:	81 eb       	ldi	r24, 0xB1	; 177
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	21 eb       	ldi	r18, 0xB1	; 177
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	f9 01       	movw	r30, r18
     ea0:	20 81       	ld	r18, Z
     ea2:	26 60       	ori	r18, 0x06	; 6
     ea4:	fc 01       	movw	r30, r24
     ea6:	20 83       	st	Z, r18
     ea8:	0c c0       	rjmp	.+24     	; 0xec2 <Set_Prescaler+0x1ee>
     eaa:	81 eb       	ldi	r24, 0xB1	; 177
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	21 eb       	ldi	r18, 0xB1	; 177
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	f9 01       	movw	r30, r18
     eb4:	20 81       	ld	r18, Z
     eb6:	27 60       	ori	r18, 0x07	; 7
     eb8:	fc 01       	movw	r30, r24
     eba:	20 83       	st	Z, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <Set_Prescaler+0x1ee>
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	04 c0       	rjmp	.+8      	; 0xeca <Set_Prescaler+0x1f6>
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <Set_Prescaler+0x1f4>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <Set_Prescaler+0x1f6>
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <Reset_Timer_If_CTC>:

// f_PWM = f_clk/N*256

static void Reset_Timer_If_CTC(void) {
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	
	switch(Selected_Timer) {
     ede:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Selected_Timer>
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	b9 f0       	breq	.+46     	; 0xf1a <Reset_Timer_If_CTC+0x44>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	91 05       	cpc	r25, r1
     ef0:	29 f1       	breq	.+74     	; 0xf3c <Reset_Timer_If_CTC+0x66>
     ef2:	89 2b       	or	r24, r25
     ef4:	09 f0       	breq	.+2      	; 0xef8 <Reset_Timer_If_CTC+0x22>
			}
			
			break;
	}
	
}
     ef6:	38 c0       	rjmp	.+112    	; 0xf68 <Reset_Timer_If_CTC+0x92>
	
	switch(Selected_Timer) {
		
		case _16_bit:
		
			if(Timer_Mode[_16_bit] == TIMER_CTC){
     ef8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Timer_Mode>
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	79 f5       	brne	.+94     	; 0xf5e <Reset_Timer_If_CTC+0x88>
				
				TIMSK1 = 0; // Disable all timer interrupts
     f00:	8f e6       	ldi	r24, 0x6F	; 111
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	fc 01       	movw	r30, r24
     f06:	10 82       	st	Z, r1
				TCCR1A = 0;
     f08:	80 e8       	ldi	r24, 0x80	; 128
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	fc 01       	movw	r30, r24
     f0e:	10 82       	st	Z, r1
				TCCR1B = 0;
     f10:	81 e8       	ldi	r24, 0x81	; 129
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	fc 01       	movw	r30, r24
     f16:	10 82       	st	Z, r1
				
			}
			
			break;
     f18:	22 c0       	rjmp	.+68     	; 0xf5e <Reset_Timer_If_CTC+0x88>
			
		case _8_bit1:
		
			if(Timer_Mode[_8_bit1] == TIMER_CTC){
     f1a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Timer_Mode+0x1>
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	01 f5       	brne	.+64     	; 0xf62 <Reset_Timer_If_CTC+0x8c>
				
				TIMSK0 = 0;
     f22:	8e e6       	ldi	r24, 0x6E	; 110
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	fc 01       	movw	r30, r24
     f28:	10 82       	st	Z, r1
				TCCR0A = 0;
     f2a:	84 e4       	ldi	r24, 0x44	; 68
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	fc 01       	movw	r30, r24
     f30:	10 82       	st	Z, r1
				TCCR0B = 0;
     f32:	85 e4       	ldi	r24, 0x45	; 69
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	fc 01       	movw	r30, r24
     f38:	10 82       	st	Z, r1
				
			}
			
			break;
     f3a:	13 c0       	rjmp	.+38     	; 0xf62 <Reset_Timer_If_CTC+0x8c>
			
		case _8_bit2:
		
			if(Timer_Mode[_8_bit2] == TIMER_CTC){
     f3c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Timer_Mode+0x2>
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	89 f4       	brne	.+34     	; 0xf66 <Reset_Timer_If_CTC+0x90>
				
				TIMSK2 = 0;
     f44:	80 e7       	ldi	r24, 0x70	; 112
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	fc 01       	movw	r30, r24
     f4a:	10 82       	st	Z, r1
				TCCR2A = 0;
     f4c:	80 eb       	ldi	r24, 0xB0	; 176
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	fc 01       	movw	r30, r24
     f52:	10 82       	st	Z, r1
				TCCR2B = 0;
     f54:	81 eb       	ldi	r24, 0xB1	; 177
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	fc 01       	movw	r30, r24
     f5a:	10 82       	st	Z, r1
				
			}
			
			break;
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <Reset_Timer_If_CTC+0x90>
				TCCR1A = 0;
				TCCR1B = 0;
				
			}
			
			break;
     f5e:	00 00       	nop
     f60:	03 c0       	rjmp	.+6      	; 0xf68 <Reset_Timer_If_CTC+0x92>
				TCCR0A = 0;
				TCCR0B = 0;
				
			}
			
			break;
     f62:	00 00       	nop
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <Reset_Timer_If_CTC+0x92>
				TCCR2A = 0;
				TCCR2B = 0;
				
			}
			
			break;
     f66:	00 00       	nop
	}
	
}
     f68:	00 00       	nop
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <Init_PWM>:

Timer_Status Init_PWM(PWM_Setup* PWM) { // Hardware is incapable of variable freq. variable duty %, except for 16 bit timer.
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	00 d0       	rcall	.+0      	; 0xf76 <Init_PWM+0x6>
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
	
	switch(PWM->Pin){ // I repeat myself seemingly a fair bit here, but the only way the timer is known, without having to pass the timer, is by knowing which pin it is.
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	fc 01       	movw	r30, r24
     f84:	80 81       	ld	r24, Z
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	91 05       	cpc	r25, r1
     f8e:	79 f1       	breq	.+94     	; 0xfee <Init_PWM+0x7e>
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	91 05       	cpc	r25, r1
     f94:	2c f4       	brge	.+10     	; 0xfa0 <Init_PWM+0x30>
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	71 f0       	breq	.+28     	; 0xfb6 <Init_PWM+0x46>
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	d1 f0       	breq	.+52     	; 0xfd2 <Init_PWM+0x62>
     f9e:	63 c0       	rjmp	.+198    	; 0x1066 <Init_PWM+0xf6>
     fa0:	84 30       	cpi	r24, 0x04	; 4
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <Init_PWM+0x38>
     fa6:	41 c0       	rjmp	.+130    	; 0x102a <Init_PWM+0xba>
     fa8:	84 30       	cpi	r24, 0x04	; 4
     faa:	91 05       	cpc	r25, r1
     fac:	7c f1       	brlt	.+94     	; 0x100c <Init_PWM+0x9c>
     fae:	05 97       	sbiw	r24, 0x05	; 5
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <Init_PWM+0x44>
     fb2:	4a c0       	rjmp	.+148    	; 0x1048 <Init_PWM+0xd8>
     fb4:	58 c0       	rjmp	.+176    	; 0x1066 <Init_PWM+0xf6>
		
		case PB1_OC1A:
			
			Selected_Timer = _16_bit;
     fb6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Selected_Timer>
			
			Reset_Timer_If_CTC();
     fba:	0e 94 6b 07 	call	0xed6	; 0xed6 <Reset_Timer_If_CTC>
			
			TCCR1A |= (1 << COM1A1); // Non inverting phase correct PWM
     fbe:	80 e8       	ldi	r24, 0x80	; 128
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	20 e8       	ldi	r18, 0x80	; 128
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	f9 01       	movw	r30, r18
     fc8:	20 81       	ld	r18, Z
     fca:	20 68       	ori	r18, 0x80	; 128
     fcc:	fc 01       	movw	r30, r24
     fce:	20 83       	st	Z, r18
		
			break;
     fd0:	4c c0       	rjmp	.+152    	; 0x106a <Init_PWM+0xfa>
		
		case PB2_OC1B:
			
			Selected_Timer = _16_bit;
     fd2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Selected_Timer>
			
			Reset_Timer_If_CTC();
     fd6:	0e 94 6b 07 	call	0xed6	; 0xed6 <Reset_Timer_If_CTC>
			
			TCCR1A |= (1 << COM1B1);
     fda:	80 e8       	ldi	r24, 0x80	; 128
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	20 e8       	ldi	r18, 0x80	; 128
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	f9 01       	movw	r30, r18
     fe4:	20 81       	ld	r18, Z
     fe6:	20 62       	ori	r18, 0x20	; 32
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
			
			break;
     fec:	3e c0       	rjmp	.+124    	; 0x106a <Init_PWM+0xfa>
		
		case PD5_OC0B:
			
			Selected_Timer = _8_bit1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Selected_Timer>
			
			Reset_Timer_If_CTC();
     ff4:	0e 94 6b 07 	call	0xed6	; 0xed6 <Reset_Timer_If_CTC>
		
			TCCR0A |= (1 << COM0B1);
     ff8:	84 e4       	ldi	r24, 0x44	; 68
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	24 e4       	ldi	r18, 0x44	; 68
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	f9 01       	movw	r30, r18
    1002:	20 81       	ld	r18, Z
    1004:	20 62       	ori	r18, 0x20	; 32
    1006:	fc 01       	movw	r30, r24
    1008:	20 83       	st	Z, r18
			
			break;
    100a:	2f c0       	rjmp	.+94     	; 0x106a <Init_PWM+0xfa>
		
		case PD6_OC0A:
		
			Selected_Timer = _8_bit1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Selected_Timer>
			
			Reset_Timer_If_CTC();
    1012:	0e 94 6b 07 	call	0xed6	; 0xed6 <Reset_Timer_If_CTC>
				
			TCCR0A |= (1 << COM0A1);
    1016:	84 e4       	ldi	r24, 0x44	; 68
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	24 e4       	ldi	r18, 0x44	; 68
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	f9 01       	movw	r30, r18
    1020:	20 81       	ld	r18, Z
    1022:	20 68       	ori	r18, 0x80	; 128
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
			
			break;
    1028:	20 c0       	rjmp	.+64     	; 0x106a <Init_PWM+0xfa>
		
		case PB3_OC2A:
			
			Selected_Timer = _8_bit2;
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Selected_Timer>
			
			Reset_Timer_If_CTC();
    1030:	0e 94 6b 07 	call	0xed6	; 0xed6 <Reset_Timer_If_CTC>
		
			TCCR2A |= (1 << COM2A1);
    1034:	80 eb       	ldi	r24, 0xB0	; 176
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	20 eb       	ldi	r18, 0xB0	; 176
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	20 68       	ori	r18, 0x80	; 128
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18
			
			break;
    1046:	11 c0       	rjmp	.+34     	; 0x106a <Init_PWM+0xfa>
		
		case PD3_OC2B:
		
			Selected_Timer = _8_bit2;
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Selected_Timer>
			
			Reset_Timer_If_CTC();
    104e:	0e 94 6b 07 	call	0xed6	; 0xed6 <Reset_Timer_If_CTC>
					
			TCCR2A |= (1 << COM2B1);
    1052:	80 eb       	ldi	r24, 0xB0	; 176
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	20 eb       	ldi	r18, 0xB0	; 176
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	f9 01       	movw	r30, r18
    105c:	20 81       	ld	r18, Z
    105e:	20 62       	ori	r18, 0x20	; 32
    1060:	fc 01       	movw	r30, r24
    1062:	20 83       	st	Z, r18
			
			break;
    1064:	02 c0       	rjmp	.+4      	; 0x106a <Init_PWM+0xfa>
		
		default:
		
			return TIMER_FAULT;
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	58 c0       	rjmp	.+176    	; 0x111a <Init_PWM+0x1aa>
		
	}

	switch(Selected_Timer) {
    106a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Selected_Timer>
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	19 f1       	breq	.+70     	; 0x10be <Init_PWM+0x14e>
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	91 05       	cpc	r25, r1
    107c:	51 f1       	breq	.+84     	; 0x10d2 <Init_PWM+0x162>
    107e:	89 2b       	or	r24, r25
    1080:	91 f5       	brne	.+100    	; 0x10e6 <Init_PWM+0x176>
		
		case _16_bit:	
			
			// PWM Mode 10: Phase correct, variable freq & duty cycle
			TCCR1A |= (1 << WGM11);
    1082:	80 e8       	ldi	r24, 0x80	; 128
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	20 e8       	ldi	r18, 0x80	; 128
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	f9 01       	movw	r30, r18
    108c:	20 81       	ld	r18, Z
    108e:	22 60       	ori	r18, 0x02	; 2
    1090:	fc 01       	movw	r30, r24
    1092:	20 83       	st	Z, r18
			//TCCR1B |= (1 << WGM13);
			
			ICR1H = (uint8_t)(PWM->ICR >> 8); // A new style of doing this. Is this more clear? I think so.
    1094:	87 e8       	ldi	r24, 0x87	; 135
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	29 81       	ldd	r18, Y+1	; 0x01
    109a:	3a 81       	ldd	r19, Y+2	; 0x02
    109c:	f9 01       	movw	r30, r18
    109e:	21 81       	ldd	r18, Z+1	; 0x01
    10a0:	32 81       	ldd	r19, Z+2	; 0x02
    10a2:	23 2f       	mov	r18, r19
    10a4:	33 27       	eor	r19, r19
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18
			ICR1L = (uint8_t)(PWM->ICR);
    10aa:	86 e8       	ldi	r24, 0x86	; 134
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	29 81       	ldd	r18, Y+1	; 0x01
    10b0:	3a 81       	ldd	r19, Y+2	; 0x02
    10b2:	f9 01       	movw	r30, r18
    10b4:	21 81       	ldd	r18, Z+1	; 0x01
    10b6:	32 81       	ldd	r19, Z+2	; 0x02
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 83       	st	Z, r18
			
			break;
    10bc:	16 c0       	rjmp	.+44     	; 0x10ea <Init_PWM+0x17a>
		
		case  _8_bit1:
				
			TCCR0A |= (1 << WGM00); // Phase correct PWM
    10be:	84 e4       	ldi	r24, 0x44	; 68
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	24 e4       	ldi	r18, 0x44	; 68
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	f9 01       	movw	r30, r18
    10c8:	20 81       	ld	r18, Z
    10ca:	21 60       	ori	r18, 0x01	; 1
    10cc:	fc 01       	movw	r30, r24
    10ce:	20 83       	st	Z, r18
			//TCCR0B |= (1 << WGM02); 
		
			break;
    10d0:	0c c0       	rjmp	.+24     	; 0x10ea <Init_PWM+0x17a>
		
		case _8_bit2:
			
			TCCR2A |= (1 << WGM20); // Phase correct PWM
    10d2:	80 eb       	ldi	r24, 0xB0	; 176
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	20 eb       	ldi	r18, 0xB0	; 176
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	f9 01       	movw	r30, r18
    10dc:	20 81       	ld	r18, Z
    10de:	21 60       	ori	r18, 0x01	; 1
    10e0:	fc 01       	movw	r30, r24
    10e2:	20 83       	st	Z, r18
			//TCCR2B |= (1 << WGM22);
			
			break;
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <Init_PWM+0x17a>
		
		default:
		
			return TIMER_FAULT;
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	18 c0       	rjmp	.+48     	; 0x111a <Init_PWM+0x1aa>
	
	}
	
	Timer_Mode[Selected_Timer] = TIMER_PWM;
    10ea:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Selected_Timer>
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	8e 5f       	subi	r24, 0xFE	; 254
    10f4:	9e 4f       	sbci	r25, 0xFE	; 254
    10f6:	fc 01       	movw	r30, r24
    10f8:	10 82       	st	Z, r1
	Timer_Unit[Selected_Timer] = Invalid;
    10fa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Selected_Timer>
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	88 5a       	subi	r24, 0xA8	; 168
    110c:	9e 4f       	sbci	r25, 0xFE	; 254
    110e:	fc 01       	movw	r30, r24
    1110:	10 82       	st	Z, r1
    1112:	11 82       	std	Z+1, r1	; 0x01
    1114:	12 82       	std	Z+2, r1	; 0x02
    1116:	13 82       	std	Z+3, r1	; 0x03
	return TIMER_OK;
    1118:	81 e0       	ldi	r24, 0x01	; 1
	
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <Configure_PWM>:

Timer_Status Configure_PWM(PWM_Setup* PWM, uint16_t Prescaler, uint8_t Duty_Cycle){
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	00 d0       	rcall	.+0      	; 0x112e <Configure_PWM+0xa>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <Configure_PWM+0xc>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <Configure_PWM+0xe>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	9b 83       	std	Y+3, r25	; 0x03
    1138:	8a 83       	std	Y+2, r24	; 0x02
    113a:	7d 83       	std	Y+5, r23	; 0x05
    113c:	6c 83       	std	Y+4, r22	; 0x04
    113e:	4e 83       	std	Y+6, r20	; 0x06
	
	if(Duty_Cycle > 100) {
    1140:	8e 81       	ldd	r24, Y+6	; 0x06
    1142:	85 36       	cpi	r24, 0x65	; 101
    1144:	10 f0       	brcs	.+4      	; 0x114a <Configure_PWM+0x26>
		return TIMER_FAULT;
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	d1 c0       	rjmp	.+418    	; 0x12ec <Configure_PWM+0x1c8>
	}
	
	switch(PWM->Pin){
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	fc 01       	movw	r30, r24
    1150:	80 81       	ld	r24, Z
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	91 05       	cpc	r25, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <Configure_PWM+0x3a>
    115c:	56 c0       	rjmp	.+172    	; 0x120a <Configure_PWM+0xe6>
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	91 05       	cpc	r25, r1
    1162:	2c f4       	brge	.+10     	; 0x116e <Configure_PWM+0x4a>
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	79 f0       	breq	.+30     	; 0x1186 <Configure_PWM+0x62>
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	71 f1       	breq	.+92     	; 0x11c8 <Configure_PWM+0xa4>
    116c:	ae c0       	rjmp	.+348    	; 0x12ca <Configure_PWM+0x1a6>
    116e:	84 30       	cpi	r24, 0x04	; 4
    1170:	91 05       	cpc	r25, r1
    1172:	09 f4       	brne	.+2      	; 0x1176 <Configure_PWM+0x52>
    1174:	7a c0       	rjmp	.+244    	; 0x126a <Configure_PWM+0x146>
    1176:	84 30       	cpi	r24, 0x04	; 4
    1178:	91 05       	cpc	r25, r1
    117a:	0c f4       	brge	.+2      	; 0x117e <Configure_PWM+0x5a>
    117c:	5e c0       	rjmp	.+188    	; 0x123a <Configure_PWM+0x116>
    117e:	05 97       	sbiw	r24, 0x05	; 5
    1180:	09 f4       	brne	.+2      	; 0x1184 <Configure_PWM+0x60>
    1182:	8b c0       	rjmp	.+278    	; 0x129a <Configure_PWM+0x176>
    1184:	a2 c0       	rjmp	.+324    	; 0x12ca <Configure_PWM+0x1a6>
		
		case PB1_OC1A:
		
			OCR1A = (Duty_Cycle * 65535 + 50) / 100;
    1186:	08 e8       	ldi	r16, 0x88	; 136
    1188:	10 e0       	ldi	r17, 0x00	; 0
    118a:	8e 81       	ldd	r24, Y+6	; 0x06
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	9f ef       	ldi	r25, 0xFF	; 255
    1198:	dc 01       	movw	r26, r24
    119a:	0e 94 ba 09 	call	0x1374	; 0x1374 <__muluhisi3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	c2 96       	adiw	r24, 0x32	; 50
    11a4:	a1 1d       	adc	r26, r1
    11a6:	b1 1d       	adc	r27, r1
    11a8:	24 e6       	ldi	r18, 0x64	; 100
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	0e 94 95 09 	call	0x132a	; 0x132a <__divmodsi4>
    11b8:	da 01       	movw	r26, r20
    11ba:	c9 01       	movw	r24, r18
    11bc:	f8 01       	movw	r30, r16
    11be:	91 83       	std	Z+1, r25	; 0x01
    11c0:	80 83       	st	Z, r24
			Selected_Timer = _16_bit;
    11c2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Selected_Timer>
		
			break;
    11c6:	83 c0       	rjmp	.+262    	; 0x12ce <Configure_PWM+0x1aa>
		
		case PB2_OC1B:
		
			OCR1B = (Duty_Cycle * 65535 + 50) / 100;
    11c8:	0a e8       	ldi	r16, 0x8A	; 138
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	8e 81       	ldd	r24, Y+6	; 0x06
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	9f ef       	ldi	r25, 0xFF	; 255
    11da:	dc 01       	movw	r26, r24
    11dc:	0e 94 ba 09 	call	0x1374	; 0x1374 <__muluhisi3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	c2 96       	adiw	r24, 0x32	; 50
    11e6:	a1 1d       	adc	r26, r1
    11e8:	b1 1d       	adc	r27, r1
    11ea:	24 e6       	ldi	r18, 0x64	; 100
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 95 09 	call	0x132a	; 0x132a <__divmodsi4>
    11fa:	da 01       	movw	r26, r20
    11fc:	c9 01       	movw	r24, r18
    11fe:	f8 01       	movw	r30, r16
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
			Selected_Timer = _16_bit;
    1204:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Selected_Timer>
		
			break;
    1208:	62 c0       	rjmp	.+196    	; 0x12ce <Configure_PWM+0x1aa>
		
		case PD5_OC0B:
		
			OCR0B = (Duty_Cycle * 255 + 50) / 100;
    120a:	28 e4       	ldi	r18, 0x48	; 72
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	8e 81       	ldd	r24, Y+6	; 0x06
    1210:	48 2f       	mov	r20, r24
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	6f ef       	ldi	r22, 0xFF	; 255
    1216:	64 9f       	mul	r22, r20
    1218:	c0 01       	movw	r24, r0
    121a:	65 9f       	mul	r22, r21
    121c:	90 0d       	add	r25, r0
    121e:	11 24       	eor	r1, r1
    1220:	c2 96       	adiw	r24, 0x32	; 50
    1222:	44 e6       	ldi	r20, 0x64	; 100
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	ba 01       	movw	r22, r20
    1228:	0e 94 81 09 	call	0x1302	; 0x1302 <__divmodhi4>
    122c:	cb 01       	movw	r24, r22
    122e:	f9 01       	movw	r30, r18
    1230:	80 83       	st	Z, r24
			Selected_Timer = _8_bit1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Selected_Timer>
		
			break;
    1238:	4a c0       	rjmp	.+148    	; 0x12ce <Configure_PWM+0x1aa>
		
		case PD6_OC0A:
		
			OCR0A = (Duty_Cycle * 255 + 50) / 100;
    123a:	27 e4       	ldi	r18, 0x47	; 71
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	8e 81       	ldd	r24, Y+6	; 0x06
    1240:	48 2f       	mov	r20, r24
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	6f ef       	ldi	r22, 0xFF	; 255
    1246:	64 9f       	mul	r22, r20
    1248:	c0 01       	movw	r24, r0
    124a:	65 9f       	mul	r22, r21
    124c:	90 0d       	add	r25, r0
    124e:	11 24       	eor	r1, r1
    1250:	c2 96       	adiw	r24, 0x32	; 50
    1252:	44 e6       	ldi	r20, 0x64	; 100
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	ba 01       	movw	r22, r20
    1258:	0e 94 81 09 	call	0x1302	; 0x1302 <__divmodhi4>
    125c:	cb 01       	movw	r24, r22
    125e:	f9 01       	movw	r30, r18
    1260:	80 83       	st	Z, r24
			Selected_Timer = _8_bit1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Selected_Timer>
		
			break;
    1268:	32 c0       	rjmp	.+100    	; 0x12ce <Configure_PWM+0x1aa>
		
		case PB3_OC2A:
		
			OCR2A = (Duty_Cycle * 255 + 50) / 100;
    126a:	23 eb       	ldi	r18, 0xB3	; 179
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	8e 81       	ldd	r24, Y+6	; 0x06
    1270:	48 2f       	mov	r20, r24
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	6f ef       	ldi	r22, 0xFF	; 255
    1276:	64 9f       	mul	r22, r20
    1278:	c0 01       	movw	r24, r0
    127a:	65 9f       	mul	r22, r21
    127c:	90 0d       	add	r25, r0
    127e:	11 24       	eor	r1, r1
    1280:	c2 96       	adiw	r24, 0x32	; 50
    1282:	44 e6       	ldi	r20, 0x64	; 100
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	ba 01       	movw	r22, r20
    1288:	0e 94 81 09 	call	0x1302	; 0x1302 <__divmodhi4>
    128c:	cb 01       	movw	r24, r22
    128e:	f9 01       	movw	r30, r18
    1290:	80 83       	st	Z, r24
			Selected_Timer = _8_bit2;
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Selected_Timer>
		
			break;
    1298:	1a c0       	rjmp	.+52     	; 0x12ce <Configure_PWM+0x1aa>
		
		case PD3_OC2B:
		
			OCR2B = (Duty_Cycle * 255 + 50) / 100;
    129a:	24 eb       	ldi	r18, 0xB4	; 180
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	8e 81       	ldd	r24, Y+6	; 0x06
    12a0:	48 2f       	mov	r20, r24
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	6f ef       	ldi	r22, 0xFF	; 255
    12a6:	64 9f       	mul	r22, r20
    12a8:	c0 01       	movw	r24, r0
    12aa:	65 9f       	mul	r22, r21
    12ac:	90 0d       	add	r25, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	c2 96       	adiw	r24, 0x32	; 50
    12b2:	44 e6       	ldi	r20, 0x64	; 100
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	ba 01       	movw	r22, r20
    12b8:	0e 94 81 09 	call	0x1302	; 0x1302 <__divmodhi4>
    12bc:	cb 01       	movw	r24, r22
    12be:	f9 01       	movw	r30, r18
    12c0:	80 83       	st	Z, r24
			Selected_Timer = _8_bit2;
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Selected_Timer>
		
			break;
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <Configure_PWM+0x1aa>
		
		default:
		
			return TIMER_FAULT;
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	0f c0       	rjmp	.+30     	; 0x12ec <Configure_PWM+0x1c8>
		
	}
	
	Timer_Status Status = Set_Prescaler(Selected_Timer, Prescaler);
    12ce:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <Selected_Timer>
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	bc 01       	movw	r22, r24
    12d8:	82 2f       	mov	r24, r18
    12da:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Set_Prescaler>
    12de:	89 83       	std	Y+1, r24	; 0x01
	
	if(Status == TIMER_FAULT){
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	88 23       	and	r24, r24
    12e4:	11 f4       	brne	.+4      	; 0x12ea <Configure_PWM+0x1c6>
		return TIMER_FAULT;
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <Configure_PWM+0x1c8>
	}
	
	return TIMER_OK;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
	
}
    12ec:	26 96       	adiw	r28, 0x06	; 6
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <__divmodhi4>:
    1302:	97 fb       	bst	r25, 7
    1304:	07 2e       	mov	r0, r23
    1306:	16 f4       	brtc	.+4      	; 0x130c <__divmodhi4+0xa>
    1308:	00 94       	com	r0
    130a:	07 d0       	rcall	.+14     	; 0x131a <__divmodhi4_neg1>
    130c:	77 fd       	sbrc	r23, 7
    130e:	09 d0       	rcall	.+18     	; 0x1322 <__divmodhi4_neg2>
    1310:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__udivmodhi4>
    1314:	07 fc       	sbrc	r0, 7
    1316:	05 d0       	rcall	.+10     	; 0x1322 <__divmodhi4_neg2>
    1318:	3e f4       	brtc	.+14     	; 0x1328 <__divmodhi4_exit>

0000131a <__divmodhi4_neg1>:
    131a:	90 95       	com	r25
    131c:	81 95       	neg	r24
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	08 95       	ret

00001322 <__divmodhi4_neg2>:
    1322:	70 95       	com	r23
    1324:	61 95       	neg	r22
    1326:	7f 4f       	sbci	r23, 0xFF	; 255

00001328 <__divmodhi4_exit>:
    1328:	08 95       	ret

0000132a <__divmodsi4>:
    132a:	05 2e       	mov	r0, r21
    132c:	97 fb       	bst	r25, 7
    132e:	1e f4       	brtc	.+6      	; 0x1336 <__divmodsi4+0xc>
    1330:	00 94       	com	r0
    1332:	0e 94 ac 09 	call	0x1358	; 0x1358 <__negsi2>
    1336:	57 fd       	sbrc	r21, 7
    1338:	07 d0       	rcall	.+14     	; 0x1348 <__divmodsi4_neg2>
    133a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__udivmodsi4>
    133e:	07 fc       	sbrc	r0, 7
    1340:	03 d0       	rcall	.+6      	; 0x1348 <__divmodsi4_neg2>
    1342:	4e f4       	brtc	.+18     	; 0x1356 <__divmodsi4_exit>
    1344:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__negsi2>

00001348 <__divmodsi4_neg2>:
    1348:	50 95       	com	r21
    134a:	40 95       	com	r20
    134c:	30 95       	com	r19
    134e:	21 95       	neg	r18
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	4f 4f       	sbci	r20, 0xFF	; 255
    1354:	5f 4f       	sbci	r21, 0xFF	; 255

00001356 <__divmodsi4_exit>:
    1356:	08 95       	ret

00001358 <__negsi2>:
    1358:	90 95       	com	r25
    135a:	80 95       	com	r24
    135c:	70 95       	com	r23
    135e:	61 95       	neg	r22
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	8f 4f       	sbci	r24, 0xFF	; 255
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	08 95       	ret

00001368 <__tablejump2__>:
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	05 90       	lpm	r0, Z+
    136e:	f4 91       	lpm	r31, Z
    1370:	e0 2d       	mov	r30, r0
    1372:	09 94       	ijmp

00001374 <__muluhisi3>:
    1374:	0e 94 07 0a 	call	0x140e	; 0x140e <__umulhisi3>
    1378:	a5 9f       	mul	r26, r21
    137a:	90 0d       	add	r25, r0
    137c:	b4 9f       	mul	r27, r20
    137e:	90 0d       	add	r25, r0
    1380:	a4 9f       	mul	r26, r20
    1382:	80 0d       	add	r24, r0
    1384:	91 1d       	adc	r25, r1
    1386:	11 24       	eor	r1, r1
    1388:	08 95       	ret

0000138a <__adddi3_s8>:
    138a:	00 24       	eor	r0, r0
    138c:	a7 fd       	sbrc	r26, 7
    138e:	00 94       	com	r0
    1390:	2a 0f       	add	r18, r26
    1392:	30 1d       	adc	r19, r0
    1394:	40 1d       	adc	r20, r0
    1396:	50 1d       	adc	r21, r0
    1398:	60 1d       	adc	r22, r0
    139a:	70 1d       	adc	r23, r0
    139c:	80 1d       	adc	r24, r0
    139e:	90 1d       	adc	r25, r0
    13a0:	08 95       	ret

000013a2 <__udivmodhi4>:
    13a2:	aa 1b       	sub	r26, r26
    13a4:	bb 1b       	sub	r27, r27
    13a6:	51 e1       	ldi	r21, 0x11	; 17
    13a8:	07 c0       	rjmp	.+14     	; 0x13b8 <__udivmodhi4_ep>

000013aa <__udivmodhi4_loop>:
    13aa:	aa 1f       	adc	r26, r26
    13ac:	bb 1f       	adc	r27, r27
    13ae:	a6 17       	cp	r26, r22
    13b0:	b7 07       	cpc	r27, r23
    13b2:	10 f0       	brcs	.+4      	; 0x13b8 <__udivmodhi4_ep>
    13b4:	a6 1b       	sub	r26, r22
    13b6:	b7 0b       	sbc	r27, r23

000013b8 <__udivmodhi4_ep>:
    13b8:	88 1f       	adc	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	5a 95       	dec	r21
    13be:	a9 f7       	brne	.-22     	; 0x13aa <__udivmodhi4_loop>
    13c0:	80 95       	com	r24
    13c2:	90 95       	com	r25
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	08 95       	ret

000013ca <__udivmodsi4>:
    13ca:	a1 e2       	ldi	r26, 0x21	; 33
    13cc:	1a 2e       	mov	r1, r26
    13ce:	aa 1b       	sub	r26, r26
    13d0:	bb 1b       	sub	r27, r27
    13d2:	fd 01       	movw	r30, r26
    13d4:	0d c0       	rjmp	.+26     	; 0x13f0 <__udivmodsi4_ep>

000013d6 <__udivmodsi4_loop>:
    13d6:	aa 1f       	adc	r26, r26
    13d8:	bb 1f       	adc	r27, r27
    13da:	ee 1f       	adc	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	a2 17       	cp	r26, r18
    13e0:	b3 07       	cpc	r27, r19
    13e2:	e4 07       	cpc	r30, r20
    13e4:	f5 07       	cpc	r31, r21
    13e6:	20 f0       	brcs	.+8      	; 0x13f0 <__udivmodsi4_ep>
    13e8:	a2 1b       	sub	r26, r18
    13ea:	b3 0b       	sbc	r27, r19
    13ec:	e4 0b       	sbc	r30, r20
    13ee:	f5 0b       	sbc	r31, r21

000013f0 <__udivmodsi4_ep>:
    13f0:	66 1f       	adc	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	88 1f       	adc	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	1a 94       	dec	r1
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <__udivmodsi4_loop>
    13fc:	60 95       	com	r22
    13fe:	70 95       	com	r23
    1400:	80 95       	com	r24
    1402:	90 95       	com	r25
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	bd 01       	movw	r22, r26
    140a:	cf 01       	movw	r24, r30
    140c:	08 95       	ret

0000140e <__umulhisi3>:
    140e:	a2 9f       	mul	r26, r18
    1410:	b0 01       	movw	r22, r0
    1412:	b3 9f       	mul	r27, r19
    1414:	c0 01       	movw	r24, r0
    1416:	a3 9f       	mul	r26, r19
    1418:	70 0d       	add	r23, r0
    141a:	81 1d       	adc	r24, r1
    141c:	11 24       	eor	r1, r1
    141e:	91 1d       	adc	r25, r1
    1420:	b2 9f       	mul	r27, r18
    1422:	70 0d       	add	r23, r0
    1424:	81 1d       	adc	r24, r1
    1426:	11 24       	eor	r1, r1
    1428:	91 1d       	adc	r25, r1
    142a:	08 95       	ret

0000142c <_exit>:
    142c:	f8 94       	cli

0000142e <__stop_program>:
    142e:	ff cf       	rjmp	.-2      	; 0x142e <__stop_program>
