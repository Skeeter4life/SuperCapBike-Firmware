
SuperCapBike-Firmware-ATMEGA328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001e54  00001ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  0080011c  0080011c  00001f04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001f70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013a3  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c0  00000000  00000000  0000341b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa1  00000000  00000000  00003ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00004d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085f  00000000  00000000  00005148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000819  00000000  00000000  000059a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000061c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__vector_7>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__vector_11>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__vector_14>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_22>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_24>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	19 01       	movw	r2, r18
      6a:	23 01       	movw	r4, r6
      6c:	3e 01       	movw	r6, r28
      6e:	62 01       	movw	r12, r4
      70:	85 01       	movw	r16, r10
      72:	b1 01       	movw	r22, r2
      74:	d3 01       	movw	r26, r6
      76:	f8 01       	movw	r30, r16

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e4 e5       	ldi	r30, 0x54	; 84
      8c:	fe e1       	ldi	r31, 0x1E	; 30
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	ac 31       	cpi	r26, 0x1C	; 28
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	21 e0       	ldi	r18, 0x01	; 1
      9c:	ac e1       	ldi	r26, 0x1C	; 28
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a3 35       	cpi	r26, 0x53	; 83
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 05 02 	call	0x40a	; 0x40a <main>
      ae:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <EEPROM_Ready_ERROR>:

 EEPROM_Ready_ERROR:
	
	; Pop EEPROM_READ / EEPROM_WRITE return address

	POP r18
      b6:	2f 91       	pop	r18
	POP r19 
      b8:	3f 91       	pop	r19

	; Note: R18-R27, R30, R31 are call clobbered (no need to preserve their contents).

	LDI R24, 0xFF 	
      ba:	8f ef       	ldi	r24, 0xFF	; 255
	LDI R25, 0xFF ; Returns -1
      bc:	9f ef       	ldi	r25, 0xFF	; 255

	RET
      be:	08 95       	ret

000000c0 <Check_Address>:


Check_Address:

	LDI r18, ATMEGA328_Address_Mask ; Requested address exceeds EEPROM address space
      c0:	2c ef       	ldi	r18, 0xFC	; 252

	AND r18, Address_H
      c2:	29 23       	and	r18, r25

	CPI r18, 0
      c4:	20 30       	cpi	r18, 0x00	; 0

	BRNE EEPROM_Ready_ERROR
      c6:	b9 f7       	brne	.-18     	; 0xb6 <EEPROM_Ready_ERROR>

	RET
      c8:	08 95       	ret

000000ca <EEPROM_Wait>:

EEPROM_Wait:

	IN r18, EECR
      ca:	2f b3       	in	r18, 0x1f	; 31
	SBRC r18, 1
      cc:	21 fd       	sbrc	r18, 1
	RJMP EEPROM_Wait
      ce:	fd cf       	rjmp	.-6      	; 0xca <EEPROM_Wait>
	RET 
      d0:	08 95       	ret

000000d2 <Check_EEPROM_State>:

Check_EEPROM_State:

	SBIC EECR, 1 ; Ensure EEPROM is not being written to
      d2:	f9 99       	sbic	0x1f, 1	; 31
	
	RJMP EEPROM_Ready_ERROR
      d4:	f0 cf       	rjmp	.-32     	; 0xb6 <EEPROM_Ready_ERROR>

	IN r18, SPMCSR
      d6:	27 b7       	in	r18, 0x37	; 55

	SBRC r18, 0 ; Ensure flash is not being written to by the bootloader (not relevent but mind as well for the future)
      d8:	20 fd       	sbrc	r18, 0

	RJMP EEPROM_Ready_ERROR
      da:	ed cf       	rjmp	.-38     	; 0xb6 <EEPROM_Ready_ERROR>

	RJMP Check_Address
      dc:	f1 cf       	rjmp	.-30     	; 0xc0 <Check_Address>

000000de <EEPROM_Read>:

EEPROM_Read:
	
	RCALL Check_EEPROM_State
      de:	f9 df       	rcall	.-14     	; 0xd2 <Check_EEPROM_State>

	; valid EEPROM read request

	OUT EEARH, Address_H
      e0:	92 bd       	out	0x22, r25	; 34

	OUT EEARL, Address_L
      e2:	81 bd       	out	0x21, r24	; 33

	; SBI EECR, 3 ; Enable EEPROM interrupts

	CLI ; Disable global interrupt bit
      e4:	f8 94       	cli

	SBI EECR, 0 ; Set read bit
      e6:	f8 9a       	sbi	0x1f, 0	; 31

	; Reads the EEPROM...

	IN EEPROM_Data, EEDR
      e8:	60 b5       	in	r22, 0x20	; 32

	SEI ; Enable interrupts
      ea:	78 94       	sei

	MOV r24, EEPROM_Data 
      ec:	86 2f       	mov	r24, r22
	
	ldi r25, 0 ; return EEDR, EEPROM read successful
      ee:	90 e0       	ldi	r25, 0x00	; 0

	RET
      f0:	08 95       	ret

000000f2 <EEPROM_Write>:
			
EEPROM_Write:

	RCALL Check_EEPROM_State
      f2:	ef df       	rcall	.-34     	; 0xd2 <Check_EEPROM_State>

	; valid EEPROM write request

	OUT EEARH, Address_H
      f4:	92 bd       	out	0x22, r25	; 34

	OUT EEARL, Address_L
      f6:	81 bd       	out	0x21, r24	; 33

	OUT EEDR, EEPROM_Data
      f8:	60 bd       	out	0x20, r22	; 32

	; SBI EECR, 3 ; Enable EEPROM interrupts
	
	CLI 
      fa:	f8 94       	cli

	SBI EECR, 2; Set EEPROM master write enable
      fc:	fa 9a       	sbi	0x1f, 2	; 31

	SBI EECR, 1 ; Write to EEPROM
      fe:	f9 9a       	sbi	0x1f, 1	; 31
	
	; Writes to the EEPROM...

	SEI 
     100:	78 94       	sei

	RCALL EEPROM_Wait
     102:	e3 df       	rcall	.-58     	; 0xca <EEPROM_Wait>

	ldi r25, 1 ; return 1, EEPROM write successful
     104:	91 e0       	ldi	r25, 0x01	; 1

	RET
     106:	08 95       	ret

00000108 <__vector_22>:

#include "../Headers/EEPROM.h"

volatile bool EEPROM_Ready = false; // Not used

ISR(EE_READY_vect){ // Not used
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     110:	0f 92       	push	r0
     112:	11 24       	eor	r1, r1
     114:	8f 93       	push	r24
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
	
	EEPROM_Ready = true;
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
		
     124:	00 00       	nop
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	8f 91       	pop	r24
     12c:	0f 90       	pop	r0
     12e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     132:	0f 90       	pop	r0
     134:	1f 90       	pop	r1
     136:	18 95       	reti

00000138 <__vector_24>:

bool TWI_Ready = true;

#define I2C_Status (TWSR & 0xF8)

ISR(TWI_vect){
     138:	1f 92       	push	r1
     13a:	0f 92       	push	r0
     13c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     140:	0f 92       	push	r0
     142:	11 24       	eor	r1, r1
     144:	8f 93       	push	r24
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
	TWI_Ready = true;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <TWI_Ready>
}
     154:	00 00       	nop
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	8f 91       	pop	r24
     15c:	0f 90       	pop	r0
     15e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     162:	0f 90       	pop	r0
     164:	1f 90       	pop	r1
     166:	18 95       	reti

00000168 <Init_TWI>:

TWI_Status Init_TWI(TWI_Data* I2C_Data, uint8_t Device_Address, uint8_t Register_Address, TWI_Modes Mode, uint8_t Data){
     168:	0f 93       	push	r16
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	00 d0       	rcall	.+0      	; 0x170 <Init_TWI+0x8>
     170:	00 d0       	rcall	.+0      	; 0x172 <Init_TWI+0xa>
     172:	00 d0       	rcall	.+0      	; 0x174 <Init_TWI+0xc>
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	9a 83       	std	Y+2, r25	; 0x02
     17a:	89 83       	std	Y+1, r24	; 0x01
     17c:	6b 83       	std	Y+3, r22	; 0x03
     17e:	4c 83       	std	Y+4, r20	; 0x04
     180:	2d 83       	std	Y+5, r18	; 0x05
     182:	0e 83       	std	Y+6, r16	; 0x06
	
	if(I2C_Data == NULL){
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	9a 81       	ldd	r25, Y+2	; 0x02
     188:	89 2b       	or	r24, r25
     18a:	11 f4       	brne	.+4      	; 0x190 <Init_TWI+0x28>
		return TWI_FAULT;
     18c:	82 e0       	ldi	r24, 0x02	; 2
     18e:	1e c0       	rjmp	.+60     	; 0x1cc <Init_TWI+0x64>
	}
	
	I2C_Data->Device_Address = Device_Address;
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	2b 81       	ldd	r18, Y+3	; 0x03
     196:	fc 01       	movw	r30, r24
     198:	20 83       	st	Z, r18
	I2C_Data->Register_Address = Register_Address;
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	9a 81       	ldd	r25, Y+2	; 0x02
     19e:	2c 81       	ldd	r18, Y+4	; 0x04
     1a0:	fc 01       	movw	r30, r24
     1a2:	21 83       	std	Z+1, r18	; 0x01
	I2C_Data->Mode = Mode;
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	9a 81       	ldd	r25, Y+2	; 0x02
     1a8:	2d 81       	ldd	r18, Y+5	; 0x05
     1aa:	fc 01       	movw	r30, r24
     1ac:	22 83       	std	Z+2, r18	; 0x02
	I2C_Data->Data = Data;
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	9a 81       	ldd	r25, Y+2	; 0x02
     1b2:	2e 81       	ldd	r18, Y+6	; 0x06
     1b4:	fc 01       	movw	r30, r24
     1b6:	23 83       	std	Z+3, r18	; 0x03
		
	TWSR = 0x00;
     1b8:	89 eb       	ldi	r24, 0xB9	; 185
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	fc 01       	movw	r30, r24
     1be:	10 82       	st	Z, r1
	TWBR = 72;
     1c0:	88 eb       	ldi	r24, 0xB8	; 184
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	28 e4       	ldi	r18, 0x48	; 72
     1c6:	fc 01       	movw	r30, r24
     1c8:	20 83       	st	Z, r18
	
	return TWI_OK;
     1ca:	80 e0       	ldi	r24, 0x00	; 0
	
}
     1cc:	26 96       	adiw	r28, 0x06	; 6
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	0f 91       	pop	r16
     1de:	08 95       	ret

000001e0 <TWI_Handler>:

TWI_Status TWI_Handler(TWI_Data* I2C_Data){
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <TWI_Handler+0x6>
     1e6:	1f 92       	push	r1
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	9b 83       	std	Y+3, r25	; 0x03
     1ee:	8a 83       	std	Y+2, r24	; 0x02
	
	if(!TWI_Ready){
     1f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TWI_Ready>
     1f4:	88 23       	and	r24, r24
     1f6:	11 f4       	brne	.+4      	; 0x1fc <TWI_Handler+0x1c>
		return TWI_OK;
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	01 c1       	rjmp	.+514    	; 0x3fe <TWI_Handler+0x21e>
	}
	
	TWI_Ready = false;
     1fc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <TWI_Ready>
	
	uint8_t Transmit_Code = (1 << TWINT) | (1 << TWEN) | (1 << TWIE); // Clear the interrupt flag, enable TWI and TWI interrupts
     200:	85 e8       	ldi	r24, 0x85	; 133
     202:	89 83       	std	Y+1, r24	; 0x01
	
	switch(I2C_State){
     204:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <I2C_State>
     208:	88 2f       	mov	r24, r24
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	09 2e       	mov	r0, r25
     20e:	00 0c       	add	r0, r0
     210:	aa 0b       	sbc	r26, r26
     212:	bb 0b       	sbc	r27, r27
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	27 e0       	ldi	r18, 0x07	; 7
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	84 1b       	sub	r24, r20
     21e:	95 0b       	sbc	r25, r21
     220:	28 17       	cp	r18, r24
     222:	39 07       	cpc	r19, r25
     224:	08 f4       	brcc	.+2      	; 0x228 <TWI_Handler+0x48>
     226:	ea c0       	rjmp	.+468    	; 0x3fc <TWI_Handler+0x21c>
     228:	8c 5c       	subi	r24, 0xCC	; 204
     22a:	9f 4f       	sbci	r25, 0xFF	; 255
     22c:	fc 01       	movw	r30, r24
     22e:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__tablejump2__>
		
		case TWI_STATE_START:
		
			I2C_State = SEND_ADDRESS_WRITE;
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
			
			TWCR = Transmit_Code | (1 << TWSTA); 
     238:	8c eb       	ldi	r24, 0xBC	; 188
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	29 81       	ldd	r18, Y+1	; 0x01
     23e:	20 62       	ori	r18, 0x20	; 32
     240:	fc 01       	movw	r30, r24
     242:	20 83       	st	Z, r18
			
			break;
     244:	db c0       	rjmp	.+438    	; 0x3fc <TWI_Handler+0x21c>
			
			
		case TWI_STATE_REPEATED_START:	
		
			switch(I2C_Status){
     246:	89 eb       	ldi	r24, 0xB9	; 185
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	fc 01       	movw	r30, r24
     24c:	80 81       	ld	r24, Z
     24e:	88 2f       	mov	r24, r24
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	88 7f       	andi	r24, 0xF8	; 248
     254:	99 27       	eor	r25, r25
     256:	04 97       	sbiw	r24, 0x04	; 4
     258:	61 f4       	brne	.+24     	; 0x272 <TWI_Handler+0x92>
				
				case ADDRESSING_REGISTER:
				
					I2C_State = SEND_ADDRESS_READ;
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
					
					break;
     260:	00 00       	nop
				
					return TWI_FAULT;
				
			}
		
			TWCR = Transmit_Code | (1 << TWSTA);
     262:	8c eb       	ldi	r24, 0xBC	; 188
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	29 81       	ldd	r18, Y+1	; 0x01
     268:	20 62       	ori	r18, 0x20	; 32
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
		
			return TWI_OK;
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	c6 c0       	rjmp	.+396    	; 0x3fe <TWI_Handler+0x21e>
					
					break;
				
				default:
				
					I2C_State = STOP;
     272:	87 e0       	ldi	r24, 0x07	; 7
     274:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
				
					return TWI_FAULT;
     278:	82 e0       	ldi	r24, 0x02	; 2
     27a:	c1 c0       	rjmp	.+386    	; 0x3fe <TWI_Handler+0x21e>
		
			return TWI_OK;
				
		case SEND_ADDRESS_READ:
		
			switch(I2C_Status){
     27c:	89 eb       	ldi	r24, 0xB9	; 185
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	fc 01       	movw	r30, r24
     282:	80 81       	ld	r24, Z
     284:	88 2f       	mov	r24, r24
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	88 7f       	andi	r24, 0xF8	; 248
     28a:	99 27       	eor	r25, r25
     28c:	40 97       	sbiw	r24, 0x10	; 16
     28e:	a9 f4       	brne	.+42     	; 0x2ba <TWI_Handler+0xda>
				
				case REPEATED_START:
				
					I2C_State = READING;
     290:	86 e0       	ldi	r24, 0x06	; 6
     292:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
					break;
     296:	00 00       	nop
					I2C_State = STOP;
					return TWI_FAULT;
				
			}
			
			TWDR = (I2C_Data->Device_Address << 1) + 1; 
     298:	8b eb       	ldi	r24, 0xBB	; 187
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	2a 81       	ldd	r18, Y+2	; 0x02
     29e:	3b 81       	ldd	r19, Y+3	; 0x03
     2a0:	f9 01       	movw	r30, r18
     2a2:	20 81       	ld	r18, Z
     2a4:	22 0f       	add	r18, r18
     2a6:	2f 5f       	subi	r18, 0xFF	; 255
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     2ac:	8c eb       	ldi	r24, 0xBC	; 188
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	29 81       	ldd	r18, Y+1	; 0x01
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
			return TWI_OK;
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	a2 c0       	rjmp	.+324    	; 0x3fe <TWI_Handler+0x21e>
					break;
			
				
				default:
				
					I2C_State = STOP;
     2ba:	87 e0       	ldi	r24, 0x07	; 7
     2bc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
					return TWI_FAULT;
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	9d c0       	rjmp	.+314    	; 0x3fe <TWI_Handler+0x21e>
			TWCR = Transmit_Code;
			return TWI_OK;
		
		case SEND_ADDRESS_WRITE:
			
			switch(I2C_Status){
     2c4:	89 eb       	ldi	r24, 0xB9	; 185
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	88 2f       	mov	r24, r24
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	88 7f       	andi	r24, 0xF8	; 248
     2d2:	99 27       	eor	r25, r25
     2d4:	08 97       	sbiw	r24, 0x08	; 8
     2d6:	a1 f4       	brne	.+40     	; 0x300 <TWI_Handler+0x120>
				
				case START:
				
					I2C_State = ADDRESSING_REGISTER;
     2d8:	84 e0       	ldi	r24, 0x04	; 4
     2da:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
					break;
     2de:	00 00       	nop
					I2C_State = STOP;
					return TWI_FAULT;
				
			}
						
			TWDR = (I2C_Data->Device_Address << 1);
     2e0:	8b eb       	ldi	r24, 0xBB	; 187
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	2a 81       	ldd	r18, Y+2	; 0x02
     2e6:	3b 81       	ldd	r19, Y+3	; 0x03
     2e8:	f9 01       	movw	r30, r18
     2ea:	20 81       	ld	r18, Z
     2ec:	22 0f       	add	r18, r18
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     2f2:	8c eb       	ldi	r24, 0xBC	; 188
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	29 81       	ldd	r18, Y+1	; 0x01
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
			return TWI_OK;
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	7f c0       	rjmp	.+254    	; 0x3fe <TWI_Handler+0x21e>
					I2C_State = ADDRESSING_REGISTER;
					break;
					
				default:
				
					I2C_State = STOP;
     300:	87 e0       	ldi	r24, 0x07	; 7
     302:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
					return TWI_FAULT;
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	7a c0       	rjmp	.+244    	; 0x3fe <TWI_Handler+0x21e>
			return TWI_OK;
			  
				
		case ADDRESSING_REGISTER:

			switch(I2C_Status){
     30a:	89 eb       	ldi	r24, 0xB9	; 185
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	fc 01       	movw	r30, r24
     310:	80 81       	ld	r24, Z
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	88 7f       	andi	r24, 0xF8	; 248
     318:	99 27       	eor	r25, r25
     31a:	48 97       	sbiw	r24, 0x18	; 24
     31c:	71 f4       	brne	.+28     	; 0x33a <TWI_Handler+0x15a>

				case WRITE_ADDRESS_ACK: // Same code for sending device address and register address

					if (I2C_Data->Mode == READING_MODE) {
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	9b 81       	ldd	r25, Y+3	; 0x03
     322:	fc 01       	movw	r30, r24
     324:	82 81       	ldd	r24, Z+2	; 0x02
     326:	88 23       	and	r24, r24
     328:	21 f4       	brne	.+8      	; 0x332 <TWI_Handler+0x152>
					
						I2C_State = REPEATED_START;
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
					
						I2C_State = WRITING;
					
					}
					
					break;
     330:	09 c0       	rjmp	.+18     	; 0x344 <TWI_Handler+0x164>
					
						I2C_State = REPEATED_START;
					
					}else{
					
						I2C_State = WRITING;
     332:	85 e0       	ldi	r24, 0x05	; 5
     334:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
					
					}
					
					break;
     338:	05 c0       	rjmp	.+10     	; 0x344 <TWI_Handler+0x164>

				default:
	
					I2C_State = STOP;
     33a:	87 e0       	ldi	r24, 0x07	; 7
     33c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
					
					return TWI_FAULT;
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	5d c0       	rjmp	.+186    	; 0x3fe <TWI_Handler+0x21e>
			}
		
			TWDR = I2C_Data->Register_Address;
     344:	8b eb       	ldi	r24, 0xBB	; 187
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	2a 81       	ldd	r18, Y+2	; 0x02
     34a:	3b 81       	ldd	r19, Y+3	; 0x03
     34c:	f9 01       	movw	r30, r18
     34e:	21 81       	ldd	r18, Z+1	; 0x01
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     354:	8c eb       	ldi	r24, 0xBC	; 188
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	29 81       	ldd	r18, Y+1	; 0x01
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
			
			return TWI_OK;
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	4e c0       	rjmp	.+156    	; 0x3fe <TWI_Handler+0x21e>

		
		case WRITING:
			
			switch(I2C_Status){
     362:	89 eb       	ldi	r24, 0xB9	; 185
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	fc 01       	movw	r30, r24
     368:	80 81       	ld	r24, Z
     36a:	88 2f       	mov	r24, r24
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	88 7f       	andi	r24, 0xF8	; 248
     370:	99 27       	eor	r25, r25
     372:	88 97       	sbiw	r24, 0x28	; 40
     374:	99 f4       	brne	.+38     	; 0x39c <TWI_Handler+0x1bc>
				
				case WRITE_DATA_ACK: // Same code for sending device address and register address
				
					I2C_State = STOP;
     376:	87 e0       	ldi	r24, 0x07	; 7
     378:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
					break;
     37c:	00 00       	nop
					
					return TWI_FAULT;
				
			}
			
			TWDR = I2C_Data->Data;
     37e:	8b eb       	ldi	r24, 0xBB	; 187
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	2a 81       	ldd	r18, Y+2	; 0x02
     384:	3b 81       	ldd	r19, Y+3	; 0x03
     386:	f9 01       	movw	r30, r18
     388:	23 81       	ldd	r18, Z+3	; 0x03
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
			TWCR = Transmit_Code;
     38e:	8c eb       	ldi	r24, 0xBC	; 188
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	29 81       	ldd	r18, Y+1	; 0x01
     394:	fc 01       	movw	r30, r24
     396:	20 83       	st	Z, r18
			
			return TWI_OK;
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	31 c0       	rjmp	.+98     	; 0x3fe <TWI_Handler+0x21e>
					I2C_State = STOP;
					break;
					
				default:
				
					I2C_State = STOP;
     39c:	87 e0       	ldi	r24, 0x07	; 7
     39e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>
					
					return TWI_FAULT;
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	2c c0       	rjmp	.+88     	; 0x3fe <TWI_Handler+0x21e>
			
			return TWI_OK;
		
		case READING:
						
			switch(I2C_Status){
     3a6:	89 eb       	ldi	r24, 0xB9	; 185
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	fc 01       	movw	r30, r24
     3ac:	80 81       	ld	r24, Z
     3ae:	88 2f       	mov	r24, r24
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	88 7f       	andi	r24, 0xF8	; 248
     3b4:	99 27       	eor	r25, r25
     3b6:	80 34       	cpi	r24, 0x40	; 64
     3b8:	91 05       	cpc	r25, r1
     3ba:	21 f0       	breq	.+8      	; 0x3c4 <TWI_Handler+0x1e4>
     3bc:	88 35       	cpi	r24, 0x58	; 88
     3be:	91 05       	cpc	r25, r1
     3c0:	41 f0       	breq	.+16     	; 0x3d2 <TWI_Handler+0x1f2>
     3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <TWI_Handler+0x206>
				
				case READ_ADDRESS_ACK:
				
					TWCR = Transmit_Code; // Ready to receive the 1 byte
     3c4:	8c eb       	ldi	r24, 0xBC	; 188
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	29 81       	ldd	r18, Y+1	; 0x01
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
					
					return TWI_OK;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	16 c0       	rjmp	.+44     	; 0x3fe <TWI_Handler+0x21e>
					
				case BYTE_RECEIVED:
				
					I2C_Data->Data = TWDR;
     3d2:	8b eb       	ldi	r24, 0xBB	; 187
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 81       	ld	r18, Z
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	9b 81       	ldd	r25, Y+3	; 0x03
     3de:	fc 01       	movw	r30, r24
     3e0:	23 83       	std	Z+3, r18	; 0x03
					
					return TWI_OK;
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0c c0       	rjmp	.+24     	; 0x3fe <TWI_Handler+0x21e>

				default:
				
					I2C_State = STOP;
     3e6:	87 e0       	ldi	r24, 0x07	; 7
     3e8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <I2C_State>

					return TWI_FAULT;
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <TWI_Handler+0x21e>
			
			break; // Just for correctness
			
		case STOP:
		
			TWCR = Transmit_Code | (1 << TWSTO);
     3f0:	8c eb       	ldi	r24, 0xBC	; 188
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	29 81       	ldd	r18, Y+1	; 0x01
     3f6:	20 61       	ori	r18, 0x10	; 16
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18

	}
	
	return TWI_OK; 
     3fc:	80 e0       	ldi	r24, 0x00	; 0
	
}
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <main>:

const uint32_t F_CLK = 16000000;
const uint32_t TC_CLK = 16000000; // TC_CLK can be asynchronous to F_CLK.

int main(void)
{
     40a:	0f 93       	push	r16
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	6e 97       	sbiw	r28, 0x1e	; 30
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
	sei();
     420:	78 94       	sei
	
	DDRB |= (1 << DDB0);
     422:	84 e2       	ldi	r24, 0x24	; 36
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	24 e2       	ldi	r18, 0x24	; 36
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	f9 01       	movw	r30, r18
     42c:	20 81       	ld	r18, Z
     42e:	21 60       	ori	r18, 0x01	; 1
     430:	fc 01       	movw	r30, r24
     432:	20 83       	st	Z, r18
	DDRB |= (1 << DDB1);
     434:	84 e2       	ldi	r24, 0x24	; 36
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	24 e2       	ldi	r18, 0x24	; 36
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	f9 01       	movw	r30, r18
     43e:	20 81       	ld	r18, Z
     440:	22 60       	ori	r18, 0x02	; 2
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18
	DDRD |= (1 << DDD7);
     446:	8a e2       	ldi	r24, 0x2A	; 42
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	2a e2       	ldi	r18, 0x2A	; 42
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	f9 01       	movw	r30, r18
     450:	20 81       	ld	r18, Z
     452:	20 68       	ori	r18, 0x80	; 128
     454:	fc 01       	movw	r30, r24
     456:	20 83       	st	Z, r18
	DDRD |= (1 << DDD6);
     458:	8a e2       	ldi	r24, 0x2A	; 42
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	2a e2       	ldi	r18, 0x2A	; 42
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	f9 01       	movw	r30, r18
     462:	20 81       	ld	r18, Z
     464:	20 64       	ori	r18, 0x40	; 64
     466:	fc 01       	movw	r30, r24
     468:	20 83       	st	Z, r18
	
	//bool Precisie_Mode = true;
	
	Timers Timer1 = _8_bit2;
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	8a 83       	std	Y+2, r24	; 0x02
	
	bool Timer1_Set = Configure_Timer_Tick(100, u_MiliSeconds, Timer1);
     46e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u_MiliSeconds>
     472:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <u_MiliSeconds+0x1>
     476:	cc 01       	movw	r24, r24
     478:	a0 e0       	ldi	r26, 0x00	; 0
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	2a 81       	ldd	r18, Y+2	; 0x02
     47e:	ac 01       	movw	r20, r24
     480:	bd 01       	movw	r22, r26
     482:	84 e6       	ldi	r24, 0x64	; 100
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 46 07 	call	0xe8c	; 0xe8c <Configure_Timer_Tick>
     48a:	8b 83       	std	Y+3, r24	; 0x03
	
	Timers Timer2 = _8_bit1;
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	8c 83       	std	Y+4, r24	; 0x04
	
	bool Timer2_Set = Configure_Timer_Tick(1000, u_MicroSeconds, Timer2);
     490:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u_MicroSeconds>
     494:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <u_MicroSeconds+0x1>
     498:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <u_MicroSeconds+0x2>
     49c:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <u_MicroSeconds+0x3>
     4a0:	2c 81       	ldd	r18, Y+4	; 0x04
     4a2:	ac 01       	movw	r20, r24
     4a4:	bd 01       	movw	r22, r26
     4a6:	88 ee       	ldi	r24, 0xE8	; 232
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	0e 94 46 07 	call	0xe8c	; 0xe8c <Configure_Timer_Tick>
     4ae:	8d 83       	std	Y+5, r24	; 0x05
	
	Timers Timer3 = _16_bit;
     4b0:	1e 82       	std	Y+6, r1	; 0x06
	
	bool Timer3_Set = Configure_Timer_Tick(3, u_Seconds, Timer3);
     4b2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <u_Seconds>
     4b6:	88 2f       	mov	r24, r24
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	a0 e0       	ldi	r26, 0x00	; 0
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	2e 81       	ldd	r18, Y+6	; 0x06
     4c0:	ac 01       	movw	r20, r24
     4c2:	bd 01       	movw	r22, r26
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 46 07 	call	0xe8c	; 0xe8c <Configure_Timer_Tick>
     4cc:	8f 83       	std	Y+7, r24	; 0x07
	
	if(!Timer1_Set || !Timer2_Set || !Timer3_Set){
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	88 23       	and	r24, r24
     4d2:	31 f0       	breq	.+12     	; 0x4e0 <main+0xd6>
     4d4:	8d 81       	ldd	r24, Y+5	; 0x05
     4d6:	88 23       	and	r24, r24
     4d8:	19 f0       	breq	.+6      	; 0x4e0 <main+0xd6>
     4da:	8f 81       	ldd	r24, Y+7	; 0x07
     4dc:	88 23       	and	r24, r24
     4de:	29 f4       	brne	.+10     	; 0x4ea <main+0xe0>
		PORTB = (1 << PORTB1);
     4e0:	85 e2       	ldi	r24, 0x25	; 37
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	22 e0       	ldi	r18, 0x02	; 2
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
	}
	
	int16_t W1 = EEPROM_Write(0x0000, 0x1C);
     4ea:	6c e1       	ldi	r22, 0x1C	; 28
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 79 00 	call	0xf2	; 0xf2 <EEPROM_Write>
     4f4:	99 87       	std	Y+9, r25	; 0x09
     4f6:	88 87       	std	Y+8, r24	; 0x08
	
	int16_t R1 = EEPROM_Read(0x0000);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 6f 00 	call	0xde	; 0xde <EEPROM_Read>
     500:	9b 87       	std	Y+11, r25	; 0x0b
     502:	8a 87       	std	Y+10, r24	; 0x0a
	
	int16_t W2 = EEPROM_Write(0x0001, 0x1D);
     504:	6d e1       	ldi	r22, 0x1D	; 29
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 79 00 	call	0xf2	; 0xf2 <EEPROM_Write>
     50e:	9d 87       	std	Y+13, r25	; 0x0d
     510:	8c 87       	std	Y+12, r24	; 0x0c
		
	if(!W1 || !W2 || !R1){
     512:	88 85       	ldd	r24, Y+8	; 0x08
     514:	99 85       	ldd	r25, Y+9	; 0x09
     516:	89 2b       	or	r24, r25
     518:	41 f0       	breq	.+16     	; 0x52a <main+0x120>
     51a:	8c 85       	ldd	r24, Y+12	; 0x0c
     51c:	9d 85       	ldd	r25, Y+13	; 0x0d
     51e:	89 2b       	or	r24, r25
     520:	21 f0       	breq	.+8      	; 0x52a <main+0x120>
     522:	8a 85       	ldd	r24, Y+10	; 0x0a
     524:	9b 85       	ldd	r25, Y+11	; 0x0b
     526:	89 2b       	or	r24, r25
     528:	29 f4       	brne	.+10     	; 0x534 <main+0x12a>
		PORTB = (1 << PORTB1);
     52a:	85 e2       	ldi	r24, 0x25	; 37
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	22 e0       	ldi	r18, 0x02	; 2
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
	}
	
	Ring_Buffer Buffer1;
	uint8_t Received_Data = 0;
     534:	19 8e       	std	Y+25, r1	; 0x19
	
	Init_Buffer(&Buffer1, 10, 2);
     536:	ce 01       	movw	r24, r28
     538:	0e 96       	adiw	r24, 0x0e	; 14
     53a:	42 e0       	ldi	r20, 0x02	; 2
     53c:	6a e0       	ldi	r22, 0x0A	; 10
     53e:	0e 94 cb 02 	call	0x596	; 0x596 <Init_Buffer>
	
	for(uint8_t i = 0; i <= 30; i++){
     542:	19 82       	std	Y+1, r1	; 0x01
     544:	10 c0       	rjmp	.+32     	; 0x566 <main+0x15c>
		Write_to_Buffer(&Buffer1, i);
     546:	ce 01       	movw	r24, r28
     548:	0e 96       	adiw	r24, 0x0e	; 14
     54a:	69 81       	ldd	r22, Y+1	; 0x01
     54c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <Write_to_Buffer>
		Read_from_Buffer(&Buffer1, &Received_Data);
     550:	9e 01       	movw	r18, r28
     552:	27 5e       	subi	r18, 0xE7	; 231
     554:	3f 4f       	sbci	r19, 0xFF	; 255
     556:	ce 01       	movw	r24, r28
     558:	0e 96       	adiw	r24, 0x0e	; 14
     55a:	b9 01       	movw	r22, r18
     55c:	0e 94 13 04 	call	0x826	; 0x826 <Read_from_Buffer>
	Ring_Buffer Buffer1;
	uint8_t Received_Data = 0;
	
	Init_Buffer(&Buffer1, 10, 2);
	
	for(uint8_t i = 0; i <= 30; i++){
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	8f 5f       	subi	r24, 0xFF	; 255
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	8f 31       	cpi	r24, 0x1F	; 31
     56a:	68 f3       	brcs	.-38     	; 0x546 <main+0x13c>
		Write_to_Buffer(&Buffer1, i);
		Read_from_Buffer(&Buffer1, &Received_Data);
	}
	
	Free_Buffer(&Buffer1); // Buffer functionality Verified with debugger. More rigorous testing soon.
     56c:	ce 01       	movw	r24, r28
     56e:	0e 96       	adiw	r24, 0x0e	; 14
     570:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Free_Buffer>
	
	TWI_Data MCP23017;
	
	Init_TWI(&MCP23017, MCP23017_Address, 0x00, WRITING_MODE, 0b10101010);
     574:	ce 01       	movw	r24, r28
     576:	4a 96       	adiw	r24, 0x1a	; 26
     578:	0a ea       	ldi	r16, 0xAA	; 170
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	60 e2       	ldi	r22, 0x20	; 32
     580:	0e 94 b4 00 	call	0x168	; 0x168 <Init_TWI>
	
	while (1 == true){
		
		if(TWI_Ready){
     584:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TWI_Ready>
     588:	88 23       	and	r24, r24
     58a:	e1 f3       	breq	.-8      	; 0x584 <main+0x17a>
			
			TWI_Handler(&MCP23017);
     58c:	ce 01       	movw	r24, r28
     58e:	4a 96       	adiw	r24, 0x1a	; 26
     590:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TWI_Handler>
			
		}

	}
     594:	f7 cf       	rjmp	.-18     	; 0x584 <main+0x17a>

00000596 <Init_Buffer>:
 */ 

#include "../Headers/Includes.h"
#include "../Headers/Dynamic_Ring_Buffer.h"

Ring_Buffer_Status Init_Buffer(Ring_Buffer* Ring_Buffer, uint8_t Size, uint8_t Increment){
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	00 d0       	rcall	.+0      	; 0x59c <Init_Buffer+0x6>
     59c:	00 d0       	rcall	.+0      	; 0x59e <Init_Buffer+0x8>
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <Init_Buffer+0xa>
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	9c 83       	std	Y+4, r25	; 0x04
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	6d 83       	std	Y+5, r22	; 0x05
     5aa:	4e 83       	std	Y+6, r20	; 0x06
	
	if(Size == 0 
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	88 23       	and	r24, r24
     5b0:	19 f0       	breq	.+6      	; 0x5b8 <Init_Buffer+0x22>
	|| Increment == 0){
     5b2:	8e 81       	ldd	r24, Y+6	; 0x06
     5b4:	88 23       	and	r24, r24
     5b6:	11 f4       	brne	.+4      	; 0x5bc <Init_Buffer+0x26>
		return BUFFER_FAULT;
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	3a c0       	rjmp	.+116    	; 0x630 <Init_Buffer+0x9a>
	}
	
	uint8_t* p = (uint8_t*)malloc(Size);
     5bc:	8d 81       	ldd	r24, Y+5	; 0x05
     5be:	88 2f       	mov	r24, r24
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <malloc>
     5c6:	9a 83       	std	Y+2, r25	; 0x02
     5c8:	89 83       	std	Y+1, r24	; 0x01
	
	if(p == NULL){
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	9a 81       	ldd	r25, Y+2	; 0x02
     5ce:	89 2b       	or	r24, r25
     5d0:	11 f4       	brne	.+4      	; 0x5d6 <Init_Buffer+0x40>
		return BUFFER_FAULT;
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	2d c0       	rjmp	.+90     	; 0x630 <Init_Buffer+0x9a>
	}
	
	Ring_Buffer->Buffer = p;
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	9c 81       	ldd	r25, Y+4	; 0x04
     5da:	29 81       	ldd	r18, Y+1	; 0x01
     5dc:	3a 81       	ldd	r19, Y+2	; 0x02
     5de:	fc 01       	movw	r30, r24
     5e0:	31 83       	std	Z+1, r19	; 0x01
     5e2:	20 83       	st	Z, r18
		
	Ring_Buffer->Read_Index = 0;
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	9c 81       	ldd	r25, Y+4	; 0x04
     5e8:	fc 01       	movw	r30, r24
     5ea:	12 82       	std	Z+2, r1	; 0x02
	Ring_Buffer->Write_Index = 0;
     5ec:	8b 81       	ldd	r24, Y+3	; 0x03
     5ee:	9c 81       	ldd	r25, Y+4	; 0x04
     5f0:	fc 01       	movw	r30, r24
     5f2:	13 82       	std	Z+3, r1	; 0x03
	
	Ring_Buffer->Size = Size;
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	28 2f       	mov	r18, r24
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	9c 81       	ldd	r25, Y+4	; 0x04
     5fe:	fc 01       	movw	r30, r24
     600:	35 83       	std	Z+5, r19	; 0x05
     602:	24 83       	std	Z+4, r18	; 0x04
	Ring_Buffer->Increment = Increment;
     604:	8b 81       	ldd	r24, Y+3	; 0x03
     606:	9c 81       	ldd	r25, Y+4	; 0x04
     608:	2e 81       	ldd	r18, Y+6	; 0x06
     60a:	fc 01       	movw	r30, r24
     60c:	26 83       	std	Z+6, r18	; 0x06
	
	Ring_Buffer->Adjusted_Size = 0;
     60e:	8b 81       	ldd	r24, Y+3	; 0x03
     610:	9c 81       	ldd	r25, Y+4	; 0x04
     612:	fc 01       	movw	r30, r24
     614:	17 82       	std	Z+7, r1	; 0x07
	Ring_Buffer->Wrap_Index = 0;
     616:	8b 81       	ldd	r24, Y+3	; 0x03
     618:	9c 81       	ldd	r25, Y+4	; 0x04
     61a:	fc 01       	movw	r30, r24
     61c:	10 86       	std	Z+8, r1	; 0x08
	Ring_Buffer->Overflow_Index = 0;
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	9c 81       	ldd	r25, Y+4	; 0x04
     622:	fc 01       	movw	r30, r24
     624:	11 86       	std	Z+9, r1	; 0x09
	
	Ring_Buffer->Indexing_State = NONE;
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	9c 81       	ldd	r25, Y+4	; 0x04
     62a:	fc 01       	movw	r30, r24
     62c:	12 86       	std	Z+10, r1	; 0x0a

	return BUFFER_OK;
     62e:	80 e0       	ldi	r24, 0x00	; 0
	
}
     630:	26 96       	adiw	r28, 0x06	; 6
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <Increase_Buffer>:

Ring_Buffer_Status Increase_Buffer(Ring_Buffer* Ring_Buffer){
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	00 d0       	rcall	.+0      	; 0x648 <Increase_Buffer+0x6>
     648:	00 d0       	rcall	.+0      	; 0x64a <Increase_Buffer+0x8>
     64a:	00 d0       	rcall	.+0      	; 0x64c <Increase_Buffer+0xa>
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	9e 83       	std	Y+6, r25	; 0x06
     652:	8d 83       	std	Y+5, r24	; 0x05
	
	if(Ring_Buffer == NULL){
     654:	8d 81       	ldd	r24, Y+5	; 0x05
     656:	9e 81       	ldd	r25, Y+6	; 0x06
     658:	89 2b       	or	r24, r25
     65a:	11 f4       	brne	.+4      	; 0x660 <Increase_Buffer+0x1e>
		return BUFFER_FAULT;
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	3a c0       	rjmp	.+116    	; 0x6d4 <Increase_Buffer+0x92>
	}
	
	uint8_t RB_Size = Ring_Buffer->Size;
     660:	8d 81       	ldd	r24, Y+5	; 0x05
     662:	9e 81       	ldd	r25, Y+6	; 0x06
     664:	fc 01       	movw	r30, r24
     666:	84 81       	ldd	r24, Z+4	; 0x04
     668:	95 81       	ldd	r25, Z+5	; 0x05
     66a:	89 83       	std	Y+1, r24	; 0x01
	uint8_t RB_Increment = Ring_Buffer->Increment;
     66c:	8d 81       	ldd	r24, Y+5	; 0x05
     66e:	9e 81       	ldd	r25, Y+6	; 0x06
     670:	fc 01       	movw	r30, r24
     672:	86 81       	ldd	r24, Z+6	; 0x06
     674:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t* p = (uint8_t*)realloc(Ring_Buffer->Buffer, RB_Size + RB_Increment); // Opted for safe re-allocation
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	28 2f       	mov	r18, r24
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	8a 81       	ldd	r24, Y+2	; 0x02
     67e:	88 2f       	mov	r24, r24
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	82 0f       	add	r24, r18
     684:	93 1f       	adc	r25, r19
     686:	9c 01       	movw	r18, r24
     688:	8d 81       	ldd	r24, Y+5	; 0x05
     68a:	9e 81       	ldd	r25, Y+6	; 0x06
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	91 81       	ldd	r25, Z+1	; 0x01
     692:	b9 01       	movw	r22, r18
     694:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <realloc>
     698:	9c 83       	std	Y+4, r25	; 0x04
     69a:	8b 83       	std	Y+3, r24	; 0x03
	
	if(p == NULL){
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	89 2b       	or	r24, r25
     6a2:	11 f4       	brne	.+4      	; 0x6a8 <Increase_Buffer+0x66>
		return BUFFER_FAULT;
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	16 c0       	rjmp	.+44     	; 0x6d4 <Increase_Buffer+0x92>
	}
	
	Ring_Buffer->Buffer = p;
     6a8:	8d 81       	ldd	r24, Y+5	; 0x05
     6aa:	9e 81       	ldd	r25, Y+6	; 0x06
     6ac:	2b 81       	ldd	r18, Y+3	; 0x03
     6ae:	3c 81       	ldd	r19, Y+4	; 0x04
     6b0:	fc 01       	movw	r30, r24
     6b2:	31 83       	std	Z+1, r19	; 0x01
     6b4:	20 83       	st	Z, r18
	Ring_Buffer->Size = RB_Size + RB_Increment;
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	28 2f       	mov	r18, r24
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	8a 81       	ldd	r24, Y+2	; 0x02
     6be:	88 2f       	mov	r24, r24
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	82 0f       	add	r24, r18
     6c4:	93 1f       	adc	r25, r19
     6c6:	9c 01       	movw	r18, r24
     6c8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ca:	9e 81       	ldd	r25, Y+6	; 0x06
     6cc:	fc 01       	movw	r30, r24
     6ce:	35 83       	std	Z+5, r19	; 0x05
     6d0:	24 83       	std	Z+4, r18	; 0x04
	
	return BUFFER_OK;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
	
}
     6d4:	26 96       	adiw	r28, 0x06	; 6
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <Write_to_Buffer>:

Ring_Buffer_Status Write_to_Buffer(Ring_Buffer* Ring_Buffer, uint8_t Data){
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <Write_to_Buffer+0x6>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <Write_to_Buffer+0x8>
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <Write_to_Buffer+0xa>
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	9d 83       	std	Y+5, r25	; 0x05
     6f6:	8c 83       	std	Y+4, r24	; 0x04
     6f8:	6e 83       	std	Y+6, r22	; 0x06
	
	uint8_t RB_Write_Index = Ring_Buffer->Write_Index;
     6fa:	8c 81       	ldd	r24, Y+4	; 0x04
     6fc:	9d 81       	ldd	r25, Y+5	; 0x05
     6fe:	fc 01       	movw	r30, r24
     700:	83 81       	ldd	r24, Z+3	; 0x03
     702:	89 83       	std	Y+1, r24	; 0x01
	uint8_t RB_Read_Index = Ring_Buffer->Read_Index;
     704:	8c 81       	ldd	r24, Y+4	; 0x04
     706:	9d 81       	ldd	r25, Y+5	; 0x05
     708:	fc 01       	movw	r30, r24
     70a:	82 81       	ldd	r24, Z+2	; 0x02
     70c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t RB_Size = Ring_Buffer->Size;
     70e:	8c 81       	ldd	r24, Y+4	; 0x04
     710:	9d 81       	ldd	r25, Y+5	; 0x05
     712:	fc 01       	movw	r30, r24
     714:	84 81       	ldd	r24, Z+4	; 0x04
     716:	95 81       	ldd	r25, Z+5	; 0x05
     718:	8b 83       	std	Y+3, r24	; 0x03
	
	if(RB_Write_Index == RB_Size){ 
     71a:	99 81       	ldd	r25, Y+1	; 0x01
     71c:	8b 81       	ldd	r24, Y+3	; 0x03
     71e:	98 17       	cp	r25, r24
     720:	49 f4       	brne	.+18     	; 0x734 <Write_to_Buffer+0x4e>
		
		Ring_Buffer->Write_Index = 0;
     722:	8c 81       	ldd	r24, Y+4	; 0x04
     724:	9d 81       	ldd	r25, Y+5	; 0x05
     726:	fc 01       	movw	r30, r24
     728:	13 82       	std	Z+3, r1	; 0x03
		Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
     72a:	8c 81       	ldd	r24, Y+4	; 0x04
     72c:	9d 81       	ldd	r25, Y+5	; 0x05
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	fc 01       	movw	r30, r24
     732:	22 87       	std	Z+10, r18	; 0x0a
		
	}
	
	if( Ring_Buffer->Indexing_State == WRITE_LEADS_READ && 
     734:	8c 81       	ldd	r24, Y+4	; 0x04
     736:	9d 81       	ldd	r25, Y+5	; 0x05
     738:	fc 01       	movw	r30, r24
     73a:	82 85       	ldd	r24, Z+10	; 0x0a
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	81 f5       	brne	.+96     	; 0x7a0 <Write_to_Buffer+0xba>
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	98 17       	cp	r25, r24
     746:	61 f5       	brne	.+88     	; 0x7a0 <Write_to_Buffer+0xba>
	RB_Read_Index == RB_Write_Index){
		
		if(Increase_Buffer(Ring_Buffer) == 1){
     748:	8c 81       	ldd	r24, Y+4	; 0x04
     74a:	9d 81       	ldd	r25, Y+5	; 0x05
     74c:	0e 94 21 03 	call	0x642	; 0x642 <Increase_Buffer>
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	21 f5       	brne	.+72     	; 0x79c <Write_to_Buffer+0xb6>
			
			Ring_Buffer->Indexing_State = OVERFLOW;
     754:	8c 81       	ldd	r24, Y+4	; 0x04
     756:	9d 81       	ldd	r25, Y+5	; 0x05
     758:	22 e0       	ldi	r18, 0x02	; 2
     75a:	fc 01       	movw	r30, r24
     75c:	22 87       	std	Z+10, r18	; 0x0a
			
			Ring_Buffer->Overflow_Index = RB_Write_Index;
     75e:	8c 81       	ldd	r24, Y+4	; 0x04
     760:	9d 81       	ldd	r25, Y+5	; 0x05
     762:	29 81       	ldd	r18, Y+1	; 0x01
     764:	fc 01       	movw	r30, r24
     766:	21 87       	std	Z+9, r18	; 0x09
			
			Ring_Buffer->Adjusted_Size = RB_Size;
     768:	8c 81       	ldd	r24, Y+4	; 0x04
     76a:	9d 81       	ldd	r25, Y+5	; 0x05
     76c:	2b 81       	ldd	r18, Y+3	; 0x03
     76e:	fc 01       	movw	r30, r24
     770:	27 83       	std	Z+7, r18	; 0x07
			
			Ring_Buffer->Wrap_Index = RB_Size;
     772:	8c 81       	ldd	r24, Y+4	; 0x04
     774:	9d 81       	ldd	r25, Y+5	; 0x05
     776:	2b 81       	ldd	r18, Y+3	; 0x03
     778:	fc 01       	movw	r30, r24
     77a:	20 87       	std	Z+8, r18	; 0x08
	
			Ring_Buffer->Write_Index = Ring_Buffer->Size - Ring_Buffer->Increment;
     77c:	8c 81       	ldd	r24, Y+4	; 0x04
     77e:	9d 81       	ldd	r25, Y+5	; 0x05
     780:	fc 01       	movw	r30, r24
     782:	84 81       	ldd	r24, Z+4	; 0x04
     784:	95 81       	ldd	r25, Z+5	; 0x05
     786:	28 2f       	mov	r18, r24
     788:	8c 81       	ldd	r24, Y+4	; 0x04
     78a:	9d 81       	ldd	r25, Y+5	; 0x05
     78c:	fc 01       	movw	r30, r24
     78e:	86 81       	ldd	r24, Z+6	; 0x06
     790:	28 1b       	sub	r18, r24
     792:	8c 81       	ldd	r24, Y+4	; 0x04
     794:	9d 81       	ldd	r25, Y+5	; 0x05
     796:	fc 01       	movw	r30, r24
     798:	23 83       	std	Z+3, r18	; 0x03
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <Write_to_Buffer+0xba>
			
		}else{
			
			return BUFFER_FAULT;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	1b c0       	rjmp	.+54     	; 0x7d6 <Write_to_Buffer+0xf0>
			
		}
		
	}
	
	Ring_Buffer->Buffer[Ring_Buffer->Write_Index] = Data;
     7a0:	8c 81       	ldd	r24, Y+4	; 0x04
     7a2:	9d 81       	ldd	r25, Y+5	; 0x05
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 81       	ld	r18, Z
     7a8:	31 81       	ldd	r19, Z+1	; 0x01
     7aa:	8c 81       	ldd	r24, Y+4	; 0x04
     7ac:	9d 81       	ldd	r25, Y+5	; 0x05
     7ae:	fc 01       	movw	r30, r24
     7b0:	83 81       	ldd	r24, Z+3	; 0x03
     7b2:	88 2f       	mov	r24, r24
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	82 0f       	add	r24, r18
     7b8:	93 1f       	adc	r25, r19
     7ba:	2e 81       	ldd	r18, Y+6	; 0x06
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
	Ring_Buffer->Write_Index++;
     7c0:	8c 81       	ldd	r24, Y+4	; 0x04
     7c2:	9d 81       	ldd	r25, Y+5	; 0x05
     7c4:	fc 01       	movw	r30, r24
     7c6:	83 81       	ldd	r24, Z+3	; 0x03
     7c8:	21 e0       	ldi	r18, 0x01	; 1
     7ca:	28 0f       	add	r18, r24
     7cc:	8c 81       	ldd	r24, Y+4	; 0x04
     7ce:	9d 81       	ldd	r25, Y+5	; 0x05
     7d0:	fc 01       	movw	r30, r24
     7d2:	23 83       	std	Z+3, r18	; 0x03
	
	return BUFFER_OK;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
	
}
     7d6:	26 96       	adiw	r28, 0x06	; 6
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <Free_Buffer>:

Ring_Buffer_Status Free_Buffer(Ring_Buffer* Ring_Buffer){
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <Free_Buffer+0x6>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
	
	if(Ring_Buffer == NULL){
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	89 2b       	or	r24, r25
     7fc:	11 f4       	brne	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		return BUFFER_FAULT;
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	0d c0       	rjmp	.+26     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	}
	
	free(Ring_Buffer->Buffer);
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	9a 81       	ldd	r25, Y+2	; 0x02
     806:	fc 01       	movw	r30, r24
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
     80c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <free>
	
	Ring_Buffer->Buffer = NULL;
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	9a 81       	ldd	r25, Y+2	; 0x02
     814:	fc 01       	movw	r30, r24
     816:	11 82       	std	Z+1, r1	; 0x01
     818:	10 82       	st	Z, r1
	
	return BUFFER_OK;
     81a:	80 e0       	ldi	r24, 0x00	; 0
	
}
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <Read_from_Buffer>:


Ring_Buffer_Status Read_from_Buffer(Ring_Buffer* Ring_Buffer, uint8_t* Outgoing_Data){
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	00 d0       	rcall	.+0      	; 0x82c <Read_from_Buffer+0x6>
     82c:	00 d0       	rcall	.+0      	; 0x82e <Read_from_Buffer+0x8>
     82e:	1f 92       	push	r1
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	9b 83       	std	Y+3, r25	; 0x03
     836:	8a 83       	std	Y+2, r24	; 0x02
     838:	7d 83       	std	Y+5, r23	; 0x05
     83a:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t RB_Read_Index = Ring_Buffer->Read_Index;
     83c:	8a 81       	ldd	r24, Y+2	; 0x02
     83e:	9b 81       	ldd	r25, Y+3	; 0x03
     840:	fc 01       	movw	r30, r24
     842:	82 81       	ldd	r24, Z+2	; 0x02
     844:	89 83       	std	Y+1, r24	; 0x01
	
	if (Ring_Buffer->Indexing_State == NONE
     846:	8a 81       	ldd	r24, Y+2	; 0x02
     848:	9b 81       	ldd	r25, Y+3	; 0x03
     84a:	fc 01       	movw	r30, r24
     84c:	82 85       	ldd	r24, Z+10	; 0x0a
     84e:	88 23       	and	r24, r24
     850:	61 f4       	brne	.+24     	; 0x86a <Read_from_Buffer+0x44>
	 && Ring_Buffer->Read_Index == Ring_Buffer->Write_Index) {
     852:	8a 81       	ldd	r24, Y+2	; 0x02
     854:	9b 81       	ldd	r25, Y+3	; 0x03
     856:	fc 01       	movw	r30, r24
     858:	22 81       	ldd	r18, Z+2	; 0x02
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	9b 81       	ldd	r25, Y+3	; 0x03
     85e:	fc 01       	movw	r30, r24
     860:	83 81       	ldd	r24, Z+3	; 0x03
     862:	28 17       	cp	r18, r24
     864:	11 f4       	brne	.+4      	; 0x86a <Read_from_Buffer+0x44>
		
		return BUFFER_EMPTY;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	92 c0       	rjmp	.+292    	; 0x98e <__stack+0x8f>
		
	}
	
	*Outgoing_Data = Ring_Buffer->Buffer[Ring_Buffer->Read_Index];
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	9b 81       	ldd	r25, Y+3	; 0x03
     86e:	fc 01       	movw	r30, r24
     870:	20 81       	ld	r18, Z
     872:	31 81       	ldd	r19, Z+1	; 0x01
     874:	8a 81       	ldd	r24, Y+2	; 0x02
     876:	9b 81       	ldd	r25, Y+3	; 0x03
     878:	fc 01       	movw	r30, r24
     87a:	82 81       	ldd	r24, Z+2	; 0x02
     87c:	88 2f       	mov	r24, r24
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	82 0f       	add	r24, r18
     882:	93 1f       	adc	r25, r19
     884:	fc 01       	movw	r30, r24
     886:	20 81       	ld	r18, Z
     888:	8c 81       	ldd	r24, Y+4	; 0x04
     88a:	9d 81       	ldd	r25, Y+5	; 0x05
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
	
	switch(Ring_Buffer->Indexing_State){
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	9b 81       	ldd	r25, Y+3	; 0x03
     894:	fc 01       	movw	r30, r24
     896:	82 85       	ldd	r24, Z+10	; 0x0a
     898:	88 2f       	mov	r24, r24
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	91 05       	cpc	r25, r1
     8a0:	89 f0       	breq	.+34     	; 0x8c4 <Read_from_Buffer+0x9e>
     8a2:	82 30       	cpi	r24, 0x02	; 2
     8a4:	91 05       	cpc	r25, r1
     8a6:	51 f1       	breq	.+84     	; 0x8fc <Read_from_Buffer+0xd6>
     8a8:	89 2b       	or	r24, r25
     8aa:	09 f0       	breq	.+2      	; 0x8ae <Read_from_Buffer+0x88>
     8ac:	5f c0       	rjmp	.+190    	; 0x96c <__stack+0x6d>
		
		case NONE:
			
			Ring_Buffer->Read_Index++;
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	9b 81       	ldd	r25, Y+3	; 0x03
     8b2:	fc 01       	movw	r30, r24
     8b4:	82 81       	ldd	r24, Z+2	; 0x02
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	28 0f       	add	r18, r24
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	9b 81       	ldd	r25, Y+3	; 0x03
     8be:	fc 01       	movw	r30, r24
     8c0:	22 83       	std	Z+2, r18	; 0x02
			break;
     8c2:	56 c0       	rjmp	.+172    	; 0x970 <__stack+0x71>
		
		case WRITE_LEADS_READ:
		
			if(RB_Read_Index == Ring_Buffer->Size - 1){
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	28 2f       	mov	r18, r24
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	8a 81       	ldd	r24, Y+2	; 0x02
     8cc:	9b 81       	ldd	r25, Y+3	; 0x03
     8ce:	fc 01       	movw	r30, r24
     8d0:	84 81       	ldd	r24, Z+4	; 0x04
     8d2:	95 81       	ldd	r25, Z+5	; 0x05
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	28 17       	cp	r18, r24
     8d8:	39 07       	cpc	r19, r25
     8da:	29 f4       	brne	.+10     	; 0x8e6 <Read_from_Buffer+0xc0>
					
				Ring_Buffer->Read_Index = 0;	
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	9b 81       	ldd	r25, Y+3	; 0x03
     8e0:	fc 01       	movw	r30, r24
     8e2:	12 82       	std	Z+2, r1	; 0x02
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     8e4:	45 c0       	rjmp	.+138    	; 0x970 <__stack+0x71>
					
				Ring_Buffer->Read_Index = 0;	
				
			}else{
				
				Ring_Buffer->Read_Index++;
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ea:	fc 01       	movw	r30, r24
     8ec:	82 81       	ldd	r24, Z+2	; 0x02
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	28 0f       	add	r18, r24
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	9b 81       	ldd	r25, Y+3	; 0x03
     8f6:	fc 01       	movw	r30, r24
     8f8:	22 83       	std	Z+2, r18	; 0x02
				
			}
		
			break;
     8fa:	3a c0       	rjmp	.+116    	; 0x970 <__stack+0x71>
		
		case OVERFLOW:
		
			if(RB_Read_Index == (Ring_Buffer->Adjusted_Size - 1)){
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	28 2f       	mov	r18, r24
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	9b 81       	ldd	r25, Y+3	; 0x03
     906:	fc 01       	movw	r30, r24
     908:	87 81       	ldd	r24, Z+7	; 0x07
     90a:	88 2f       	mov	r24, r24
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	28 17       	cp	r18, r24
     912:	39 07       	cpc	r19, r25
     914:	29 f4       	brne	.+10     	; 0x920 <__stack+0x21>
				
				Ring_Buffer->Read_Index = 0;
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	9b 81       	ldd	r25, Y+3	; 0x03
     91a:	fc 01       	movw	r30, r24
     91c:	12 82       	std	Z+2, r1	; 0x02
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     91e:	28 c0       	rjmp	.+80     	; 0x970 <__stack+0x71>
		
			if(RB_Read_Index == (Ring_Buffer->Adjusted_Size - 1)){
				
				Ring_Buffer->Read_Index = 0;
								
			}else if(RB_Read_Index == Ring_Buffer->Overflow_Index - 1){
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	28 2f       	mov	r18, r24
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	8a 81       	ldd	r24, Y+2	; 0x02
     928:	9b 81       	ldd	r25, Y+3	; 0x03
     92a:	fc 01       	movw	r30, r24
     92c:	81 85       	ldd	r24, Z+9	; 0x09
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	28 17       	cp	r18, r24
     936:	39 07       	cpc	r19, r25
     938:	71 f4       	brne	.+28     	; 0x956 <__stack+0x57>
				
				Ring_Buffer->Read_Index = Ring_Buffer->Wrap_Index;
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	9b 81       	ldd	r25, Y+3	; 0x03
     93e:	fc 01       	movw	r30, r24
     940:	20 85       	ldd	r18, Z+8	; 0x08
     942:	8a 81       	ldd	r24, Y+2	; 0x02
     944:	9b 81       	ldd	r25, Y+3	; 0x03
     946:	fc 01       	movw	r30, r24
     948:	22 83       	std	Z+2, r18	; 0x02
				Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	9b 81       	ldd	r25, Y+3	; 0x03
     94e:	21 e0       	ldi	r18, 0x01	; 1
     950:	fc 01       	movw	r30, r24
     952:	22 87       	std	Z+10, r18	; 0x0a
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     954:	0d c0       	rjmp	.+26     	; 0x970 <__stack+0x71>
				Ring_Buffer->Read_Index = Ring_Buffer->Wrap_Index;
				Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
				
			}else{
				
				Ring_Buffer->Read_Index++;
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	9b 81       	ldd	r25, Y+3	; 0x03
     95a:	fc 01       	movw	r30, r24
     95c:	82 81       	ldd	r24, Z+2	; 0x02
     95e:	21 e0       	ldi	r18, 0x01	; 1
     960:	28 0f       	add	r18, r24
     962:	8a 81       	ldd	r24, Y+2	; 0x02
     964:	9b 81       	ldd	r25, Y+3	; 0x03
     966:	fc 01       	movw	r30, r24
     968:	22 83       	std	Z+2, r18	; 0x02
				
			}
		
			break;
     96a:	02 c0       	rjmp	.+4      	; 0x970 <__stack+0x71>
		
		default:
		
			return BUFFER_FAULT;
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	0f c0       	rjmp	.+30     	; 0x98e <__stack+0x8f>
		
	}
	
	if(Ring_Buffer->Read_Index == Ring_Buffer->Write_Index){
     970:	8a 81       	ldd	r24, Y+2	; 0x02
     972:	9b 81       	ldd	r25, Y+3	; 0x03
     974:	fc 01       	movw	r30, r24
     976:	22 81       	ldd	r18, Z+2	; 0x02
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	9b 81       	ldd	r25, Y+3	; 0x03
     97c:	fc 01       	movw	r30, r24
     97e:	83 81       	ldd	r24, Z+3	; 0x03
     980:	28 17       	cp	r18, r24
     982:	21 f4       	brne	.+8      	; 0x98c <__stack+0x8d>
		Ring_Buffer->Indexing_State = NONE;
     984:	8a 81       	ldd	r24, Y+2	; 0x02
     986:	9b 81       	ldd	r25, Y+3	; 0x03
     988:	fc 01       	movw	r30, r24
     98a:	12 86       	std	Z+10, r1	; 0x0a
	}
	
	return BUFFER_OK;
     98c:	80 e0       	ldi	r24, 0x00	; 0
	
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <__vector_14>:

//------- Timer Definitions:

const uint8_t Max_ISR_Cycles = 150; // Max time the ISR will take to increment System_Ticks.

ISR(TIMER0_COMPA_vect){
     99e:	1f 92       	push	r1
     9a0:	0f 92       	push	r0
     9a2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     9a6:	0f 92       	push	r0
     9a8:	11 24       	eor	r1, r1
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	8f 93       	push	r24
     9bc:	9f 93       	push	r25
     9be:	af 93       	push	r26
     9c0:	bf 93       	push	r27
     9c2:	ef 93       	push	r30
     9c4:	ff 93       	push	r31
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	1f 92       	push	r1
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
		
	if(Remaining_Ticks[_8_bit1] == 0){
     9d0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks+0x4>
     9d4:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x5>
     9d8:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x6>
     9dc:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x7>
     9e0:	89 2b       	or	r24, r25
     9e2:	8a 2b       	or	r24, r26
     9e4:	8b 2b       	or	r24, r27
     9e6:	69 f5       	brne	.+90     	; 0xa42 <__vector_14+0xa4>
		
		PORTD ^= (1 << PORTD6);
     9e8:	8b e2       	ldi	r24, 0x2B	; 43
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	2b e2       	ldi	r18, 0x2B	; 43
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	f9 01       	movw	r30, r18
     9f2:	30 81       	ld	r19, Z
     9f4:	20 e4       	ldi	r18, 0x40	; 64
     9f6:	23 27       	eor	r18, r19
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
				
		if(Calculated_Ticks[_8_bit1] > 0){
     9fc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Calculated_Ticks+0x4>
     a00:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Calculated_Ticks+0x5>
     a04:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Calculated_Ticks+0x6>
     a08:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Calculated_Ticks+0x7>
     a0c:	89 2b       	or	r24, r25
     a0e:	8a 2b       	or	r24, r26
     a10:	8b 2b       	or	r24, r27
     a12:	09 f4       	brne	.+2      	; 0xa16 <__vector_14+0x78>
     a14:	51 c0       	rjmp	.+162    	; 0xab8 <__vector_14+0x11a>
			
			Remaining_Ticks[_8_bit1] = Calculated_Ticks[_8_bit1]; // Reset the counter
     a16:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Calculated_Ticks+0x4>
     a1a:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Calculated_Ticks+0x5>
     a1e:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Calculated_Ticks+0x6>
     a22:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Calculated_Ticks+0x7>
     a26:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Remaining_Ticks+0x4>
     a2a:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <Remaining_Ticks+0x5>
     a2e:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <Remaining_Ticks+0x6>
     a32:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <Remaining_Ticks+0x7>
			OCR0A = 0xFF;
     a36:	87 e4       	ldi	r24, 0x47	; 71
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	2f ef       	ldi	r18, 0xFF	; 255
     a3c:	fc 01       	movw	r30, r24
     a3e:	20 83       	st	Z, r18
		OCR0A = NextOCR;
		Remaining_Ticks[_8_bit1] -= NextOCR;
		
	}
	
}
     a40:	3b c0       	rjmp	.+118    	; 0xab8 <__vector_14+0x11a>
			
		}
		
	}else{

		uint8_t NextOCR = (Remaining_Ticks[_8_bit1] > 0xFF) ? 0xFF : (uint8_t)Remaining_Ticks[_8_bit1];
     a42:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks+0x4>
     a46:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x5>
     a4a:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x6>
     a4e:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x7>
     a52:	8f 3f       	cpi	r24, 0xFF	; 255
     a54:	91 05       	cpc	r25, r1
     a56:	a1 05       	cpc	r26, r1
     a58:	b1 05       	cpc	r27, r1
     a5a:	09 f0       	breq	.+2      	; 0xa5e <__vector_14+0xc0>
     a5c:	48 f4       	brcc	.+18     	; 0xa70 <__vector_14+0xd2>
     a5e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks+0x4>
     a62:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x5>
     a66:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x6>
     a6a:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x7>
     a6e:	01 c0       	rjmp	.+2      	; 0xa72 <__vector_14+0xd4>
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	89 83       	std	Y+1, r24	; 0x01

		OCR0A = NextOCR;
     a74:	87 e4       	ldi	r24, 0x47	; 71
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	29 81       	ldd	r18, Y+1	; 0x01
     a7a:	fc 01       	movw	r30, r24
     a7c:	20 83       	st	Z, r18
		Remaining_Ticks[_8_bit1] -= NextOCR;
     a7e:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <Remaining_Ticks+0x4>
     a82:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <Remaining_Ticks+0x5>
     a86:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <Remaining_Ticks+0x6>
     a8a:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <Remaining_Ticks+0x7>
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	88 2f       	mov	r24, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	e8 1a       	sub	r14, r24
     a9e:	f9 0a       	sbc	r15, r25
     aa0:	0a 0b       	sbc	r16, r26
     aa2:	1b 0b       	sbc	r17, r27
     aa4:	d8 01       	movw	r26, r16
     aa6:	c7 01       	movw	r24, r14
     aa8:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Remaining_Ticks+0x4>
     aac:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <Remaining_Ticks+0x5>
     ab0:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <Remaining_Ticks+0x6>
     ab4:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <Remaining_Ticks+0x7>
		
	}
	
}
     ab8:	00 00       	nop
     aba:	0f 90       	pop	r0
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	ff 91       	pop	r31
     ac2:	ef 91       	pop	r30
     ac4:	bf 91       	pop	r27
     ac6:	af 91       	pop	r26
     ac8:	9f 91       	pop	r25
     aca:	8f 91       	pop	r24
     acc:	5f 91       	pop	r21
     ace:	4f 91       	pop	r20
     ad0:	3f 91       	pop	r19
     ad2:	2f 91       	pop	r18
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	0f 90       	pop	r0
     ade:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <__vector_7>:

ISR(TIMER2_COMPA_vect){
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     af0:	0f 92       	push	r0
     af2:	11 24       	eor	r1, r1
     af4:	af 92       	push	r10
     af6:	bf 92       	push	r11
     af8:	cf 92       	push	r12
     afa:	df 92       	push	r13
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	2f 93       	push	r18
     b06:	3f 93       	push	r19
     b08:	4f 93       	push	r20
     b0a:	5f 93       	push	r21
     b0c:	6f 93       	push	r22
     b0e:	7f 93       	push	r23
     b10:	8f 93       	push	r24
     b12:	9f 93       	push	r25
     b14:	af 93       	push	r26
     b16:	bf 93       	push	r27
     b18:	ef 93       	push	r30
     b1a:	ff 93       	push	r31
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	1f 92       	push	r1
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
	
	if(Remaining_Ticks[_8_bit2] == 0){
     b26:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x8>
     b2a:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x9>
     b2e:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0xa>
     b32:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0xb>
     b36:	89 2b       	or	r24, r25
     b38:	8a 2b       	or	r24, r26
     b3a:	8b 2b       	or	r24, r27
     b3c:	09 f0       	breq	.+2      	; 0xb40 <__vector_7+0x58>
     b3e:	60 c0       	rjmp	.+192    	; 0xc00 <__vector_7+0x118>
		
		PORTD ^= (1 << PORTD7);
     b40:	8b e2       	ldi	r24, 0x2B	; 43
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	2b e2       	ldi	r18, 0x2B	; 43
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	f9 01       	movw	r30, r18
     b4a:	30 81       	ld	r19, Z
     b4c:	20 e8       	ldi	r18, 0x80	; 128
     b4e:	23 27       	eor	r18, r19
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
		
		System_Ticks[_8_bit2]++; 
     b54:	a0 90 2d 01 	lds	r10, 0x012D	; 0x80012d <System_Ticks+0x10>
     b58:	b0 90 2e 01 	lds	r11, 0x012E	; 0x80012e <System_Ticks+0x11>
     b5c:	c0 90 2f 01 	lds	r12, 0x012F	; 0x80012f <System_Ticks+0x12>
     b60:	d0 90 30 01 	lds	r13, 0x0130	; 0x800130 <System_Ticks+0x13>
     b64:	e0 90 31 01 	lds	r14, 0x0131	; 0x800131 <System_Ticks+0x14>
     b68:	f0 90 32 01 	lds	r15, 0x0132	; 0x800132 <System_Ticks+0x15>
     b6c:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <System_Ticks+0x16>
     b70:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <System_Ticks+0x17>
     b74:	2a 2d       	mov	r18, r10
     b76:	3b 2d       	mov	r19, r11
     b78:	4c 2d       	mov	r20, r12
     b7a:	5d 2d       	mov	r21, r13
     b7c:	6e 2d       	mov	r22, r14
     b7e:	7f 2d       	mov	r23, r15
     b80:	80 2f       	mov	r24, r16
     b82:	91 2f       	mov	r25, r17
     b84:	a1 e0       	ldi	r26, 0x01	; 1
     b86:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__adddi3_s8>
     b8a:	a2 2e       	mov	r10, r18
     b8c:	b3 2e       	mov	r11, r19
     b8e:	c4 2e       	mov	r12, r20
     b90:	d5 2e       	mov	r13, r21
     b92:	e6 2e       	mov	r14, r22
     b94:	f7 2e       	mov	r15, r23
     b96:	08 2f       	mov	r16, r24
     b98:	19 2f       	mov	r17, r25
     b9a:	a0 92 2d 01 	sts	0x012D, r10	; 0x80012d <System_Ticks+0x10>
     b9e:	b0 92 2e 01 	sts	0x012E, r11	; 0x80012e <System_Ticks+0x11>
     ba2:	c0 92 2f 01 	sts	0x012F, r12	; 0x80012f <System_Ticks+0x12>
     ba6:	d0 92 30 01 	sts	0x0130, r13	; 0x800130 <System_Ticks+0x13>
     baa:	e0 92 31 01 	sts	0x0131, r14	; 0x800131 <System_Ticks+0x14>
     bae:	f0 92 32 01 	sts	0x0132, r15	; 0x800132 <System_Ticks+0x15>
     bb2:	00 93 33 01 	sts	0x0133, r16	; 0x800133 <System_Ticks+0x16>
     bb6:	10 93 34 01 	sts	0x0134, r17	; 0x800134 <System_Ticks+0x17>

		if(Calculated_Ticks[_8_bit2] > 0){
     bba:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Calculated_Ticks+0x8>
     bbe:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Calculated_Ticks+0x9>
     bc2:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <Calculated_Ticks+0xa>
     bc6:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <Calculated_Ticks+0xb>
     bca:	89 2b       	or	r24, r25
     bcc:	8a 2b       	or	r24, r26
     bce:	8b 2b       	or	r24, r27
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <__vector_7+0xec>
     bd2:	51 c0       	rjmp	.+162    	; 0xc76 <__vector_7+0x18e>
			
			Remaining_Ticks[_8_bit2] = Calculated_Ticks[_8_bit2]; // Reset the counter
     bd4:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Calculated_Ticks+0x8>
     bd8:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Calculated_Ticks+0x9>
     bdc:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <Calculated_Ticks+0xa>
     be0:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <Calculated_Ticks+0xb>
     be4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Remaining_Ticks+0x8>
     be8:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <Remaining_Ticks+0x9>
     bec:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <Remaining_Ticks+0xa>
     bf0:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <Remaining_Ticks+0xb>
			OCR2A = 0xFF;
     bf4:	83 eb       	ldi	r24, 0xB3	; 179
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	2f ef       	ldi	r18, 0xFF	; 255
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
		OCR2A = NextOCR;
		Remaining_Ticks[_8_bit2] -= NextOCR;
		
	}

}
     bfe:	3b c0       	rjmp	.+118    	; 0xc76 <__vector_7+0x18e>
			
		}
		
	}else{

		uint8_t NextOCR = (Remaining_Ticks[_8_bit2] > 0xFF) ? 0xFF : (uint8_t)Remaining_Ticks[_8_bit2];
     c00:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x8>
     c04:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x9>
     c08:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0xa>
     c0c:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0xb>
     c10:	8f 3f       	cpi	r24, 0xFF	; 255
     c12:	91 05       	cpc	r25, r1
     c14:	a1 05       	cpc	r26, r1
     c16:	b1 05       	cpc	r27, r1
     c18:	09 f0       	breq	.+2      	; 0xc1c <__vector_7+0x134>
     c1a:	48 f4       	brcc	.+18     	; 0xc2e <__vector_7+0x146>
     c1c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x8>
     c20:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x9>
     c24:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0xa>
     c28:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0xb>
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <__vector_7+0x148>
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	89 83       	std	Y+1, r24	; 0x01

		OCR2A = NextOCR;
     c32:	83 eb       	ldi	r24, 0xB3	; 179
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	29 81       	ldd	r18, Y+1	; 0x01
     c38:	fc 01       	movw	r30, r24
     c3a:	20 83       	st	Z, r18
		Remaining_Ticks[_8_bit2] -= NextOCR;
     c3c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Remaining_Ticks+0x8>
     c40:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <Remaining_Ticks+0x9>
     c44:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <Remaining_Ticks+0xa>
     c48:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <Remaining_Ticks+0xb>
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	a0 e0       	ldi	r26, 0x00	; 0
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	79 01       	movw	r14, r18
     c58:	8a 01       	movw	r16, r20
     c5a:	e8 1a       	sub	r14, r24
     c5c:	f9 0a       	sbc	r15, r25
     c5e:	0a 0b       	sbc	r16, r26
     c60:	1b 0b       	sbc	r17, r27
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Remaining_Ticks+0x8>
     c6a:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <Remaining_Ticks+0x9>
     c6e:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <Remaining_Ticks+0xa>
     c72:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <Remaining_Ticks+0xb>
		
	}

}
     c76:	00 00       	nop
     c78:	0f 90       	pop	r0
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	bf 91       	pop	r27
     c84:	af 91       	pop	r26
     c86:	9f 91       	pop	r25
     c88:	8f 91       	pop	r24
     c8a:	7f 91       	pop	r23
     c8c:	6f 91       	pop	r22
     c8e:	5f 91       	pop	r21
     c90:	4f 91       	pop	r20
     c92:	3f 91       	pop	r19
     c94:	2f 91       	pop	r18
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	bf 90       	pop	r11
     ca4:	af 90       	pop	r10
     ca6:	0f 90       	pop	r0
     ca8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_11>:


ISR(TIMER1_COMPA_vect){
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	00 d0       	rcall	.+0      	; 0xcec <__vector_11+0x3a>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	
	if(Remaining_Ticks[_16_bit] == 0){
     cf0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Remaining_Ticks>
     cf4:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Remaining_Ticks+0x1>
     cf8:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <Remaining_Ticks+0x2>
     cfc:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <Remaining_Ticks+0x3>
     d00:	89 2b       	or	r24, r25
     d02:	8a 2b       	or	r24, r26
     d04:	8b 2b       	or	r24, r27
     d06:	09 f0       	breq	.+2      	; 0xd0a <__vector_11+0x58>
     d08:	65 c0       	rjmp	.+202    	; 0xdd4 <__vector_11+0x122>
		
		PORTB ^= (1 << PORTB0);
     d0a:	85 e2       	ldi	r24, 0x25	; 37
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	25 e2       	ldi	r18, 0x25	; 37
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	f9 01       	movw	r30, r18
     d14:	30 81       	ld	r19, Z
     d16:	21 e0       	ldi	r18, 0x01	; 1
     d18:	23 27       	eor	r18, r19
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 83       	st	Z, r18
		
		System_Ticks[_16_bit]++;
     d1e:	a0 90 1d 01 	lds	r10, 0x011D	; 0x80011d <System_Ticks>
     d22:	b0 90 1e 01 	lds	r11, 0x011E	; 0x80011e <System_Ticks+0x1>
     d26:	c0 90 1f 01 	lds	r12, 0x011F	; 0x80011f <System_Ticks+0x2>
     d2a:	d0 90 20 01 	lds	r13, 0x0120	; 0x800120 <System_Ticks+0x3>
     d2e:	e0 90 21 01 	lds	r14, 0x0121	; 0x800121 <System_Ticks+0x4>
     d32:	f0 90 22 01 	lds	r15, 0x0122	; 0x800122 <System_Ticks+0x5>
     d36:	00 91 23 01 	lds	r16, 0x0123	; 0x800123 <System_Ticks+0x6>
     d3a:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <System_Ticks+0x7>
     d3e:	2a 2d       	mov	r18, r10
     d40:	3b 2d       	mov	r19, r11
     d42:	4c 2d       	mov	r20, r12
     d44:	5d 2d       	mov	r21, r13
     d46:	6e 2d       	mov	r22, r14
     d48:	7f 2d       	mov	r23, r15
     d4a:	80 2f       	mov	r24, r16
     d4c:	91 2f       	mov	r25, r17
     d4e:	a1 e0       	ldi	r26, 0x01	; 1
     d50:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__adddi3_s8>
     d54:	a2 2e       	mov	r10, r18
     d56:	b3 2e       	mov	r11, r19
     d58:	c4 2e       	mov	r12, r20
     d5a:	d5 2e       	mov	r13, r21
     d5c:	e6 2e       	mov	r14, r22
     d5e:	f7 2e       	mov	r15, r23
     d60:	08 2f       	mov	r16, r24
     d62:	19 2f       	mov	r17, r25
     d64:	a0 92 1d 01 	sts	0x011D, r10	; 0x80011d <System_Ticks>
     d68:	b0 92 1e 01 	sts	0x011E, r11	; 0x80011e <System_Ticks+0x1>
     d6c:	c0 92 1f 01 	sts	0x011F, r12	; 0x80011f <System_Ticks+0x2>
     d70:	d0 92 20 01 	sts	0x0120, r13	; 0x800120 <System_Ticks+0x3>
     d74:	e0 92 21 01 	sts	0x0121, r14	; 0x800121 <System_Ticks+0x4>
     d78:	f0 92 22 01 	sts	0x0122, r15	; 0x800122 <System_Ticks+0x5>
     d7c:	00 93 23 01 	sts	0x0123, r16	; 0x800123 <System_Ticks+0x6>
     d80:	10 93 24 01 	sts	0x0124, r17	; 0x800124 <System_Ticks+0x7>
		
		if(Calculated_Ticks[_16_bit] > 0){
     d84:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Calculated_Ticks>
     d88:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Calculated_Ticks+0x1>
     d8c:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <Calculated_Ticks+0x2>
     d90:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <Calculated_Ticks+0x3>
     d94:	89 2b       	or	r24, r25
     d96:	8a 2b       	or	r24, r26
     d98:	8b 2b       	or	r24, r27
     d9a:	09 f4       	brne	.+2      	; 0xd9e <__vector_11+0xec>
     d9c:	58 c0       	rjmp	.+176    	; 0xe4e <__vector_11+0x19c>
			
			Remaining_Ticks[_16_bit] = Calculated_Ticks[_16_bit];
     d9e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Calculated_Ticks>
     da2:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Calculated_Ticks+0x1>
     da6:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <Calculated_Ticks+0x2>
     daa:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <Calculated_Ticks+0x3>
     dae:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <Remaining_Ticks>
     db2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <Remaining_Ticks+0x1>
     db6:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <Remaining_Ticks+0x2>
     dba:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <Remaining_Ticks+0x3>
			OCR1AH = 0xFF;
     dbe:	89 e8       	ldi	r24, 0x89	; 137
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	2f ef       	ldi	r18, 0xFF	; 255
     dc4:	fc 01       	movw	r30, r24
     dc6:	20 83       	st	Z, r18
			OCR1AL = 0xFF;
     dc8:	88 e8       	ldi	r24, 0x88	; 136
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	2f ef       	ldi	r18, 0xFF	; 255
     dce:	fc 01       	movw	r30, r24
     dd0:	20 83       	st	Z, r18
		OCR1A = NextOCR;
		Remaining_Ticks[_16_bit] -= NextOCR;
		
	}
	
}
     dd2:	3d c0       	rjmp	.+122    	; 0xe4e <__vector_11+0x19c>
			
		}
		
	}else{
		
		uint16_t NextOCR = (Remaining_Ticks[_16_bit] > 0xFFFF) ? 0xFFFF : (uint16_t)Remaining_Ticks[_16_bit];
     dd4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Remaining_Ticks>
     dd8:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Remaining_Ticks+0x1>
     ddc:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <Remaining_Ticks+0x2>
     de0:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <Remaining_Ticks+0x3>
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	a1 40       	sbci	r26, 0x01	; 1
     de8:	b1 05       	cpc	r27, r1
     dea:	48 f4       	brcc	.+18     	; 0xdfe <__vector_11+0x14c>
     dec:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Remaining_Ticks>
     df0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Remaining_Ticks+0x1>
     df4:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <Remaining_Ticks+0x2>
     df8:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <Remaining_Ticks+0x3>
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <__vector_11+0x150>
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	9f ef       	ldi	r25, 0xFF	; 255
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
		
		OCR1A = NextOCR;
     e06:	88 e8       	ldi	r24, 0x88	; 136
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	29 81       	ldd	r18, Y+1	; 0x01
     e0c:	3a 81       	ldd	r19, Y+2	; 0x02
     e0e:	fc 01       	movw	r30, r24
     e10:	31 83       	std	Z+1, r19	; 0x01
     e12:	20 83       	st	Z, r18
		Remaining_Ticks[_16_bit] -= NextOCR;
     e14:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <Remaining_Ticks>
     e18:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <Remaining_Ticks+0x1>
     e1c:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <Remaining_Ticks+0x2>
     e20:	50 91 44 01 	lds	r21, 0x0144	; 0x800144 <Remaining_Ticks+0x3>
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	cc 01       	movw	r24, r24
     e2a:	a0 e0       	ldi	r26, 0x00	; 0
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	79 01       	movw	r14, r18
     e30:	8a 01       	movw	r16, r20
     e32:	e8 1a       	sub	r14, r24
     e34:	f9 0a       	sbc	r15, r25
     e36:	0a 0b       	sbc	r16, r26
     e38:	1b 0b       	sbc	r17, r27
     e3a:	d8 01       	movw	r26, r16
     e3c:	c7 01       	movw	r24, r14
     e3e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <Remaining_Ticks>
     e42:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <Remaining_Ticks+0x1>
     e46:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <Remaining_Ticks+0x2>
     e4a:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <Remaining_Ticks+0x3>
		
	}
	
}
     e4e:	00 00       	nop
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	bf 90       	pop	r11
     e7e:	af 90       	pop	r10
     e80:	0f 90       	pop	r0
     e82:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     e86:	0f 90       	pop	r0
     e88:	1f 90       	pop	r1
     e8a:	18 95       	reti

00000e8c <Configure_Timer_Tick>:


bool Configure_Timer_Tick(uint16_t Time, uint32_t Unit, Timers Timer){ // All relevent types were optimized by calculating the largest possible values to Configure_Timer_Step()
     e8c:	2f 92       	push	r2
     e8e:	3f 92       	push	r3
     e90:	4f 92       	push	r4
     e92:	5f 92       	push	r5
     e94:	6f 92       	push	r6
     e96:	7f 92       	push	r7
     e98:	8f 92       	push	r8
     e9a:	9f 92       	push	r9
     e9c:	af 92       	push	r10
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	e0 97       	sbiw	r28, 0x30	; 48
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	9b a7       	std	Y+43, r25	; 0x2b
     ec2:	8a a7       	std	Y+42, r24	; 0x2a
     ec4:	4c a7       	std	Y+44, r20	; 0x2c
     ec6:	5d a7       	std	Y+45, r21	; 0x2d
     ec8:	6e a7       	std	Y+46, r22	; 0x2e
     eca:	7f a7       	std	Y+47, r23	; 0x2f
     ecc:	28 ab       	std	Y+48, r18	; 0x30
	
	if(TC_CLK == 0){ 
     ece:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <TC_CLK>
     ed2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <TC_CLK+0x1>
     ed6:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <TC_CLK+0x2>
     eda:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <TC_CLK+0x3>
     ede:	89 2b       	or	r24, r25
     ee0:	8a 2b       	or	r24, r26
     ee2:	8b 2b       	or	r24, r27
     ee4:	11 f4       	brne	.+4      	; 0xeea <Configure_Timer_Tick+0x5e>
		return false;
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	4f c4       	rjmp	.+2206   	; 0x1788 <Configure_Timer_Tick+0x8fc>
	}
	
	if(Unit == 0){
     eea:	8c a5       	ldd	r24, Y+44	; 0x2c
     eec:	9d a5       	ldd	r25, Y+45	; 0x2d
     eee:	ae a5       	ldd	r26, Y+46	; 0x2e
     ef0:	bf a5       	ldd	r27, Y+47	; 0x2f
     ef2:	89 2b       	or	r24, r25
     ef4:	8a 2b       	or	r24, r26
     ef6:	8b 2b       	or	r24, r27
     ef8:	11 f4       	brne	.+4      	; 0xefe <Configure_Timer_Tick+0x72>
		return false;
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	45 c4       	rjmp	.+2186   	; 0x1788 <Configure_Timer_Tick+0x8fc>
	}
	
	if((uint64_t)TC_CLK * Time/Unit <= Max_ISR_Cycles){ // If the requested tick is shorter than or equal to the max time it takes to increment System_Ticks, return error state
     efe:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <TC_CLK>
     f02:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <TC_CLK+0x1>
     f06:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <TC_CLK+0x2>
     f0a:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <TC_CLK+0x3>
     f0e:	1c 01       	movw	r2, r24
     f10:	2d 01       	movw	r4, r26
     f12:	61 2c       	mov	r6, r1
     f14:	71 2c       	mov	r7, r1
     f16:	43 01       	movw	r8, r6
     f18:	8a a5       	ldd	r24, Y+42	; 0x2a
     f1a:	9b a5       	ldd	r25, Y+43	; 0x2b
     f1c:	9c 01       	movw	r18, r24
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	cb 01       	movw	r24, r22
     f28:	a2 2e       	mov	r10, r18
     f2a:	b3 2e       	mov	r11, r19
     f2c:	c4 2e       	mov	r12, r20
     f2e:	d5 2e       	mov	r13, r21
     f30:	e6 2e       	mov	r14, r22
     f32:	f7 2e       	mov	r15, r23
     f34:	08 2f       	mov	r16, r24
     f36:	19 2f       	mov	r17, r25
     f38:	22 2d       	mov	r18, r2
     f3a:	33 2d       	mov	r19, r3
     f3c:	44 2d       	mov	r20, r4
     f3e:	55 2d       	mov	r21, r5
     f40:	66 2d       	mov	r22, r6
     f42:	77 2d       	mov	r23, r7
     f44:	88 2d       	mov	r24, r8
     f46:	99 2d       	mov	r25, r9
     f48:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__muldi3>
     f4c:	a2 2e       	mov	r10, r18
     f4e:	b3 2e       	mov	r11, r19
     f50:	c4 2e       	mov	r12, r20
     f52:	d5 2e       	mov	r13, r21
     f54:	e6 2e       	mov	r14, r22
     f56:	f7 2e       	mov	r15, r23
     f58:	08 2f       	mov	r16, r24
     f5a:	19 2f       	mov	r17, r25
     f5c:	2a 2c       	mov	r2, r10
     f5e:	3b 2c       	mov	r3, r11
     f60:	4c 2c       	mov	r4, r12
     f62:	5d 2c       	mov	r5, r13
     f64:	6e 2c       	mov	r6, r14
     f66:	7f 2c       	mov	r7, r15
     f68:	80 2e       	mov	r8, r16
     f6a:	91 2e       	mov	r9, r17
     f6c:	8c a5       	ldd	r24, Y+44	; 0x2c
     f6e:	9d a5       	ldd	r25, Y+45	; 0x2d
     f70:	ae a5       	ldd	r26, Y+46	; 0x2e
     f72:	bf a5       	ldd	r27, Y+47	; 0x2f
     f74:	9c 01       	movw	r18, r24
     f76:	ad 01       	movw	r20, r26
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	cb 01       	movw	r24, r22
     f7e:	a2 2e       	mov	r10, r18
     f80:	b3 2e       	mov	r11, r19
     f82:	c4 2e       	mov	r12, r20
     f84:	d5 2e       	mov	r13, r21
     f86:	e6 2e       	mov	r14, r22
     f88:	f7 2e       	mov	r15, r23
     f8a:	08 2f       	mov	r16, r24
     f8c:	19 2f       	mov	r17, r25
     f8e:	22 2d       	mov	r18, r2
     f90:	33 2d       	mov	r19, r3
     f92:	44 2d       	mov	r20, r4
     f94:	55 2d       	mov	r21, r5
     f96:	66 2d       	mov	r22, r6
     f98:	77 2d       	mov	r23, r7
     f9a:	88 2d       	mov	r24, r8
     f9c:	99 2d       	mov	r25, r9
     f9e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__udivdi3>
     fa2:	22 2e       	mov	r2, r18
     fa4:	33 2e       	mov	r3, r19
     fa6:	44 2e       	mov	r4, r20
     fa8:	55 2e       	mov	r5, r21
     faa:	66 2e       	mov	r6, r22
     fac:	77 2e       	mov	r7, r23
     fae:	88 2e       	mov	r8, r24
     fb0:	99 2e       	mov	r9, r25
     fb2:	a2 2c       	mov	r10, r2
     fb4:	b3 2c       	mov	r11, r3
     fb6:	c4 2c       	mov	r12, r4
     fb8:	d5 2c       	mov	r13, r5
     fba:	e6 2c       	mov	r14, r6
     fbc:	f7 2c       	mov	r15, r7
     fbe:	08 2d       	mov	r16, r8
     fc0:	19 2d       	mov	r17, r9
     fc2:	86 e9       	ldi	r24, 0x96	; 150
     fc4:	28 2e       	mov	r2, r24
     fc6:	31 2c       	mov	r3, r1
     fc8:	41 2c       	mov	r4, r1
     fca:	51 2c       	mov	r5, r1
     fcc:	61 2c       	mov	r6, r1
     fce:	71 2c       	mov	r7, r1
     fd0:	43 01       	movw	r8, r6
     fd2:	2a 2d       	mov	r18, r10
     fd4:	3b 2d       	mov	r19, r11
     fd6:	4c 2d       	mov	r20, r12
     fd8:	5d 2d       	mov	r21, r13
     fda:	6e 2d       	mov	r22, r14
     fdc:	7f 2d       	mov	r23, r15
     fde:	80 2f       	mov	r24, r16
     fe0:	91 2f       	mov	r25, r17
     fe2:	a2 2c       	mov	r10, r2
     fe4:	b3 2c       	mov	r11, r3
     fe6:	c4 2c       	mov	r12, r4
     fe8:	d5 2c       	mov	r13, r5
     fea:	e6 2c       	mov	r14, r6
     fec:	f7 2c       	mov	r15, r7
     fee:	08 2d       	mov	r16, r8
     ff0:	19 2d       	mov	r17, r9
     ff2:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__cmpdi2>
     ff6:	09 f0       	breq	.+2      	; 0xffa <Configure_Timer_Tick+0x16e>
     ff8:	10 f4       	brcc	.+4      	; 0xffe <Configure_Timer_Tick+0x172>
		return false;
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	c5 c3       	rjmp	.+1930   	; 0x1788 <Configure_Timer_Tick+0x8fc>
		Adjusted_Cycles = ((TC_CLK + (F_CLK/2))/F_CLK) * Avg_ISR_Cycles;
	} */

	// Disable the timer interrupts as the timer is being re-configured:

	uint64_t Numerator = Time * TC_CLK;
     ffe:	8a a5       	ldd	r24, Y+42	; 0x2a
    1000:	9b a5       	ldd	r25, Y+43	; 0x2b
    1002:	9c 01       	movw	r18, r24
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <TC_CLK>
    100c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <TC_CLK+0x1>
    1010:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <TC_CLK+0x2>
    1014:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <TC_CLK+0x3>
    1018:	bc 01       	movw	r22, r24
    101a:	cd 01       	movw	r24, r26
    101c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__mulsi3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9c 01       	movw	r18, r24
    1026:	ad 01       	movw	r20, r26
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	cb 01       	movw	r24, r22
    102e:	28 87       	std	Y+8, r18	; 0x08
    1030:	39 87       	std	Y+9, r19	; 0x09
    1032:	4a 87       	std	Y+10, r20	; 0x0a
    1034:	5b 87       	std	Y+11, r21	; 0x0b
    1036:	6c 87       	std	Y+12, r22	; 0x0c
    1038:	7d 87       	std	Y+13, r23	; 0x0d
    103a:	8e 87       	std	Y+14, r24	; 0x0e
    103c:	9f 87       	std	Y+15, r25	; 0x0f
	uint64_t Scaled_Ticks = Numerator / (Unit); // How many times we have to count for the requested time to have passed at the current clock frequency
    103e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1040:	9d a5       	ldd	r25, Y+45	; 0x2d
    1042:	ae a5       	ldd	r26, Y+46	; 0x2e
    1044:	bf a5       	ldd	r27, Y+47	; 0x2f
    1046:	9c 01       	movw	r18, r24
    1048:	ad 01       	movw	r20, r26
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	cb 01       	movw	r24, r22
    1050:	a2 2e       	mov	r10, r18
    1052:	b3 2e       	mov	r11, r19
    1054:	c4 2e       	mov	r12, r20
    1056:	d5 2e       	mov	r13, r21
    1058:	e6 2e       	mov	r14, r22
    105a:	f7 2e       	mov	r15, r23
    105c:	08 2f       	mov	r16, r24
    105e:	19 2f       	mov	r17, r25
    1060:	28 85       	ldd	r18, Y+8	; 0x08
    1062:	39 85       	ldd	r19, Y+9	; 0x09
    1064:	4a 85       	ldd	r20, Y+10	; 0x0a
    1066:	5b 85       	ldd	r21, Y+11	; 0x0b
    1068:	6c 85       	ldd	r22, Y+12	; 0x0c
    106a:	7d 85       	ldd	r23, Y+13	; 0x0d
    106c:	8e 85       	ldd	r24, Y+14	; 0x0e
    106e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1070:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__udivdi3>
    1074:	a2 2e       	mov	r10, r18
    1076:	b3 2e       	mov	r11, r19
    1078:	c4 2e       	mov	r12, r20
    107a:	d5 2e       	mov	r13, r21
    107c:	e6 2e       	mov	r14, r22
    107e:	f7 2e       	mov	r15, r23
    1080:	08 2f       	mov	r16, r24
    1082:	19 2f       	mov	r17, r25
    1084:	a8 8a       	std	Y+16, r10	; 0x10
    1086:	b9 8a       	std	Y+17, r11	; 0x11
    1088:	ca 8a       	std	Y+18, r12	; 0x12
    108a:	db 8a       	std	Y+19, r13	; 0x13
    108c:	ec 8a       	std	Y+20, r14	; 0x14
    108e:	fd 8a       	std	Y+21, r15	; 0x15
    1090:	0e 8b       	std	Y+22, r16	; 0x16
    1092:	1f 8b       	std	Y+23, r17	; 0x17
	
	uint16_t Prescaler = 0;
    1094:	1a 82       	std	Y+2, r1	; 0x02
    1096:	19 82       	std	Y+1, r1	; 0x01
	uint32_t Calculated_Prescaler = 0; // Ensures that OCRxA is <= (2^n - 1)
    1098:	1b 82       	std	Y+3, r1	; 0x03
    109a:	1c 82       	std	Y+4, r1	; 0x04
    109c:	1d 82       	std	Y+5, r1	; 0x05
    109e:	1e 82       	std	Y+6, r1	; 0x06
	
	switch(Timer){
    10a0:	88 a9       	ldd	r24, Y+48	; 0x30
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <Configure_Timer_Tick+0x222>
    10ac:	51 c0       	rjmp	.+162    	; 0x1150 <Configure_Timer_Tick+0x2c4>
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <Configure_Timer_Tick+0x22a>
    10b4:	96 c0       	rjmp	.+300    	; 0x11e2 <Configure_Timer_Tick+0x356>
    10b6:	89 2b       	or	r24, r25
    10b8:	09 f0       	breq	.+2      	; 0x10bc <Configure_Timer_Tick+0x230>
    10ba:	dc c0       	rjmp	.+440    	; 0x1274 <Configure_Timer_Tick+0x3e8>
		
		case _16_bit:
			
			TIMSK1 = TIMSK1 & ~(1 << OCIE1A); // Disable the timer interrupt as it is being reconfigured.
    10bc:	8f e6       	ldi	r24, 0x6F	; 111
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	2f e6       	ldi	r18, 0x6F	; 111
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	f9 01       	movw	r30, r18
    10c6:	20 81       	ld	r18, Z
    10c8:	2d 7f       	andi	r18, 0xFD	; 253
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18

			Calculated_Prescaler = (Scaled_Ticks+65534)/65535; // Ceiling function
    10ce:	28 89       	ldd	r18, Y+16	; 0x10
    10d0:	39 89       	ldd	r19, Y+17	; 0x11
    10d2:	4a 89       	ldd	r20, Y+18	; 0x12
    10d4:	5b 89       	ldd	r21, Y+19	; 0x13
    10d6:	6c 89       	ldd	r22, Y+20	; 0x14
    10d8:	7d 89       	ldd	r23, Y+21	; 0x15
    10da:	8e 89       	ldd	r24, Y+22	; 0x16
    10dc:	9f 89       	ldd	r25, Y+23	; 0x17
    10de:	22 50       	subi	r18, 0x02	; 2
    10e0:	31 09       	sbc	r19, r1
    10e2:	4f 4f       	sbci	r20, 0xFF	; 255
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
    10e6:	6f 4f       	sbci	r22, 0xFF	; 255
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	8f 4f       	sbci	r24, 0xFF	; 255
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	22 2e       	mov	r2, r18
    10f0:	33 2e       	mov	r3, r19
    10f2:	44 2e       	mov	r4, r20
    10f4:	55 2e       	mov	r5, r21
    10f6:	66 2e       	mov	r6, r22
    10f8:	77 2e       	mov	r7, r23
    10fa:	88 2e       	mov	r8, r24
    10fc:	99 2e       	mov	r9, r25
    10fe:	aa 24       	eor	r10, r10
    1100:	aa 94       	dec	r10
    1102:	bb 24       	eor	r11, r11
    1104:	ba 94       	dec	r11
    1106:	c1 2c       	mov	r12, r1
    1108:	d1 2c       	mov	r13, r1
    110a:	e1 2c       	mov	r14, r1
    110c:	f1 2c       	mov	r15, r1
    110e:	00 e0       	ldi	r16, 0x00	; 0
    1110:	10 e0       	ldi	r17, 0x00	; 0
    1112:	22 2d       	mov	r18, r2
    1114:	33 2d       	mov	r19, r3
    1116:	44 2d       	mov	r20, r4
    1118:	55 2d       	mov	r21, r5
    111a:	66 2d       	mov	r22, r6
    111c:	77 2d       	mov	r23, r7
    111e:	88 2d       	mov	r24, r8
    1120:	99 2d       	mov	r25, r9
    1122:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__udivdi3>
    1126:	a2 2e       	mov	r10, r18
    1128:	b3 2e       	mov	r11, r19
    112a:	c4 2e       	mov	r12, r20
    112c:	d5 2e       	mov	r13, r21
    112e:	e6 2e       	mov	r14, r22
    1130:	f7 2e       	mov	r15, r23
    1132:	08 2f       	mov	r16, r24
    1134:	19 2f       	mov	r17, r25
    1136:	2a 2d       	mov	r18, r10
    1138:	3b 2d       	mov	r19, r11
    113a:	4c 2d       	mov	r20, r12
    113c:	5d 2d       	mov	r21, r13
    113e:	6e 2d       	mov	r22, r14
    1140:	7f 2d       	mov	r23, r15
    1142:	80 2f       	mov	r24, r16
    1144:	91 2f       	mov	r25, r17
    1146:	2b 83       	std	Y+3, r18	; 0x03
    1148:	3c 83       	std	Y+4, r19	; 0x04
    114a:	4d 83       	std	Y+5, r20	; 0x05
    114c:	5e 83       	std	Y+6, r21	; 0x06

			break;
    114e:	94 c0       	rjmp	.+296    	; 0x1278 <Configure_Timer_Tick+0x3ec>
		
		case _8_bit1:
			
			TIMSK0 = TIMSK0 & ~(1 << OCIE0A);
    1150:	8e e6       	ldi	r24, 0x6E	; 110
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	2e e6       	ldi	r18, 0x6E	; 110
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	f9 01       	movw	r30, r18
    115a:	20 81       	ld	r18, Z
    115c:	2d 7f       	andi	r18, 0xFD	; 253
    115e:	fc 01       	movw	r30, r24
    1160:	20 83       	st	Z, r18
			
			Calculated_Prescaler = (Scaled_Ticks+254)/255;
    1162:	28 89       	ldd	r18, Y+16	; 0x10
    1164:	39 89       	ldd	r19, Y+17	; 0x11
    1166:	4a 89       	ldd	r20, Y+18	; 0x12
    1168:	5b 89       	ldd	r21, Y+19	; 0x13
    116a:	6c 89       	ldd	r22, Y+20	; 0x14
    116c:	7d 89       	ldd	r23, Y+21	; 0x15
    116e:	8e 89       	ldd	r24, Y+22	; 0x16
    1170:	9f 89       	ldd	r25, Y+23	; 0x17
    1172:	22 50       	subi	r18, 0x02	; 2
    1174:	3f 4f       	sbci	r19, 0xFF	; 255
    1176:	4f 4f       	sbci	r20, 0xFF	; 255
    1178:	5f 4f       	sbci	r21, 0xFF	; 255
    117a:	6f 4f       	sbci	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	22 2e       	mov	r2, r18
    1184:	33 2e       	mov	r3, r19
    1186:	44 2e       	mov	r4, r20
    1188:	55 2e       	mov	r5, r21
    118a:	66 2e       	mov	r6, r22
    118c:	77 2e       	mov	r7, r23
    118e:	88 2e       	mov	r8, r24
    1190:	99 2e       	mov	r9, r25
    1192:	aa 24       	eor	r10, r10
    1194:	aa 94       	dec	r10
    1196:	b1 2c       	mov	r11, r1
    1198:	c1 2c       	mov	r12, r1
    119a:	d1 2c       	mov	r13, r1
    119c:	e1 2c       	mov	r14, r1
    119e:	f1 2c       	mov	r15, r1
    11a0:	00 e0       	ldi	r16, 0x00	; 0
    11a2:	10 e0       	ldi	r17, 0x00	; 0
    11a4:	22 2d       	mov	r18, r2
    11a6:	33 2d       	mov	r19, r3
    11a8:	44 2d       	mov	r20, r4
    11aa:	55 2d       	mov	r21, r5
    11ac:	66 2d       	mov	r22, r6
    11ae:	77 2d       	mov	r23, r7
    11b0:	88 2d       	mov	r24, r8
    11b2:	99 2d       	mov	r25, r9
    11b4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__udivdi3>
    11b8:	a2 2e       	mov	r10, r18
    11ba:	b3 2e       	mov	r11, r19
    11bc:	c4 2e       	mov	r12, r20
    11be:	d5 2e       	mov	r13, r21
    11c0:	e6 2e       	mov	r14, r22
    11c2:	f7 2e       	mov	r15, r23
    11c4:	08 2f       	mov	r16, r24
    11c6:	19 2f       	mov	r17, r25
    11c8:	2a 2d       	mov	r18, r10
    11ca:	3b 2d       	mov	r19, r11
    11cc:	4c 2d       	mov	r20, r12
    11ce:	5d 2d       	mov	r21, r13
    11d0:	6e 2d       	mov	r22, r14
    11d2:	7f 2d       	mov	r23, r15
    11d4:	80 2f       	mov	r24, r16
    11d6:	91 2f       	mov	r25, r17
    11d8:	2b 83       	std	Y+3, r18	; 0x03
    11da:	3c 83       	std	Y+4, r19	; 0x04
    11dc:	4d 83       	std	Y+5, r20	; 0x05
    11de:	5e 83       	std	Y+6, r21	; 0x06
			
			break;
    11e0:	4b c0       	rjmp	.+150    	; 0x1278 <Configure_Timer_Tick+0x3ec>
			
		case _8_bit2:
			
			TIMSK2 = TIMSK2 & ~(1 << OCIE2A);
    11e2:	80 e7       	ldi	r24, 0x70	; 112
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	20 e7       	ldi	r18, 0x70	; 112
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	f9 01       	movw	r30, r18
    11ec:	20 81       	ld	r18, Z
    11ee:	2d 7f       	andi	r18, 0xFD	; 253
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18
			
			Calculated_Prescaler = (Scaled_Ticks+254)/255;
    11f4:	28 89       	ldd	r18, Y+16	; 0x10
    11f6:	39 89       	ldd	r19, Y+17	; 0x11
    11f8:	4a 89       	ldd	r20, Y+18	; 0x12
    11fa:	5b 89       	ldd	r21, Y+19	; 0x13
    11fc:	6c 89       	ldd	r22, Y+20	; 0x14
    11fe:	7d 89       	ldd	r23, Y+21	; 0x15
    1200:	8e 89       	ldd	r24, Y+22	; 0x16
    1202:	9f 89       	ldd	r25, Y+23	; 0x17
    1204:	22 50       	subi	r18, 0x02	; 2
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	4f 4f       	sbci	r20, 0xFF	; 255
    120a:	5f 4f       	sbci	r21, 0xFF	; 255
    120c:	6f 4f       	sbci	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	8f 4f       	sbci	r24, 0xFF	; 255
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	22 2e       	mov	r2, r18
    1216:	33 2e       	mov	r3, r19
    1218:	44 2e       	mov	r4, r20
    121a:	55 2e       	mov	r5, r21
    121c:	66 2e       	mov	r6, r22
    121e:	77 2e       	mov	r7, r23
    1220:	88 2e       	mov	r8, r24
    1222:	99 2e       	mov	r9, r25
    1224:	aa 24       	eor	r10, r10
    1226:	aa 94       	dec	r10
    1228:	b1 2c       	mov	r11, r1
    122a:	c1 2c       	mov	r12, r1
    122c:	d1 2c       	mov	r13, r1
    122e:	e1 2c       	mov	r14, r1
    1230:	f1 2c       	mov	r15, r1
    1232:	00 e0       	ldi	r16, 0x00	; 0
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	22 2d       	mov	r18, r2
    1238:	33 2d       	mov	r19, r3
    123a:	44 2d       	mov	r20, r4
    123c:	55 2d       	mov	r21, r5
    123e:	66 2d       	mov	r22, r6
    1240:	77 2d       	mov	r23, r7
    1242:	88 2d       	mov	r24, r8
    1244:	99 2d       	mov	r25, r9
    1246:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__udivdi3>
    124a:	a2 2e       	mov	r10, r18
    124c:	b3 2e       	mov	r11, r19
    124e:	c4 2e       	mov	r12, r20
    1250:	d5 2e       	mov	r13, r21
    1252:	e6 2e       	mov	r14, r22
    1254:	f7 2e       	mov	r15, r23
    1256:	08 2f       	mov	r16, r24
    1258:	19 2f       	mov	r17, r25
    125a:	2a 2d       	mov	r18, r10
    125c:	3b 2d       	mov	r19, r11
    125e:	4c 2d       	mov	r20, r12
    1260:	5d 2d       	mov	r21, r13
    1262:	6e 2d       	mov	r22, r14
    1264:	7f 2d       	mov	r23, r15
    1266:	80 2f       	mov	r24, r16
    1268:	91 2f       	mov	r25, r17
    126a:	2b 83       	std	Y+3, r18	; 0x03
    126c:	3c 83       	std	Y+4, r19	; 0x04
    126e:	4d 83       	std	Y+5, r20	; 0x05
    1270:	5e 83       	std	Y+6, r21	; 0x06
		
			break;
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <Configure_Timer_Tick+0x3ec>
			
		default:
		
			return false;
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	88 c2       	rjmp	.+1296   	; 0x1788 <Configure_Timer_Tick+0x8fc>
		
	}


	if(Calculated_Prescaler > 1024){  // The required count will overflow the selected timer, even with the largest available prescaler
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	ad 81       	ldd	r26, Y+5	; 0x05
    127e:	be 81       	ldd	r27, Y+6	; 0x06
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	94 40       	sbci	r25, 0x04	; 4
    1284:	a1 05       	cpc	r26, r1
    1286:	b1 05       	cpc	r27, r1
    1288:	08 f4       	brcc	.+2      	; 0x128c <Configure_Timer_Tick+0x400>
    128a:	9d c0       	rjmp	.+314    	; 0x13c6 <Configure_Timer_Tick+0x53a>

		Prescaler = 1024;
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	94 e0       	ldi	r25, 0x04	; 4
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
		//Adjusted_Cycles = (((TC_CLK + (F_CLK*Prescaler/2))/F_CLK*Prescaler) * Avg_ISR_Cycles); // I may revisit this. Quite challenging to get right, and even harder to get consistently right

		Calculated_Ticks[Timer] = (Scaled_Ticks >> 10);
    1294:	88 a9       	ldd	r24, Y+48	; 0x30
    1296:	e8 2f       	mov	r30, r24
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	28 89       	ldd	r18, Y+16	; 0x10
    129c:	39 89       	ldd	r19, Y+17	; 0x11
    129e:	4a 89       	ldd	r20, Y+18	; 0x12
    12a0:	5b 89       	ldd	r21, Y+19	; 0x13
    12a2:	6c 89       	ldd	r22, Y+20	; 0x14
    12a4:	7d 89       	ldd	r23, Y+21	; 0x15
    12a6:	8e 89       	ldd	r24, Y+22	; 0x16
    12a8:	9f 89       	ldd	r25, Y+23	; 0x17
    12aa:	0a e0       	ldi	r16, 0x0A	; 10
    12ac:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__lshrdi3>
    12b0:	a2 2e       	mov	r10, r18
    12b2:	b3 2e       	mov	r11, r19
    12b4:	c4 2e       	mov	r12, r20
    12b6:	d5 2e       	mov	r13, r21
    12b8:	e6 2e       	mov	r14, r22
    12ba:	f7 2e       	mov	r15, r23
    12bc:	08 2f       	mov	r16, r24
    12be:	19 2f       	mov	r17, r25
    12c0:	d6 01       	movw	r26, r12
    12c2:	c5 01       	movw	r24, r10
    12c4:	9f 01       	movw	r18, r30
    12c6:	22 0f       	add	r18, r18
    12c8:	33 1f       	adc	r19, r19
    12ca:	22 0f       	add	r18, r18
    12cc:	33 1f       	adc	r19, r19
    12ce:	2b 5c       	subi	r18, 0xCB	; 203
    12d0:	3e 4f       	sbci	r19, 0xFE	; 254
    12d2:	f9 01       	movw	r30, r18
    12d4:	80 83       	st	Z, r24
    12d6:	91 83       	std	Z+1, r25	; 0x01
    12d8:	a2 83       	std	Z+2, r26	; 0x02
    12da:	b3 83       	std	Z+3, r27	; 0x03
		Remaining_Ticks[Timer] = Calculated_Ticks[Timer];
    12dc:	88 a9       	ldd	r24, Y+48	; 0x30
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	88 a9       	ldd	r24, Y+48	; 0x30
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	8b 5c       	subi	r24, 0xCB	; 203
    12f2:	9e 4f       	sbci	r25, 0xFE	; 254
    12f4:	fc 01       	movw	r30, r24
    12f6:	80 81       	ld	r24, Z
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	a2 81       	ldd	r26, Z+2	; 0x02
    12fc:	b3 81       	ldd	r27, Z+3	; 0x03
    12fe:	22 0f       	add	r18, r18
    1300:	33 1f       	adc	r19, r19
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	2f 5b       	subi	r18, 0xBF	; 191
    1308:	3e 4f       	sbci	r19, 0xFE	; 254
    130a:	f9 01       	movw	r30, r18
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	a2 83       	std	Z+2, r26	; 0x02
    1312:	b3 83       	std	Z+3, r27	; 0x03
		
		switch(Timer){
    1314:	88 a9       	ldd	r24, Y+48	; 0x30
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	f9 f0       	breq	.+62     	; 0x135e <Configure_Timer_Tick+0x4d2>
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	91 05       	cpc	r25, r1
    1324:	a9 f1       	breq	.+106    	; 0x1390 <Configure_Timer_Tick+0x504>
    1326:	89 2b       	or	r24, r25
    1328:	09 f0       	breq	.+2      	; 0x132c <Configure_Timer_Tick+0x4a0>
    132a:	4b c0       	rjmp	.+150    	; 0x13c2 <Configure_Timer_Tick+0x536>
			
			case _16_bit:
				
				TCCR1B = (1 << CS12) | (1 << CS10) | (1 << WGM12); // Set prescaler to 1024, CTC mode (TCCR = Timer counter control register)
    132c:	81 e8       	ldi	r24, 0x81	; 129
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	2d e0       	ldi	r18, 0x0D	; 13
    1332:	fc 01       	movw	r30, r24
    1334:	20 83       	st	Z, r18
								
				OCR1AH = 0xFF;
    1336:	89 e8       	ldi	r24, 0x89	; 137
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	2f ef       	ldi	r18, 0xFF	; 255
    133c:	fc 01       	movw	r30, r24
    133e:	20 83       	st	Z, r18
				OCR1AL = 0xFF; // Timer begins
    1340:	88 e8       	ldi	r24, 0x88	; 136
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	2f ef       	ldi	r18, 0xFF	; 255
    1346:	fc 01       	movw	r30, r24
    1348:	20 83       	st	Z, r18
				
				TIMSK1 |= (1 << OCIE1A); // Timer/Counter1 Interrupt Mask Register -> Enabled interrupt for progrm at TIMER1_COMPA_vect to be executed on compare match
    134a:	8f e6       	ldi	r24, 0x6F	; 111
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	2f e6       	ldi	r18, 0x6F	; 111
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	f9 01       	movw	r30, r18
    1354:	20 81       	ld	r18, Z
    1356:	22 60       	ori	r18, 0x02	; 2
    1358:	fc 01       	movw	r30, r24
    135a:	20 83       	st	Z, r18
				break;
    135c:	32 c0       	rjmp	.+100    	; 0x13c2 <Configure_Timer_Tick+0x536>
			
			case _8_bit1:
				
				TCCR0A = (1 << WGM01);
    135e:	84 e4       	ldi	r24, 0x44	; 68
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	22 e0       	ldi	r18, 0x02	; 2
    1364:	fc 01       	movw	r30, r24
    1366:	20 83       	st	Z, r18
				TCCR0B = (1 << CS02) | (1 << CS00);
    1368:	85 e4       	ldi	r24, 0x45	; 69
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	25 e0       	ldi	r18, 0x05	; 5
    136e:	fc 01       	movw	r30, r24
    1370:	20 83       	st	Z, r18
				
				TIMSK0 |= (1 << OCIE0A);
    1372:	8e e6       	ldi	r24, 0x6E	; 110
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	2e e6       	ldi	r18, 0x6E	; 110
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	f9 01       	movw	r30, r18
    137c:	20 81       	ld	r18, Z
    137e:	22 60       	ori	r18, 0x02	; 2
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
				OCR0A = 0xFF;
    1384:	87 e4       	ldi	r24, 0x47	; 71
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	2f ef       	ldi	r18, 0xFF	; 255
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
				break;
    138e:	19 c0       	rjmp	.+50     	; 0x13c2 <Configure_Timer_Tick+0x536>
			
			case _8_bit2:

				TCCR2A = (1 << WGM21);
    1390:	80 eb       	ldi	r24, 0xB0	; 176
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	22 e0       	ldi	r18, 0x02	; 2
    1396:	fc 01       	movw	r30, r24
    1398:	20 83       	st	Z, r18
				TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);
    139a:	81 eb       	ldi	r24, 0xB1	; 177
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	27 e0       	ldi	r18, 0x07	; 7
    13a0:	fc 01       	movw	r30, r24
    13a2:	20 83       	st	Z, r18

				TIMSK2 |= (1 << OCIE2A);
    13a4:	80 e7       	ldi	r24, 0x70	; 112
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	20 e7       	ldi	r18, 0x70	; 112
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	f9 01       	movw	r30, r18
    13ae:	20 81       	ld	r18, Z
    13b0:	22 60       	ori	r18, 0x02	; 2
    13b2:	fc 01       	movw	r30, r24
    13b4:	20 83       	st	Z, r18
				
				OCR2A = 0xFF;
    13b6:	83 eb       	ldi	r24, 0xB3	; 179
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	2f ef       	ldi	r18, 0xFF	; 255
    13bc:	fc 01       	movw	r30, r24
    13be:	20 83       	st	Z, r18
				break;
    13c0:	00 00       	nop
			
		}
		

		return true;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	e1 c1       	rjmp	.+962    	; 0x1788 <Configure_Timer_Tick+0x8fc>
		
	}else{
		
		Calculated_Ticks[Timer] = 0;
    13c6:	88 a9       	ldd	r24, Y+48	; 0x30
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	8b 5c       	subi	r24, 0xCB	; 203
    13d6:	9e 4f       	sbci	r25, 0xFE	; 254
    13d8:	fc 01       	movw	r30, r24
    13da:	10 82       	st	Z, r1
    13dc:	11 82       	std	Z+1, r1	; 0x01
    13de:	12 82       	std	Z+2, r1	; 0x02
    13e0:	13 82       	std	Z+3, r1	; 0x03
		
		uint16_t Clock_Dividers[5] = {1, 8, 64, 256, 1024}; 
    13e2:	8a e0       	ldi	r24, 0x0A	; 10
    13e4:	e7 e0       	ldi	r30, 0x07	; 7
    13e6:	f1 e0       	ldi	r31, 0x01	; 1
    13e8:	de 01       	movw	r26, r28
    13ea:	90 96       	adiw	r26, 0x20	; 32
    13ec:	01 90       	ld	r0, Z+
    13ee:	0d 92       	st	X+, r0
    13f0:	8a 95       	dec	r24
    13f2:	e1 f7       	brne	.-8      	; 0x13ec <Configure_Timer_Tick+0x560>
		
		for(uint8_t i = 0; i <= 4; i++){  // Logic to ensure that the Raw_Count <= uint16_t
    13f4:	1f 82       	std	Y+7, r1	; 0x07
    13f6:	2e c0       	rjmp	.+92     	; 0x1454 <Configure_Timer_Tick+0x5c8>
			
			if(Clock_Dividers[i] >= Calculated_Prescaler){
    13f8:	8f 81       	ldd	r24, Y+7	; 0x07
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	9e 01       	movw	r18, r28
    1404:	2f 5f       	subi	r18, 0xFF	; 255
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	82 0f       	add	r24, r18
    140a:	93 1f       	adc	r25, r19
    140c:	4f 96       	adiw	r24, 0x1f	; 31
    140e:	fc 01       	movw	r30, r24
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	9c 01       	movw	r18, r24
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	ad 81       	ldd	r26, Y+5	; 0x05
    1420:	be 81       	ldd	r27, Y+6	; 0x06
    1422:	28 17       	cp	r18, r24
    1424:	39 07       	cpc	r19, r25
    1426:	4a 07       	cpc	r20, r26
    1428:	5b 07       	cpc	r21, r27
    142a:	88 f0       	brcs	.+34     	; 0x144e <Configure_Timer_Tick+0x5c2>
				Prescaler = Clock_Dividers[i];
    142c:	8f 81       	ldd	r24, Y+7	; 0x07
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	9e 01       	movw	r18, r28
    1438:	2f 5f       	subi	r18, 0xFF	; 255
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	82 0f       	add	r24, r18
    143e:	93 1f       	adc	r25, r19
    1440:	4f 96       	adiw	r24, 0x1f	; 31
    1442:	fc 01       	movw	r30, r24
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
				break;
    144c:	06 c0       	rjmp	.+12     	; 0x145a <Configure_Timer_Tick+0x5ce>
		
		Calculated_Ticks[Timer] = 0;
		
		uint16_t Clock_Dividers[5] = {1, 8, 64, 256, 1024}; 
		
		for(uint8_t i = 0; i <= 4; i++){  // Logic to ensure that the Raw_Count <= uint16_t
    144e:	8f 81       	ldd	r24, Y+7	; 0x07
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	8f 83       	std	Y+7, r24	; 0x07
    1454:	8f 81       	ldd	r24, Y+7	; 0x07
    1456:	85 30       	cpi	r24, 0x05	; 5
    1458:	78 f2       	brcs	.-98     	; 0x13f8 <Configure_Timer_Tick+0x56c>
			}
			
		}
	}
	
	uint32_t Denominator =  Prescaler * Unit;
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	9c 01       	movw	r18, r24
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	8c a5       	ldd	r24, Y+44	; 0x2c
    1466:	9d a5       	ldd	r25, Y+45	; 0x2d
    1468:	ae a5       	ldd	r26, Y+46	; 0x2e
    146a:	bf a5       	ldd	r27, Y+47	; 0x2f
    146c:	bc 01       	movw	r22, r24
    146e:	cd 01       	movw	r24, r26
    1470:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__mulsi3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	88 8f       	std	Y+24, r24	; 0x18
    147a:	99 8f       	std	Y+25, r25	; 0x19
    147c:	aa 8f       	std	Y+26, r26	; 0x1a
    147e:	bb 8f       	std	Y+27, r27	; 0x1b

	if(Denominator == 0) return false; // Unexpected error
    1480:	88 8d       	ldd	r24, Y+24	; 0x18
    1482:	99 8d       	ldd	r25, Y+25	; 0x19
    1484:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1486:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1488:	89 2b       	or	r24, r25
    148a:	8a 2b       	or	r24, r26
    148c:	8b 2b       	or	r24, r27
    148e:	11 f4       	brne	.+4      	; 0x1494 <Configure_Timer_Tick+0x608>
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	7a c1       	rjmp	.+756    	; 0x1788 <Configure_Timer_Tick+0x8fc>
	
	//Adjusted_Cycles = (((TC_CLK + (F_CLK*Prescaler/2))/F_CLK*Prescaler) * Avg_ISR_Cycles); 
	
	// Rounding integer division (A new trick I learned) reduces error of Timer_Top ideally to +- 0.5:
	uint32_t Timer_Top = ((Numerator + (Denominator/2)) / Denominator); 
    1494:	88 8d       	ldd	r24, Y+24	; 0x18
    1496:	99 8d       	ldd	r25, Y+25	; 0x19
    1498:	aa 8d       	ldd	r26, Y+26	; 0x1a
    149a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    149c:	b6 95       	lsr	r27
    149e:	a7 95       	ror	r26
    14a0:	97 95       	ror	r25
    14a2:	87 95       	ror	r24
    14a4:	5c 01       	movw	r10, r24
    14a6:	6d 01       	movw	r12, r26
    14a8:	e1 2c       	mov	r14, r1
    14aa:	f1 2c       	mov	r15, r1
    14ac:	87 01       	movw	r16, r14
    14ae:	2a 2d       	mov	r18, r10
    14b0:	3b 2d       	mov	r19, r11
    14b2:	4c 2d       	mov	r20, r12
    14b4:	5d 2d       	mov	r21, r13
    14b6:	6e 2d       	mov	r22, r14
    14b8:	7f 2d       	mov	r23, r15
    14ba:	80 2f       	mov	r24, r16
    14bc:	91 2f       	mov	r25, r17
    14be:	a8 84       	ldd	r10, Y+8	; 0x08
    14c0:	b9 84       	ldd	r11, Y+9	; 0x09
    14c2:	ca 84       	ldd	r12, Y+10	; 0x0a
    14c4:	db 84       	ldd	r13, Y+11	; 0x0b
    14c6:	ec 84       	ldd	r14, Y+12	; 0x0c
    14c8:	fd 84       	ldd	r15, Y+13	; 0x0d
    14ca:	0e 85       	ldd	r16, Y+14	; 0x0e
    14cc:	1f 85       	ldd	r17, Y+15	; 0x0f
    14ce:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__adddi3>
    14d2:	22 2e       	mov	r2, r18
    14d4:	33 2e       	mov	r3, r19
    14d6:	44 2e       	mov	r4, r20
    14d8:	55 2e       	mov	r5, r21
    14da:	66 2e       	mov	r6, r22
    14dc:	77 2e       	mov	r7, r23
    14de:	88 2e       	mov	r8, r24
    14e0:	99 2e       	mov	r9, r25
    14e2:	88 8d       	ldd	r24, Y+24	; 0x18
    14e4:	99 8d       	ldd	r25, Y+25	; 0x19
    14e6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    14e8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    14ea:	9c 01       	movw	r18, r24
    14ec:	ad 01       	movw	r20, r26
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	cb 01       	movw	r24, r22
    14f4:	a2 2e       	mov	r10, r18
    14f6:	b3 2e       	mov	r11, r19
    14f8:	c4 2e       	mov	r12, r20
    14fa:	d5 2e       	mov	r13, r21
    14fc:	e6 2e       	mov	r14, r22
    14fe:	f7 2e       	mov	r15, r23
    1500:	08 2f       	mov	r16, r24
    1502:	19 2f       	mov	r17, r25
    1504:	22 2d       	mov	r18, r2
    1506:	33 2d       	mov	r19, r3
    1508:	44 2d       	mov	r20, r4
    150a:	55 2d       	mov	r21, r5
    150c:	66 2d       	mov	r22, r6
    150e:	77 2d       	mov	r23, r7
    1510:	88 2d       	mov	r24, r8
    1512:	99 2d       	mov	r25, r9
    1514:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__udivdi3>
    1518:	a2 2e       	mov	r10, r18
    151a:	b3 2e       	mov	r11, r19
    151c:	c4 2e       	mov	r12, r20
    151e:	d5 2e       	mov	r13, r21
    1520:	e6 2e       	mov	r14, r22
    1522:	f7 2e       	mov	r15, r23
    1524:	08 2f       	mov	r16, r24
    1526:	19 2f       	mov	r17, r25
    1528:	2a 2d       	mov	r18, r10
    152a:	3b 2d       	mov	r19, r11
    152c:	4c 2d       	mov	r20, r12
    152e:	5d 2d       	mov	r21, r13
    1530:	6e 2d       	mov	r22, r14
    1532:	7f 2d       	mov	r23, r15
    1534:	80 2f       	mov	r24, r16
    1536:	91 2f       	mov	r25, r17
    1538:	2c 8f       	std	Y+28, r18	; 0x1c
    153a:	3d 8f       	std	Y+29, r19	; 0x1d
    153c:	4e 8f       	std	Y+30, r20	; 0x1e
    153e:	5f 8f       	std	Y+31, r21	; 0x1f
	
	if (Timer_Top == 0) return false; //Unexpected error
    1540:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1542:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1544:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1546:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1548:	89 2b       	or	r24, r25
    154a:	8a 2b       	or	r24, r26
    154c:	8b 2b       	or	r24, r27
    154e:	11 f4       	brne	.+4      	; 0x1554 <Configure_Timer_Tick+0x6c8>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	1a c1       	rjmp	.+564    	; 0x1788 <Configure_Timer_Tick+0x8fc>

	if( (Timer == _8_bit1 || Timer == _8_bit2) && Timer_Top > 255 ){
    1554:	88 a9       	ldd	r24, Y+48	; 0x30
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	19 f0       	breq	.+6      	; 0x1560 <Configure_Timer_Tick+0x6d4>
    155a:	88 a9       	ldd	r24, Y+48	; 0x30
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	61 f4       	brne	.+24     	; 0x1578 <Configure_Timer_Tick+0x6ec>
    1560:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1562:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1564:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1566:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1568:	8f 3f       	cpi	r24, 0xFF	; 255
    156a:	91 05       	cpc	r25, r1
    156c:	a1 05       	cpc	r26, r1
    156e:	b1 05       	cpc	r27, r1
    1570:	19 f0       	breq	.+6      	; 0x1578 <Configure_Timer_Tick+0x6ec>
    1572:	10 f0       	brcs	.+4      	; 0x1578 <Configure_Timer_Tick+0x6ec>
		return false; // Unexpected error
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	08 c1       	rjmp	.+528    	; 0x1788 <Configure_Timer_Tick+0x8fc>
	}else if(Timer == _16_bit && Timer_Top > 65535){
    1578:	88 a9       	ldd	r24, Y+48	; 0x30
    157a:	88 23       	and	r24, r24
    157c:	51 f4       	brne	.+20     	; 0x1592 <Configure_Timer_Tick+0x706>
    157e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1580:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1582:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1584:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	a1 40       	sbci	r26, 0x01	; 1
    158a:	b1 05       	cpc	r27, r1
    158c:	10 f0       	brcs	.+4      	; 0x1592 <Configure_Timer_Tick+0x706>
		return false;
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	fb c0       	rjmp	.+502    	; 0x1788 <Configure_Timer_Tick+0x8fc>
	}
	
	switch(Timer){
    1592:	88 a9       	ldd	r24, Y+48	; 0x30
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <Configure_Timer_Tick+0x714>
    159e:	5f c0       	rjmp	.+190    	; 0x165e <Configure_Timer_Tick+0x7d2>
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <Configure_Timer_Tick+0x71c>
    15a6:	a7 c0       	rjmp	.+334    	; 0x16f6 <Configure_Timer_Tick+0x86a>
    15a8:	89 2b       	or	r24, r25
    15aa:	09 f0       	breq	.+2      	; 0x15ae <Configure_Timer_Tick+0x722>
    15ac:	ec c0       	rjmp	.+472    	; 0x1786 <Configure_Timer_Tick+0x8fa>
		
		case _16_bit:
			
			switch(Prescaler){ // Don't need to clear TCCRxB, as it will be assigned:
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	9a 81       	ldd	r25, Y+2	; 0x02
    15b2:	80 34       	cpi	r24, 0x40	; 64
    15b4:	91 05       	cpc	r25, r1
    15b6:	e9 f0       	breq	.+58     	; 0x15f2 <Configure_Timer_Tick+0x766>
    15b8:	81 34       	cpi	r24, 0x41	; 65
    15ba:	91 05       	cpc	r25, r1
    15bc:	30 f4       	brcc	.+12     	; 0x15ca <Configure_Timer_Tick+0x73e>
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	59 f0       	breq	.+22     	; 0x15da <Configure_Timer_Tick+0x74e>
    15c4:	08 97       	sbiw	r24, 0x08	; 8
    15c6:	79 f0       	breq	.+30     	; 0x15e6 <Configure_Timer_Tick+0x75a>
    15c8:	26 c0       	rjmp	.+76     	; 0x1616 <Configure_Timer_Tick+0x78a>
    15ca:	81 15       	cp	r24, r1
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    15ce:	92 07       	cpc	r25, r18
    15d0:	b1 f0       	breq	.+44     	; 0x15fe <Configure_Timer_Tick+0x772>
    15d2:	81 15       	cp	r24, r1
    15d4:	94 40       	sbci	r25, 0x04	; 4
    15d6:	c9 f0       	breq	.+50     	; 0x160a <Configure_Timer_Tick+0x77e>
    15d8:	1e c0       	rjmp	.+60     	; 0x1616 <Configure_Timer_Tick+0x78a>
					
				case 1:
				
					TCCR1B = (1 << CS10);
    15da:	81 e8       	ldi	r24, 0x81	; 129
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 83       	st	Z, r18
					break;
    15e4:	18 c0       	rjmp	.+48     	; 0x1616 <Configure_Timer_Tick+0x78a>
					
				case 8:
				
					TCCR1B = (1 << CS11);
    15e6:	81 e8       	ldi	r24, 0x81	; 129
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	22 e0       	ldi	r18, 0x02	; 2
    15ec:	fc 01       	movw	r30, r24
    15ee:	20 83       	st	Z, r18
					break;
    15f0:	12 c0       	rjmp	.+36     	; 0x1616 <Configure_Timer_Tick+0x78a>
					
				case 64:
				
					TCCR1B = (1 << CS11) | (1 << CS10);
    15f2:	81 e8       	ldi	r24, 0x81	; 129
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	23 e0       	ldi	r18, 0x03	; 3
    15f8:	fc 01       	movw	r30, r24
    15fa:	20 83       	st	Z, r18
					break;
    15fc:	0c c0       	rjmp	.+24     	; 0x1616 <Configure_Timer_Tick+0x78a>
					
				case 256:
				
					TCCR1B = (1 << CS12);
    15fe:	81 e8       	ldi	r24, 0x81	; 129
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	24 e0       	ldi	r18, 0x04	; 4
    1604:	fc 01       	movw	r30, r24
    1606:	20 83       	st	Z, r18
					break;
    1608:	06 c0       	rjmp	.+12     	; 0x1616 <Configure_Timer_Tick+0x78a>
					
				case 1024:
				
					TCCR1B = (1 << CS12) | (1 << CS10);
    160a:	81 e8       	ldi	r24, 0x81	; 129
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	25 e0       	ldi	r18, 0x05	; 5
    1610:	fc 01       	movw	r30, r24
    1612:	20 83       	st	Z, r18
					break;
    1614:	00 00       	nop
					
				}
				
			TCCR1B |= (1 << WGM12); 
    1616:	81 e8       	ldi	r24, 0x81	; 129
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	21 e8       	ldi	r18, 0x81	; 129
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	f9 01       	movw	r30, r18
    1620:	20 81       	ld	r18, Z
    1622:	28 60       	ori	r18, 0x08	; 8
    1624:	fc 01       	movw	r30, r24
    1626:	20 83       	st	Z, r18
			
			OCR1AH = (Timer_Top >> 8) & 0xFF;
    1628:	29 e8       	ldi	r18, 0x89	; 137
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    162e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1630:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1632:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1634:	89 2f       	mov	r24, r25
    1636:	9a 2f       	mov	r25, r26
    1638:	ab 2f       	mov	r26, r27
    163a:	bb 27       	eor	r27, r27
    163c:	f9 01       	movw	r30, r18
    163e:	80 83       	st	Z, r24
			TIMSK1 |= (1 << OCIE1A); // Timer/Counter1 Interrupt Mask Register -> Enabled interrupt for progrm at TIMER1_COMPA_vect to be executed on compare match
    1640:	8f e6       	ldi	r24, 0x6F	; 111
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	2f e6       	ldi	r18, 0x6F	; 111
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	f9 01       	movw	r30, r18
    164a:	20 81       	ld	r18, Z
    164c:	22 60       	ori	r18, 0x02	; 2
    164e:	fc 01       	movw	r30, r24
    1650:	20 83       	st	Z, r18
			OCR1AL = (Timer_Top & 0xFF); // Timer begins
    1652:	88 e8       	ldi	r24, 0x88	; 136
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1658:	fc 01       	movw	r30, r24
    165a:	20 83       	st	Z, r18
				
			break;
    165c:	94 c0       	rjmp	.+296    	; 0x1786 <Configure_Timer_Tick+0x8fa>
			
		case _8_bit1:
		
			switch(Prescaler){ 
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	80 34       	cpi	r24, 0x40	; 64
    1664:	91 05       	cpc	r25, r1
    1666:	e9 f0       	breq	.+58     	; 0x16a2 <Configure_Timer_Tick+0x816>
    1668:	81 34       	cpi	r24, 0x41	; 65
    166a:	91 05       	cpc	r25, r1
    166c:	30 f4       	brcc	.+12     	; 0x167a <Configure_Timer_Tick+0x7ee>
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	59 f0       	breq	.+22     	; 0x168a <Configure_Timer_Tick+0x7fe>
    1674:	08 97       	sbiw	r24, 0x08	; 8
    1676:	79 f0       	breq	.+30     	; 0x1696 <Configure_Timer_Tick+0x80a>
    1678:	26 c0       	rjmp	.+76     	; 0x16c6 <Configure_Timer_Tick+0x83a>
    167a:	81 15       	cp	r24, r1
    167c:	f1 e0       	ldi	r31, 0x01	; 1
    167e:	9f 07       	cpc	r25, r31
    1680:	b1 f0       	breq	.+44     	; 0x16ae <Configure_Timer_Tick+0x822>
    1682:	81 15       	cp	r24, r1
    1684:	94 40       	sbci	r25, 0x04	; 4
    1686:	c9 f0       	breq	.+50     	; 0x16ba <Configure_Timer_Tick+0x82e>
    1688:	1e c0       	rjmp	.+60     	; 0x16c6 <Configure_Timer_Tick+0x83a>
				
				case 1:
				
					TCCR0B = (1 << CS00);
    168a:	85 e4       	ldi	r24, 0x45	; 69
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	21 e0       	ldi	r18, 0x01	; 1
    1690:	fc 01       	movw	r30, r24
    1692:	20 83       	st	Z, r18
					break;
    1694:	18 c0       	rjmp	.+48     	; 0x16c6 <Configure_Timer_Tick+0x83a>
				
				case 8:
				
					TCCR0B = (1 << CS01);
    1696:	85 e4       	ldi	r24, 0x45	; 69
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	22 e0       	ldi	r18, 0x02	; 2
    169c:	fc 01       	movw	r30, r24
    169e:	20 83       	st	Z, r18
					break;
    16a0:	12 c0       	rjmp	.+36     	; 0x16c6 <Configure_Timer_Tick+0x83a>
				
				case 64:
				
					TCCR0B = (1 << CS01) | (1 << CS00);
    16a2:	85 e4       	ldi	r24, 0x45	; 69
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	23 e0       	ldi	r18, 0x03	; 3
    16a8:	fc 01       	movw	r30, r24
    16aa:	20 83       	st	Z, r18
					break;
    16ac:	0c c0       	rjmp	.+24     	; 0x16c6 <Configure_Timer_Tick+0x83a>
				
				case 256:
					
					TCCR0B = (1 << CS02);
    16ae:	85 e4       	ldi	r24, 0x45	; 69
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	24 e0       	ldi	r18, 0x04	; 4
    16b4:	fc 01       	movw	r30, r24
    16b6:	20 83       	st	Z, r18
					break;
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <Configure_Timer_Tick+0x83a>
				
				case 1024:
				
					TCCR0B = (1 << CS02) | (1 << CS00);
    16ba:	85 e4       	ldi	r24, 0x45	; 69
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	25 e0       	ldi	r18, 0x05	; 5
    16c0:	fc 01       	movw	r30, r24
    16c2:	20 83       	st	Z, r18
					break;
    16c4:	00 00       	nop
				
			}
			

			TCCR0A |= (1 << WGM01); 	
    16c6:	84 e4       	ldi	r24, 0x44	; 68
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	24 e4       	ldi	r18, 0x44	; 68
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	f9 01       	movw	r30, r18
    16d0:	20 81       	ld	r18, Z
    16d2:	22 60       	ori	r18, 0x02	; 2
    16d4:	fc 01       	movw	r30, r24
    16d6:	20 83       	st	Z, r18
						
			TIMSK0 |= (1 << OCIE0A);
    16d8:	8e e6       	ldi	r24, 0x6E	; 110
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	2e e6       	ldi	r18, 0x6E	; 110
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	f9 01       	movw	r30, r18
    16e2:	20 81       	ld	r18, Z
    16e4:	22 60       	ori	r18, 0x02	; 2
    16e6:	fc 01       	movw	r30, r24
    16e8:	20 83       	st	Z, r18
			OCR0A = Timer_Top;		
    16ea:	87 e4       	ldi	r24, 0x47	; 71
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	2c 8d       	ldd	r18, Y+28	; 0x1c
    16f0:	fc 01       	movw	r30, r24
    16f2:	20 83       	st	Z, r18
		
			break;
    16f4:	48 c0       	rjmp	.+144    	; 0x1786 <Configure_Timer_Tick+0x8fa>
			
		case _8_bit2:

			switch(Prescaler){
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	80 34       	cpi	r24, 0x40	; 64
    16fc:	91 05       	cpc	r25, r1
    16fe:	e9 f0       	breq	.+58     	; 0x173a <Configure_Timer_Tick+0x8ae>
    1700:	81 34       	cpi	r24, 0x41	; 65
    1702:	91 05       	cpc	r25, r1
    1704:	30 f4       	brcc	.+12     	; 0x1712 <Configure_Timer_Tick+0x886>
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	91 05       	cpc	r25, r1
    170a:	59 f0       	breq	.+22     	; 0x1722 <Configure_Timer_Tick+0x896>
    170c:	08 97       	sbiw	r24, 0x08	; 8
    170e:	79 f0       	breq	.+30     	; 0x172e <Configure_Timer_Tick+0x8a2>
    1710:	26 c0       	rjmp	.+76     	; 0x175e <Configure_Timer_Tick+0x8d2>
    1712:	81 15       	cp	r24, r1
    1714:	f1 e0       	ldi	r31, 0x01	; 1
    1716:	9f 07       	cpc	r25, r31
    1718:	b1 f0       	breq	.+44     	; 0x1746 <Configure_Timer_Tick+0x8ba>
    171a:	81 15       	cp	r24, r1
    171c:	94 40       	sbci	r25, 0x04	; 4
    171e:	c9 f0       	breq	.+50     	; 0x1752 <Configure_Timer_Tick+0x8c6>
    1720:	1e c0       	rjmp	.+60     	; 0x175e <Configure_Timer_Tick+0x8d2>
			
				case 1:
			
				TCCR2B = (1 << CS20);
    1722:	81 eb       	ldi	r24, 0xB1	; 177
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	21 e0       	ldi	r18, 0x01	; 1
    1728:	fc 01       	movw	r30, r24
    172a:	20 83       	st	Z, r18
				break;
    172c:	18 c0       	rjmp	.+48     	; 0x175e <Configure_Timer_Tick+0x8d2>
			
				case 8:
			
				TCCR2B = (1 << CS21);
    172e:	81 eb       	ldi	r24, 0xB1	; 177
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	22 e0       	ldi	r18, 0x02	; 2
    1734:	fc 01       	movw	r30, r24
    1736:	20 83       	st	Z, r18
				break;
    1738:	12 c0       	rjmp	.+36     	; 0x175e <Configure_Timer_Tick+0x8d2>
			
				case 64:
			
				TCCR2B = (1 << CS22);
    173a:	81 eb       	ldi	r24, 0xB1	; 177
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	24 e0       	ldi	r18, 0x04	; 4
    1740:	fc 01       	movw	r30, r24
    1742:	20 83       	st	Z, r18
				break;
    1744:	0c c0       	rjmp	.+24     	; 0x175e <Configure_Timer_Tick+0x8d2>
			
				case 256:
			
				TCCR2B = (1 << CS22) |  (1<<CS21);
    1746:	81 eb       	ldi	r24, 0xB1	; 177
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	26 e0       	ldi	r18, 0x06	; 6
    174c:	fc 01       	movw	r30, r24
    174e:	20 83       	st	Z, r18
				break;
    1750:	06 c0       	rjmp	.+12     	; 0x175e <Configure_Timer_Tick+0x8d2>
			
				case 1024:
			
				TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);
    1752:	81 eb       	ldi	r24, 0xB1	; 177
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	27 e0       	ldi	r18, 0x07	; 7
    1758:	fc 01       	movw	r30, r24
    175a:	20 83       	st	Z, r18
				break;
    175c:	00 00       	nop
			
			}
			
			TCCR2A = (1 << WGM21);		
    175e:	80 eb       	ldi	r24, 0xB0	; 176
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	22 e0       	ldi	r18, 0x02	; 2
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18
				
			TIMSK2 |= (1 << OCIE2A);
    1768:	80 e7       	ldi	r24, 0x70	; 112
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	20 e7       	ldi	r18, 0x70	; 112
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	f9 01       	movw	r30, r18
    1772:	20 81       	ld	r18, Z
    1774:	22 60       	ori	r18, 0x02	; 2
    1776:	fc 01       	movw	r30, r24
    1778:	20 83       	st	Z, r18
			OCR2A = Timer_Top; 
    177a:	83 eb       	ldi	r24, 0xB3	; 179
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
		
			break;
    1784:	00 00       	nop
				
	}
	
	return true;
    1786:	81 e0       	ldi	r24, 0x01	; 1

}
    1788:	e0 96       	adiw	r28, 0x30	; 48
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	df 90       	pop	r13
    17a2:	cf 90       	pop	r12
    17a4:	bf 90       	pop	r11
    17a6:	af 90       	pop	r10
    17a8:	9f 90       	pop	r9
    17aa:	8f 90       	pop	r8
    17ac:	7f 90       	pop	r7
    17ae:	6f 90       	pop	r6
    17b0:	5f 90       	pop	r5
    17b2:	4f 90       	pop	r4
    17b4:	3f 90       	pop	r3
    17b6:	2f 90       	pop	r2
    17b8:	08 95       	ret

000017ba <__mulsi3>:
    17ba:	db 01       	movw	r26, r22
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__muluhisi3>
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	a2 9f       	mul	r26, r18
    17ca:	80 0d       	add	r24, r0
    17cc:	91 1d       	adc	r25, r1
    17ce:	a3 9f       	mul	r26, r19
    17d0:	90 0d       	add	r25, r0
    17d2:	b2 9f       	mul	r27, r18
    17d4:	90 0d       	add	r25, r0
    17d6:	11 24       	eor	r1, r1
    17d8:	08 95       	ret

000017da <__tablejump2__>:
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	05 90       	lpm	r0, Z+
    17e0:	f4 91       	lpm	r31, Z
    17e2:	e0 2d       	mov	r30, r0
    17e4:	09 94       	ijmp

000017e6 <__muluhisi3>:
    17e6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__umulhisi3>
    17ea:	a5 9f       	mul	r26, r21
    17ec:	90 0d       	add	r25, r0
    17ee:	b4 9f       	mul	r27, r20
    17f0:	90 0d       	add	r25, r0
    17f2:	a4 9f       	mul	r26, r20
    17f4:	80 0d       	add	r24, r0
    17f6:	91 1d       	adc	r25, r1
    17f8:	11 24       	eor	r1, r1
    17fa:	08 95       	ret

000017fc <__muldi3>:
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	1f 93       	push	r17
    1802:	0f 93       	push	r16
    1804:	9a 9d       	mul	r25, r10
    1806:	f0 2d       	mov	r31, r0
    1808:	21 9f       	mul	r18, r17
    180a:	f0 0d       	add	r31, r0
    180c:	8b 9d       	mul	r24, r11
    180e:	f0 0d       	add	r31, r0
    1810:	8a 9d       	mul	r24, r10
    1812:	e0 2d       	mov	r30, r0
    1814:	f1 0d       	add	r31, r1
    1816:	03 9f       	mul	r16, r19
    1818:	f0 0d       	add	r31, r0
    181a:	02 9f       	mul	r16, r18
    181c:	e0 0d       	add	r30, r0
    181e:	f1 1d       	adc	r31, r1
    1820:	4e 9d       	mul	r20, r14
    1822:	e0 0d       	add	r30, r0
    1824:	f1 1d       	adc	r31, r1
    1826:	5e 9d       	mul	r21, r14
    1828:	f0 0d       	add	r31, r0
    182a:	4f 9d       	mul	r20, r15
    182c:	f0 0d       	add	r31, r0
    182e:	7f 93       	push	r23
    1830:	6f 93       	push	r22
    1832:	bf 92       	push	r11
    1834:	af 92       	push	r10
    1836:	5f 93       	push	r21
    1838:	4f 93       	push	r20
    183a:	d5 01       	movw	r26, r10
    183c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__umulhisi3>
    1840:	8b 01       	movw	r16, r22
    1842:	ac 01       	movw	r20, r24
    1844:	d7 01       	movw	r26, r14
    1846:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__umulhisi3>
    184a:	eb 01       	movw	r28, r22
    184c:	e8 0f       	add	r30, r24
    184e:	f9 1f       	adc	r31, r25
    1850:	d6 01       	movw	r26, r12
    1852:	0e 94 4e 0c 	call	0x189c	; 0x189c <__muldi3_6>
    1856:	2f 91       	pop	r18
    1858:	3f 91       	pop	r19
    185a:	d6 01       	movw	r26, r12
    185c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__umulhisi3>
    1860:	c6 0f       	add	r28, r22
    1862:	d7 1f       	adc	r29, r23
    1864:	e8 1f       	adc	r30, r24
    1866:	f9 1f       	adc	r31, r25
    1868:	af 91       	pop	r26
    186a:	bf 91       	pop	r27
    186c:	0e 94 4e 0c 	call	0x189c	; 0x189c <__muldi3_6>
    1870:	2f 91       	pop	r18
    1872:	3f 91       	pop	r19
    1874:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__umulhisi3>
    1878:	c6 0f       	add	r28, r22
    187a:	d7 1f       	adc	r29, r23
    187c:	e8 1f       	adc	r30, r24
    187e:	f9 1f       	adc	r31, r25
    1880:	d6 01       	movw	r26, r12
    1882:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__umulhisi3>
    1886:	e6 0f       	add	r30, r22
    1888:	f7 1f       	adc	r31, r23
    188a:	98 01       	movw	r18, r16
    188c:	be 01       	movw	r22, r28
    188e:	cf 01       	movw	r24, r30
    1890:	11 24       	eor	r1, r1
    1892:	0f 91       	pop	r16
    1894:	1f 91       	pop	r17
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <__muldi3_6>:
    189c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__umulhisi3>
    18a0:	46 0f       	add	r20, r22
    18a2:	57 1f       	adc	r21, r23
    18a4:	c8 1f       	adc	r28, r24
    18a6:	d9 1f       	adc	r29, r25
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <__muldi3_6+0x10>
    18aa:	31 96       	adiw	r30, 0x01	; 1
    18ac:	08 95       	ret

000018ae <__umoddi3>:
    18ae:	68 94       	set
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <__udivdi3_umoddi3>

000018b2 <__udivdi3>:
    18b2:	e8 94       	clt

000018b4 <__udivdi3_umoddi3>:
    18b4:	8f 92       	push	r8
    18b6:	9f 92       	push	r9
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__udivmod64>
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	9f 90       	pop	r9
    18c6:	8f 90       	pop	r8
    18c8:	08 95       	ret

000018ca <__udivmod64>:
    18ca:	88 24       	eor	r8, r8
    18cc:	99 24       	eor	r9, r9
    18ce:	f4 01       	movw	r30, r8
    18d0:	e4 01       	movw	r28, r8
    18d2:	b0 e4       	ldi	r27, 0x40	; 64
    18d4:	9f 93       	push	r25
    18d6:	aa 27       	eor	r26, r26
    18d8:	9a 15       	cp	r25, r10
    18da:	8b 04       	cpc	r8, r11
    18dc:	9c 04       	cpc	r9, r12
    18de:	ed 05       	cpc	r30, r13
    18e0:	fe 05       	cpc	r31, r14
    18e2:	cf 05       	cpc	r28, r15
    18e4:	d0 07       	cpc	r29, r16
    18e6:	a1 07       	cpc	r26, r17
    18e8:	98 f4       	brcc	.+38     	; 0x1910 <__udivmod64+0x46>
    18ea:	ad 2f       	mov	r26, r29
    18ec:	dc 2f       	mov	r29, r28
    18ee:	cf 2f       	mov	r28, r31
    18f0:	fe 2f       	mov	r31, r30
    18f2:	e9 2d       	mov	r30, r9
    18f4:	98 2c       	mov	r9, r8
    18f6:	89 2e       	mov	r8, r25
    18f8:	98 2f       	mov	r25, r24
    18fa:	87 2f       	mov	r24, r23
    18fc:	76 2f       	mov	r23, r22
    18fe:	65 2f       	mov	r22, r21
    1900:	54 2f       	mov	r21, r20
    1902:	43 2f       	mov	r20, r19
    1904:	32 2f       	mov	r19, r18
    1906:	22 27       	eor	r18, r18
    1908:	b8 50       	subi	r27, 0x08	; 8
    190a:	31 f7       	brne	.-52     	; 0x18d8 <__udivmod64+0xe>
    190c:	bf 91       	pop	r27
    190e:	27 c0       	rjmp	.+78     	; 0x195e <__udivmod64+0x94>
    1910:	1b 2e       	mov	r1, r27
    1912:	bf 91       	pop	r27
    1914:	bb 27       	eor	r27, r27
    1916:	22 0f       	add	r18, r18
    1918:	33 1f       	adc	r19, r19
    191a:	44 1f       	adc	r20, r20
    191c:	55 1f       	adc	r21, r21
    191e:	66 1f       	adc	r22, r22
    1920:	77 1f       	adc	r23, r23
    1922:	88 1f       	adc	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	88 1c       	adc	r8, r8
    1928:	99 1c       	adc	r9, r9
    192a:	ee 1f       	adc	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	cc 1f       	adc	r28, r28
    1930:	dd 1f       	adc	r29, r29
    1932:	aa 1f       	adc	r26, r26
    1934:	bb 1f       	adc	r27, r27
    1936:	8a 14       	cp	r8, r10
    1938:	9b 04       	cpc	r9, r11
    193a:	ec 05       	cpc	r30, r12
    193c:	fd 05       	cpc	r31, r13
    193e:	ce 05       	cpc	r28, r14
    1940:	df 05       	cpc	r29, r15
    1942:	a0 07       	cpc	r26, r16
    1944:	b1 07       	cpc	r27, r17
    1946:	48 f0       	brcs	.+18     	; 0x195a <__udivmod64+0x90>
    1948:	8a 18       	sub	r8, r10
    194a:	9b 08       	sbc	r9, r11
    194c:	ec 09       	sbc	r30, r12
    194e:	fd 09       	sbc	r31, r13
    1950:	ce 09       	sbc	r28, r14
    1952:	df 09       	sbc	r29, r15
    1954:	a0 0b       	sbc	r26, r16
    1956:	b1 0b       	sbc	r27, r17
    1958:	21 60       	ori	r18, 0x01	; 1
    195a:	1a 94       	dec	r1
    195c:	e1 f6       	brne	.-72     	; 0x1916 <__udivmod64+0x4c>
    195e:	2e f4       	brtc	.+10     	; 0x196a <__udivmod64+0xa0>
    1960:	94 01       	movw	r18, r8
    1962:	af 01       	movw	r20, r30
    1964:	be 01       	movw	r22, r28
    1966:	cd 01       	movw	r24, r26
    1968:	00 0c       	add	r0, r0
    196a:	08 95       	ret

0000196c <__ashrdi3>:
    196c:	97 fb       	bst	r25, 7
    196e:	10 f8       	bld	r1, 0

00001970 <__lshrdi3>:
    1970:	16 94       	lsr	r1
    1972:	00 08       	sbc	r0, r0
    1974:	0f 93       	push	r16
    1976:	08 30       	cpi	r16, 0x08	; 8
    1978:	98 f0       	brcs	.+38     	; 0x19a0 <__lshrdi3+0x30>
    197a:	08 50       	subi	r16, 0x08	; 8
    197c:	23 2f       	mov	r18, r19
    197e:	34 2f       	mov	r19, r20
    1980:	45 2f       	mov	r20, r21
    1982:	56 2f       	mov	r21, r22
    1984:	67 2f       	mov	r22, r23
    1986:	78 2f       	mov	r23, r24
    1988:	89 2f       	mov	r24, r25
    198a:	90 2d       	mov	r25, r0
    198c:	f4 cf       	rjmp	.-24     	; 0x1976 <__lshrdi3+0x6>
    198e:	05 94       	asr	r0
    1990:	97 95       	ror	r25
    1992:	87 95       	ror	r24
    1994:	77 95       	ror	r23
    1996:	67 95       	ror	r22
    1998:	57 95       	ror	r21
    199a:	47 95       	ror	r20
    199c:	37 95       	ror	r19
    199e:	27 95       	ror	r18
    19a0:	0a 95       	dec	r16
    19a2:	aa f7       	brpl	.-22     	; 0x198e <__lshrdi3+0x1e>
    19a4:	0f 91       	pop	r16
    19a6:	08 95       	ret

000019a8 <__adddi3>:
    19a8:	2a 0d       	add	r18, r10
    19aa:	3b 1d       	adc	r19, r11
    19ac:	4c 1d       	adc	r20, r12
    19ae:	5d 1d       	adc	r21, r13
    19b0:	6e 1d       	adc	r22, r14
    19b2:	7f 1d       	adc	r23, r15
    19b4:	80 1f       	adc	r24, r16
    19b6:	91 1f       	adc	r25, r17
    19b8:	08 95       	ret

000019ba <__adddi3_s8>:
    19ba:	00 24       	eor	r0, r0
    19bc:	a7 fd       	sbrc	r26, 7
    19be:	00 94       	com	r0
    19c0:	2a 0f       	add	r18, r26
    19c2:	30 1d       	adc	r19, r0
    19c4:	40 1d       	adc	r20, r0
    19c6:	50 1d       	adc	r21, r0
    19c8:	60 1d       	adc	r22, r0
    19ca:	70 1d       	adc	r23, r0
    19cc:	80 1d       	adc	r24, r0
    19ce:	90 1d       	adc	r25, r0
    19d0:	08 95       	ret

000019d2 <__cmpdi2>:
    19d2:	2a 15       	cp	r18, r10
    19d4:	3b 05       	cpc	r19, r11
    19d6:	4c 05       	cpc	r20, r12
    19d8:	5d 05       	cpc	r21, r13
    19da:	6e 05       	cpc	r22, r14
    19dc:	7f 05       	cpc	r23, r15
    19de:	80 07       	cpc	r24, r16
    19e0:	91 07       	cpc	r25, r17
    19e2:	08 95       	ret

000019e4 <__umulhisi3>:
    19e4:	a2 9f       	mul	r26, r18
    19e6:	b0 01       	movw	r22, r0
    19e8:	b3 9f       	mul	r27, r19
    19ea:	c0 01       	movw	r24, r0
    19ec:	a3 9f       	mul	r26, r19
    19ee:	70 0d       	add	r23, r0
    19f0:	81 1d       	adc	r24, r1
    19f2:	11 24       	eor	r1, r1
    19f4:	91 1d       	adc	r25, r1
    19f6:	b2 9f       	mul	r27, r18
    19f8:	70 0d       	add	r23, r0
    19fa:	81 1d       	adc	r24, r1
    19fc:	11 24       	eor	r1, r1
    19fe:	91 1d       	adc	r25, r1
    1a00:	08 95       	ret

00001a02 <malloc>:
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	10 f4       	brcc	.+4      	; 0x1a14 <malloc+0x12>
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <__flp>
    1a18:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <__flp+0x1>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	a0 e0       	ldi	r26, 0x00	; 0
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	30 97       	sbiw	r30, 0x00	; 0
    1a26:	19 f1       	breq	.+70     	; 0x1a6e <malloc+0x6c>
    1a28:	40 81       	ld	r20, Z
    1a2a:	51 81       	ldd	r21, Z+1	; 0x01
    1a2c:	02 81       	ldd	r16, Z+2	; 0x02
    1a2e:	13 81       	ldd	r17, Z+3	; 0x03
    1a30:	48 17       	cp	r20, r24
    1a32:	59 07       	cpc	r21, r25
    1a34:	c8 f0       	brcs	.+50     	; 0x1a68 <malloc+0x66>
    1a36:	84 17       	cp	r24, r20
    1a38:	95 07       	cpc	r25, r21
    1a3a:	69 f4       	brne	.+26     	; 0x1a56 <malloc+0x54>
    1a3c:	10 97       	sbiw	r26, 0x00	; 0
    1a3e:	31 f0       	breq	.+12     	; 0x1a4c <malloc+0x4a>
    1a40:	12 96       	adiw	r26, 0x02	; 2
    1a42:	0c 93       	st	X, r16
    1a44:	12 97       	sbiw	r26, 0x02	; 2
    1a46:	13 96       	adiw	r26, 0x03	; 3
    1a48:	1c 93       	st	X, r17
    1a4a:	27 c0       	rjmp	.+78     	; 0x1a9a <malloc+0x98>
    1a4c:	00 93 51 01 	sts	0x0151, r16	; 0x800151 <__flp>
    1a50:	10 93 52 01 	sts	0x0152, r17	; 0x800152 <__flp+0x1>
    1a54:	22 c0       	rjmp	.+68     	; 0x1a9a <malloc+0x98>
    1a56:	21 15       	cp	r18, r1
    1a58:	31 05       	cpc	r19, r1
    1a5a:	19 f0       	breq	.+6      	; 0x1a62 <malloc+0x60>
    1a5c:	42 17       	cp	r20, r18
    1a5e:	53 07       	cpc	r21, r19
    1a60:	18 f4       	brcc	.+6      	; 0x1a68 <malloc+0x66>
    1a62:	9a 01       	movw	r18, r20
    1a64:	bd 01       	movw	r22, r26
    1a66:	ef 01       	movw	r28, r30
    1a68:	df 01       	movw	r26, r30
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	db cf       	rjmp	.-74     	; 0x1a24 <malloc+0x22>
    1a6e:	21 15       	cp	r18, r1
    1a70:	31 05       	cpc	r19, r1
    1a72:	f9 f0       	breq	.+62     	; 0x1ab2 <malloc+0xb0>
    1a74:	28 1b       	sub	r18, r24
    1a76:	39 0b       	sbc	r19, r25
    1a78:	24 30       	cpi	r18, 0x04	; 4
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	80 f4       	brcc	.+32     	; 0x1a9e <malloc+0x9c>
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	9b 81       	ldd	r25, Y+3	; 0x03
    1a82:	61 15       	cp	r22, r1
    1a84:	71 05       	cpc	r23, r1
    1a86:	21 f0       	breq	.+8      	; 0x1a90 <malloc+0x8e>
    1a88:	fb 01       	movw	r30, r22
    1a8a:	93 83       	std	Z+3, r25	; 0x03
    1a8c:	82 83       	std	Z+2, r24	; 0x02
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <malloc+0x96>
    1a90:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <__flp+0x1>
    1a94:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <__flp>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	32 96       	adiw	r30, 0x02	; 2
    1a9c:	44 c0       	rjmp	.+136    	; 0x1b26 <malloc+0x124>
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e2 0f       	add	r30, r18
    1aa2:	f3 1f       	adc	r31, r19
    1aa4:	81 93       	st	Z+, r24
    1aa6:	91 93       	st	Z+, r25
    1aa8:	22 50       	subi	r18, 0x02	; 2
    1aaa:	31 09       	sbc	r19, r1
    1aac:	39 83       	std	Y+1, r19	; 0x01
    1aae:	28 83       	st	Y, r18
    1ab0:	3a c0       	rjmp	.+116    	; 0x1b26 <malloc+0x124>
    1ab2:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <__brkval>
    1ab6:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <__brkval+0x1>
    1aba:	23 2b       	or	r18, r19
    1abc:	41 f4       	brne	.+16     	; 0x1ace <malloc+0xcc>
    1abe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1ac2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1ac6:	30 93 50 01 	sts	0x0150, r19	; 0x800150 <__brkval+0x1>
    1aca:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <__brkval>
    1ace:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ad2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ad6:	21 15       	cp	r18, r1
    1ad8:	31 05       	cpc	r19, r1
    1ada:	41 f4       	brne	.+16     	; 0x1aec <malloc+0xea>
    1adc:	2d b7       	in	r18, 0x3d	; 61
    1ade:	3e b7       	in	r19, 0x3e	; 62
    1ae0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1ae4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1ae8:	24 1b       	sub	r18, r20
    1aea:	35 0b       	sbc	r19, r21
    1aec:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <__brkval>
    1af0:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <__brkval+0x1>
    1af4:	e2 17       	cp	r30, r18
    1af6:	f3 07       	cpc	r31, r19
    1af8:	a0 f4       	brcc	.+40     	; 0x1b22 <malloc+0x120>
    1afa:	2e 1b       	sub	r18, r30
    1afc:	3f 0b       	sbc	r19, r31
    1afe:	28 17       	cp	r18, r24
    1b00:	39 07       	cpc	r19, r25
    1b02:	78 f0       	brcs	.+30     	; 0x1b22 <malloc+0x120>
    1b04:	ac 01       	movw	r20, r24
    1b06:	4e 5f       	subi	r20, 0xFE	; 254
    1b08:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0a:	24 17       	cp	r18, r20
    1b0c:	35 07       	cpc	r19, r21
    1b0e:	48 f0       	brcs	.+18     	; 0x1b22 <malloc+0x120>
    1b10:	4e 0f       	add	r20, r30
    1b12:	5f 1f       	adc	r21, r31
    1b14:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <__brkval+0x1>
    1b18:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <__brkval>
    1b1c:	81 93       	st	Z+, r24
    1b1e:	91 93       	st	Z+, r25
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <malloc+0x124>
    1b22:	e0 e0       	ldi	r30, 0x00	; 0
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	cf 01       	movw	r24, r30
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	08 95       	ret

00001b32 <free>:
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <free+0xa>
    1b3a:	81 c0       	rjmp	.+258    	; 0x1c3e <free+0x10c>
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	32 97       	sbiw	r30, 0x02	; 2
    1b40:	13 82       	std	Z+3, r1	; 0x03
    1b42:	12 82       	std	Z+2, r1	; 0x02
    1b44:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <__flp>
    1b48:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <__flp+0x1>
    1b4c:	10 97       	sbiw	r26, 0x00	; 0
    1b4e:	81 f4       	brne	.+32     	; 0x1b70 <free+0x3e>
    1b50:	20 81       	ld	r18, Z
    1b52:	31 81       	ldd	r19, Z+1	; 0x01
    1b54:	82 0f       	add	r24, r18
    1b56:	93 1f       	adc	r25, r19
    1b58:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <__brkval>
    1b5c:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <__brkval+0x1>
    1b60:	28 17       	cp	r18, r24
    1b62:	39 07       	cpc	r19, r25
    1b64:	51 f5       	brne	.+84     	; 0x1bba <free+0x88>
    1b66:	f0 93 50 01 	sts	0x0150, r31	; 0x800150 <__brkval+0x1>
    1b6a:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <__brkval>
    1b6e:	67 c0       	rjmp	.+206    	; 0x1c3e <free+0x10c>
    1b70:	ed 01       	movw	r28, r26
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	ce 17       	cp	r28, r30
    1b78:	df 07       	cpc	r29, r31
    1b7a:	40 f4       	brcc	.+16     	; 0x1b8c <free+0x5a>
    1b7c:	4a 81       	ldd	r20, Y+2	; 0x02
    1b7e:	5b 81       	ldd	r21, Y+3	; 0x03
    1b80:	9e 01       	movw	r18, r28
    1b82:	41 15       	cp	r20, r1
    1b84:	51 05       	cpc	r21, r1
    1b86:	f1 f0       	breq	.+60     	; 0x1bc4 <free+0x92>
    1b88:	ea 01       	movw	r28, r20
    1b8a:	f5 cf       	rjmp	.-22     	; 0x1b76 <free+0x44>
    1b8c:	d3 83       	std	Z+3, r29	; 0x03
    1b8e:	c2 83       	std	Z+2, r28	; 0x02
    1b90:	40 81       	ld	r20, Z
    1b92:	51 81       	ldd	r21, Z+1	; 0x01
    1b94:	84 0f       	add	r24, r20
    1b96:	95 1f       	adc	r25, r21
    1b98:	c8 17       	cp	r28, r24
    1b9a:	d9 07       	cpc	r29, r25
    1b9c:	59 f4       	brne	.+22     	; 0x1bb4 <free+0x82>
    1b9e:	88 81       	ld	r24, Y
    1ba0:	99 81       	ldd	r25, Y+1	; 0x01
    1ba2:	84 0f       	add	r24, r20
    1ba4:	95 1f       	adc	r25, r21
    1ba6:	02 96       	adiw	r24, 0x02	; 2
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb0:	93 83       	std	Z+3, r25	; 0x03
    1bb2:	82 83       	std	Z+2, r24	; 0x02
    1bb4:	21 15       	cp	r18, r1
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	29 f4       	brne	.+10     	; 0x1bc4 <free+0x92>
    1bba:	f0 93 52 01 	sts	0x0152, r31	; 0x800152 <__flp+0x1>
    1bbe:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <__flp>
    1bc2:	3d c0       	rjmp	.+122    	; 0x1c3e <free+0x10c>
    1bc4:	e9 01       	movw	r28, r18
    1bc6:	fb 83       	std	Y+3, r31	; 0x03
    1bc8:	ea 83       	std	Y+2, r30	; 0x02
    1bca:	49 91       	ld	r20, Y+
    1bcc:	59 91       	ld	r21, Y+
    1bce:	c4 0f       	add	r28, r20
    1bd0:	d5 1f       	adc	r29, r21
    1bd2:	ec 17       	cp	r30, r28
    1bd4:	fd 07       	cpc	r31, r29
    1bd6:	61 f4       	brne	.+24     	; 0x1bf0 <free+0xbe>
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	84 0f       	add	r24, r20
    1bde:	95 1f       	adc	r25, r21
    1be0:	02 96       	adiw	r24, 0x02	; 2
    1be2:	e9 01       	movw	r28, r18
    1be4:	99 83       	std	Y+1, r25	; 0x01
    1be6:	88 83       	st	Y, r24
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	9b 83       	std	Y+3, r25	; 0x03
    1bee:	8a 83       	std	Y+2, r24	; 0x02
    1bf0:	e0 e0       	ldi	r30, 0x00	; 0
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	12 96       	adiw	r26, 0x02	; 2
    1bf6:	8d 91       	ld	r24, X+
    1bf8:	9c 91       	ld	r25, X
    1bfa:	13 97       	sbiw	r26, 0x03	; 3
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <free+0xd4>
    1c00:	fd 01       	movw	r30, r26
    1c02:	dc 01       	movw	r26, r24
    1c04:	f7 cf       	rjmp	.-18     	; 0x1bf4 <free+0xc2>
    1c06:	8d 91       	ld	r24, X+
    1c08:	9c 91       	ld	r25, X
    1c0a:	11 97       	sbiw	r26, 0x01	; 1
    1c0c:	9d 01       	movw	r18, r26
    1c0e:	2e 5f       	subi	r18, 0xFE	; 254
    1c10:	3f 4f       	sbci	r19, 0xFF	; 255
    1c12:	82 0f       	add	r24, r18
    1c14:	93 1f       	adc	r25, r19
    1c16:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <__brkval>
    1c1a:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <__brkval+0x1>
    1c1e:	28 17       	cp	r18, r24
    1c20:	39 07       	cpc	r19, r25
    1c22:	69 f4       	brne	.+26     	; 0x1c3e <free+0x10c>
    1c24:	30 97       	sbiw	r30, 0x00	; 0
    1c26:	29 f4       	brne	.+10     	; 0x1c32 <free+0x100>
    1c28:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__flp+0x1>
    1c2c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <__flp>
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <free+0x104>
    1c32:	13 82       	std	Z+3, r1	; 0x03
    1c34:	12 82       	std	Z+2, r1	; 0x02
    1c36:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <__brkval+0x1>
    1c3a:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <__brkval>
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	08 95       	ret

00001c44 <realloc>:
    1c44:	a0 e0       	ldi	r26, 0x00	; 0
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e8 e2       	ldi	r30, 0x28	; 40
    1c4a:	fe e0       	ldi	r31, 0x0E	; 14
    1c4c:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__prologue_saves__+0x8>
    1c50:	ec 01       	movw	r28, r24
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	21 f4       	brne	.+8      	; 0x1c5e <realloc+0x1a>
    1c56:	cb 01       	movw	r24, r22
    1c58:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <malloc>
    1c5c:	b4 c0       	rjmp	.+360    	; 0x1dc6 <realloc+0x182>
    1c5e:	fc 01       	movw	r30, r24
    1c60:	e6 0f       	add	r30, r22
    1c62:	f7 1f       	adc	r31, r23
    1c64:	9c 01       	movw	r18, r24
    1c66:	22 50       	subi	r18, 0x02	; 2
    1c68:	31 09       	sbc	r19, r1
    1c6a:	e2 17       	cp	r30, r18
    1c6c:	f3 07       	cpc	r31, r19
    1c6e:	08 f4       	brcc	.+2      	; 0x1c72 <realloc+0x2e>
    1c70:	a8 c0       	rjmp	.+336    	; 0x1dc2 <realloc+0x17e>
    1c72:	d9 01       	movw	r26, r18
    1c74:	0d 91       	ld	r16, X+
    1c76:	1c 91       	ld	r17, X
    1c78:	11 97       	sbiw	r26, 0x01	; 1
    1c7a:	06 17       	cp	r16, r22
    1c7c:	17 07       	cpc	r17, r23
    1c7e:	b0 f0       	brcs	.+44     	; 0x1cac <realloc+0x68>
    1c80:	05 30       	cpi	r16, 0x05	; 5
    1c82:	11 05       	cpc	r17, r1
    1c84:	08 f4       	brcc	.+2      	; 0x1c88 <realloc+0x44>
    1c86:	9b c0       	rjmp	.+310    	; 0x1dbe <realloc+0x17a>
    1c88:	c8 01       	movw	r24, r16
    1c8a:	04 97       	sbiw	r24, 0x04	; 4
    1c8c:	86 17       	cp	r24, r22
    1c8e:	97 07       	cpc	r25, r23
    1c90:	08 f4       	brcc	.+2      	; 0x1c94 <realloc+0x50>
    1c92:	95 c0       	rjmp	.+298    	; 0x1dbe <realloc+0x17a>
    1c94:	02 50       	subi	r16, 0x02	; 2
    1c96:	11 09       	sbc	r17, r1
    1c98:	06 1b       	sub	r16, r22
    1c9a:	17 0b       	sbc	r17, r23
    1c9c:	01 93       	st	Z+, r16
    1c9e:	11 93       	st	Z+, r17
    1ca0:	6d 93       	st	X+, r22
    1ca2:	7c 93       	st	X, r23
    1ca4:	cf 01       	movw	r24, r30
    1ca6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <free>
    1caa:	89 c0       	rjmp	.+274    	; 0x1dbe <realloc+0x17a>
    1cac:	5b 01       	movw	r10, r22
    1cae:	a0 1a       	sub	r10, r16
    1cb0:	b1 0a       	sbc	r11, r17
    1cb2:	4c 01       	movw	r8, r24
    1cb4:	80 0e       	add	r8, r16
    1cb6:	91 1e       	adc	r9, r17
    1cb8:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <__flp>
    1cbc:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <__flp+0x1>
    1cc0:	61 2c       	mov	r6, r1
    1cc2:	71 2c       	mov	r7, r1
    1cc4:	e1 2c       	mov	r14, r1
    1cc6:	f1 2c       	mov	r15, r1
    1cc8:	10 97       	sbiw	r26, 0x00	; 0
    1cca:	09 f4       	brne	.+2      	; 0x1cce <realloc+0x8a>
    1ccc:	46 c0       	rjmp	.+140    	; 0x1d5a <realloc+0x116>
    1cce:	8d 91       	ld	r24, X+
    1cd0:	9c 91       	ld	r25, X
    1cd2:	11 97       	sbiw	r26, 0x01	; 1
    1cd4:	a8 15       	cp	r26, r8
    1cd6:	b9 05       	cpc	r27, r9
    1cd8:	b1 f5       	brne	.+108    	; 0x1d46 <realloc+0x102>
    1cda:	6c 01       	movw	r12, r24
    1cdc:	42 e0       	ldi	r20, 0x02	; 2
    1cde:	c4 0e       	add	r12, r20
    1ce0:	d1 1c       	adc	r13, r1
    1ce2:	ca 14       	cp	r12, r10
    1ce4:	db 04       	cpc	r13, r11
    1ce6:	78 f1       	brcs	.+94     	; 0x1d46 <realloc+0x102>
    1ce8:	4c 01       	movw	r8, r24
    1cea:	8a 18       	sub	r8, r10
    1cec:	9b 08       	sbc	r9, r11
    1cee:	64 01       	movw	r12, r8
    1cf0:	42 e0       	ldi	r20, 0x02	; 2
    1cf2:	c4 0e       	add	r12, r20
    1cf4:	d1 1c       	adc	r13, r1
    1cf6:	12 96       	adiw	r26, 0x02	; 2
    1cf8:	bc 90       	ld	r11, X
    1cfa:	12 97       	sbiw	r26, 0x02	; 2
    1cfc:	13 96       	adiw	r26, 0x03	; 3
    1cfe:	ac 91       	ld	r26, X
    1d00:	b5 e0       	ldi	r27, 0x05	; 5
    1d02:	cb 16       	cp	r12, r27
    1d04:	d1 04       	cpc	r13, r1
    1d06:	40 f0       	brcs	.+16     	; 0x1d18 <realloc+0xd4>
    1d08:	b2 82       	std	Z+2, r11	; 0x02
    1d0a:	a3 83       	std	Z+3, r26	; 0x03
    1d0c:	91 82       	std	Z+1, r9	; 0x01
    1d0e:	80 82       	st	Z, r8
    1d10:	d9 01       	movw	r26, r18
    1d12:	6d 93       	st	X+, r22
    1d14:	7c 93       	st	X, r23
    1d16:	09 c0       	rjmp	.+18     	; 0x1d2a <realloc+0xe6>
    1d18:	0e 5f       	subi	r16, 0xFE	; 254
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	80 0f       	add	r24, r16
    1d1e:	91 1f       	adc	r25, r17
    1d20:	f9 01       	movw	r30, r18
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	80 83       	st	Z, r24
    1d26:	eb 2d       	mov	r30, r11
    1d28:	fa 2f       	mov	r31, r26
    1d2a:	e1 14       	cp	r14, r1
    1d2c:	f1 04       	cpc	r15, r1
    1d2e:	31 f0       	breq	.+12     	; 0x1d3c <realloc+0xf8>
    1d30:	d7 01       	movw	r26, r14
    1d32:	13 96       	adiw	r26, 0x03	; 3
    1d34:	fc 93       	st	X, r31
    1d36:	ee 93       	st	-X, r30
    1d38:	12 97       	sbiw	r26, 0x02	; 2
    1d3a:	41 c0       	rjmp	.+130    	; 0x1dbe <realloc+0x17a>
    1d3c:	f0 93 52 01 	sts	0x0152, r31	; 0x800152 <__flp+0x1>
    1d40:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <__flp>
    1d44:	3c c0       	rjmp	.+120    	; 0x1dbe <realloc+0x17a>
    1d46:	68 16       	cp	r6, r24
    1d48:	79 06       	cpc	r7, r25
    1d4a:	08 f4       	brcc	.+2      	; 0x1d4e <realloc+0x10a>
    1d4c:	3c 01       	movw	r6, r24
    1d4e:	7d 01       	movw	r14, r26
    1d50:	12 96       	adiw	r26, 0x02	; 2
    1d52:	0d 90       	ld	r0, X+
    1d54:	bc 91       	ld	r27, X
    1d56:	a0 2d       	mov	r26, r0
    1d58:	b7 cf       	rjmp	.-146    	; 0x1cc8 <realloc+0x84>
    1d5a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__brkval>
    1d5e:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <__brkval+0x1>
    1d62:	88 16       	cp	r8, r24
    1d64:	99 06       	cpc	r9, r25
    1d66:	e1 f4       	brne	.+56     	; 0x1da0 <realloc+0x15c>
    1d68:	66 16       	cp	r6, r22
    1d6a:	77 06       	cpc	r7, r23
    1d6c:	c8 f4       	brcc	.+50     	; 0x1da0 <realloc+0x15c>
    1d6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d72:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	41 f4       	brne	.+16     	; 0x1d8a <realloc+0x146>
    1d7a:	8d b7       	in	r24, 0x3d	; 61
    1d7c:	9e b7       	in	r25, 0x3e	; 62
    1d7e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1d82:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1d86:	84 1b       	sub	r24, r20
    1d88:	95 0b       	sbc	r25, r21
    1d8a:	e8 17       	cp	r30, r24
    1d8c:	f9 07       	cpc	r31, r25
    1d8e:	c8 f4       	brcc	.+50     	; 0x1dc2 <realloc+0x17e>
    1d90:	f0 93 50 01 	sts	0x0150, r31	; 0x800150 <__brkval+0x1>
    1d94:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <__brkval>
    1d98:	f9 01       	movw	r30, r18
    1d9a:	71 83       	std	Z+1, r23	; 0x01
    1d9c:	60 83       	st	Z, r22
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <realloc+0x17a>
    1da0:	cb 01       	movw	r24, r22
    1da2:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <malloc>
    1da6:	7c 01       	movw	r14, r24
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	59 f0       	breq	.+22     	; 0x1dc2 <realloc+0x17e>
    1dac:	a8 01       	movw	r20, r16
    1dae:	be 01       	movw	r22, r28
    1db0:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <memcpy>
    1db4:	ce 01       	movw	r24, r28
    1db6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <free>
    1dba:	c7 01       	movw	r24, r14
    1dbc:	04 c0       	rjmp	.+8      	; 0x1dc6 <realloc+0x182>
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <realloc+0x182>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	ee e0       	ldi	r30, 0x0E	; 14
    1dcc:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__epilogue_restores__+0x8>

00001dd0 <memcpy>:
    1dd0:	fb 01       	movw	r30, r22
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <memcpy+0xa>
    1dd6:	01 90       	ld	r0, Z+
    1dd8:	0d 92       	st	X+, r0
    1dda:	41 50       	subi	r20, 0x01	; 1
    1ddc:	50 40       	sbci	r21, 0x00	; 0
    1dde:	d8 f7       	brcc	.-10     	; 0x1dd6 <memcpy+0x6>
    1de0:	08 95       	ret

00001de2 <__prologue_saves__>:
    1de2:	2f 92       	push	r2
    1de4:	3f 92       	push	r3
    1de6:	4f 92       	push	r4
    1de8:	5f 92       	push	r5
    1dea:	6f 92       	push	r6
    1dec:	7f 92       	push	r7
    1dee:	8f 92       	push	r8
    1df0:	9f 92       	push	r9
    1df2:	af 92       	push	r10
    1df4:	bf 92       	push	r11
    1df6:	cf 92       	push	r12
    1df8:	df 92       	push	r13
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	ca 1b       	sub	r28, r26
    1e0c:	db 0b       	sbc	r29, r27
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	09 94       	ijmp

00001e1a <__epilogue_restores__>:
    1e1a:	2a 88       	ldd	r2, Y+18	; 0x12
    1e1c:	39 88       	ldd	r3, Y+17	; 0x11
    1e1e:	48 88       	ldd	r4, Y+16	; 0x10
    1e20:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e22:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e24:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e26:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e28:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e2c:	b9 84       	ldd	r11, Y+9	; 0x09
    1e2e:	c8 84       	ldd	r12, Y+8	; 0x08
    1e30:	df 80       	ldd	r13, Y+7	; 0x07
    1e32:	ee 80       	ldd	r14, Y+6	; 0x06
    1e34:	fd 80       	ldd	r15, Y+5	; 0x05
    1e36:	0c 81       	ldd	r16, Y+4	; 0x04
    1e38:	1b 81       	ldd	r17, Y+3	; 0x03
    1e3a:	aa 81       	ldd	r26, Y+2	; 0x02
    1e3c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e3e:	ce 0f       	add	r28, r30
    1e40:	d1 1d       	adc	r29, r1
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	ed 01       	movw	r28, r26
    1e4e:	08 95       	ret

00001e50 <_exit>:
    1e50:	f8 94       	cli

00001e52 <__stop_program>:
    1e52:	ff cf       	rjmp	.-2      	; 0x1e52 <__stop_program>
