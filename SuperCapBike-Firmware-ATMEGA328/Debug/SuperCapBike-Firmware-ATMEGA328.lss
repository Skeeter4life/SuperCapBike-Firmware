
SuperCapBike-Firmware-ATMEGA328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001bfe  00001c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800120  00800120  00001cb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b0  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a71  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010af  00000000  00000000  00003d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000438  00000000  00000000  00004df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091d  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090b  00000000  00000000  00005b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00006450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_22>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_24>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ef       	ldi	r30, 0xFE	; 254
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 32       	cpi	r26, 0x20	; 32
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e2       	ldi	r26, 0x20	; 32
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 35       	cpi	r26, 0x55	; 85
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
      9e:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_22>:

#include "../Headers/EEPROM.h"

volatile bool EEPROM_Ready = false; // Not used

ISR(EE_READY_vect){ // Not used
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
      ae:	0f 92       	push	r0
      b0:	11 24       	eor	r1, r1
      b2:	8f 93       	push	r24
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
	
	EEPROM_Ready = true;
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
		
      c2:	00 00       	nop
      c4:	df 91       	pop	r29
      c6:	cf 91       	pop	r28
      c8:	8f 91       	pop	r24
      ca:	0f 90       	pop	r0
      cc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
      d0:	0f 90       	pop	r0
      d2:	1f 90       	pop	r1
      d4:	18 95       	reti

000000d6 <__vector_24>:

volatile bool TWI_Ready = true;

#define I2C_Status (TWSR & 0xF8)

ISR(TWI_vect){
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
      de:	0f 92       	push	r0
      e0:	11 24       	eor	r1, r1
      e2:	8f 93       	push	r24
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
	TWI_Ready = true;
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <TWI_Ready>
}
      f2:	00 00       	nop
      f4:	df 91       	pop	r29
      f6:	cf 91       	pop	r28
      f8:	8f 91       	pop	r24
      fa:	0f 90       	pop	r0
      fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     100:	0f 90       	pop	r0
     102:	1f 90       	pop	r1
     104:	18 95       	reti

00000106 <Init_TWI>:

TWI_Status Init_TWI(TWI_Data* I2C_Data, uint8_t Device_Address, uint8_t Register_Address, TWI_Modes Mode, uint8_t Data){
     106:	0f 93       	push	r16
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	00 d0       	rcall	.+0      	; 0x10e <Init_TWI+0x8>
     10e:	00 d0       	rcall	.+0      	; 0x110 <Init_TWI+0xa>
     110:	00 d0       	rcall	.+0      	; 0x112 <Init_TWI+0xc>
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	9a 83       	std	Y+2, r25	; 0x02
     118:	89 83       	std	Y+1, r24	; 0x01
     11a:	6b 83       	std	Y+3, r22	; 0x03
     11c:	4c 83       	std	Y+4, r20	; 0x04
     11e:	2d 83       	std	Y+5, r18	; 0x05
     120:	0e 83       	std	Y+6, r16	; 0x06
	
	if(I2C_Data == NULL){
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	9a 81       	ldd	r25, Y+2	; 0x02
     126:	89 2b       	or	r24, r25
     128:	11 f4       	brne	.+4      	; 0x12e <Init_TWI+0x28>
		return TWI_FAULT;
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	1e c0       	rjmp	.+60     	; 0x16a <Init_TWI+0x64>
	}
	
	I2C_Data->Device_Address = Device_Address;
     12e:	89 81       	ldd	r24, Y+1	; 0x01
     130:	9a 81       	ldd	r25, Y+2	; 0x02
     132:	2b 81       	ldd	r18, Y+3	; 0x03
     134:	fc 01       	movw	r30, r24
     136:	20 83       	st	Z, r18
	I2C_Data->Register_Address = Register_Address;
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	9a 81       	ldd	r25, Y+2	; 0x02
     13c:	2c 81       	ldd	r18, Y+4	; 0x04
     13e:	fc 01       	movw	r30, r24
     140:	21 83       	std	Z+1, r18	; 0x01
	I2C_Data->Mode = Mode;
     142:	89 81       	ldd	r24, Y+1	; 0x01
     144:	9a 81       	ldd	r25, Y+2	; 0x02
     146:	2d 81       	ldd	r18, Y+5	; 0x05
     148:	fc 01       	movw	r30, r24
     14a:	22 83       	std	Z+2, r18	; 0x02
	I2C_Data->Data = Data;
     14c:	89 81       	ldd	r24, Y+1	; 0x01
     14e:	9a 81       	ldd	r25, Y+2	; 0x02
     150:	2e 81       	ldd	r18, Y+6	; 0x06
     152:	fc 01       	movw	r30, r24
     154:	23 83       	std	Z+3, r18	; 0x03
		
	TWSR = 0x00;
     156:	89 eb       	ldi	r24, 0xB9	; 185
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	10 82       	st	Z, r1
	TWBR = 72;
     15e:	88 eb       	ldi	r24, 0xB8	; 184
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	28 e4       	ldi	r18, 0x48	; 72
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18
	
	return TWI_OK;
     168:	81 e0       	ldi	r24, 0x01	; 1
	
}
     16a:	26 96       	adiw	r28, 0x06	; 6
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	de bf       	out	0x3e, r29	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	cd bf       	out	0x3d, r28	; 61
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	0f 91       	pop	r16
     17c:	08 95       	ret

0000017e <main>:

const uint32_t F_CLK = 16000000;
const uint32_t TC_CLK = 16000000; // TC_CLK can be asynchronous to F_CLK.

int main(void)
{
     17e:	0f 93       	push	r16
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	68 97       	sbiw	r28, 0x18	; 24
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
	sei();
     194:	78 94       	sei
	
	DDRB |= (1 << DDB0) | (1 << DDB1);
     196:	84 e2       	ldi	r24, 0x24	; 36
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	24 e2       	ldi	r18, 0x24	; 36
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	f9 01       	movw	r30, r18
     1a0:	20 81       	ld	r18, Z
     1a2:	23 60       	ori	r18, 0x03	; 3
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 83       	st	Z, r18
	DDRD |= (1 << DDD6)| (1 << DDD7);
     1a8:	8a e2       	ldi	r24, 0x2A	; 42
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	2a e2       	ldi	r18, 0x2A	; 42
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	f9 01       	movw	r30, r18
     1b2:	20 81       	ld	r18, Z
     1b4:	20 6c       	ori	r18, 0xC0	; 192
     1b6:	fc 01       	movw	r30, r24
     1b8:	20 83       	st	Z, r18
	
	Timers Timer1 = _8_bit2;
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	8a 83       	std	Y+2, r24	; 0x02
	
	bool Timer1_Set = Configure_Timer(100, u_MiliSeconds, Timer1);
     1be:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <u_MiliSeconds>
     1c2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <u_MiliSeconds+0x1>
     1c6:	cc 01       	movw	r24, r24
     1c8:	a0 e0       	ldi	r26, 0x00	; 0
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	2a 81       	ldd	r18, Y+2	; 0x02
     1ce:	ac 01       	movw	r20, r24
     1d0:	bd 01       	movw	r22, r26
     1d2:	84 e6       	ldi	r24, 0x64	; 100
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 be 06 	call	0xd7c	; 0xd7c <Configure_Timer>
     1da:	8b 83       	std	Y+3, r24	; 0x03
	
	Timers Timer2 = _8_bit1;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	8c 83       	std	Y+4, r24	; 0x04
	
	bool Timer2_Set = Configure_Timer(1000, u_MicroSeconds, Timer2);
     1e0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <u_MicroSeconds>
     1e4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <u_MicroSeconds+0x1>
     1e8:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <u_MicroSeconds+0x2>
     1ec:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <u_MicroSeconds+0x3>
     1f0:	2c 81       	ldd	r18, Y+4	; 0x04
     1f2:	ac 01       	movw	r20, r24
     1f4:	bd 01       	movw	r22, r26
     1f6:	88 ee       	ldi	r24, 0xE8	; 232
     1f8:	93 e0       	ldi	r25, 0x03	; 3
     1fa:	0e 94 be 06 	call	0xd7c	; 0xd7c <Configure_Timer>
     1fe:	8d 83       	std	Y+5, r24	; 0x05
	
	Timers Timer3 = _16_bit;
     200:	1e 82       	std	Y+6, r1	; 0x06
	
	bool Timer3_Set = Configure_Timer(3, u_Seconds, Timer3);
     202:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u_Seconds>
     206:	88 2f       	mov	r24, r24
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e0       	ldi	r27, 0x00	; 0
     20e:	2e 81       	ldd	r18, Y+6	; 0x06
     210:	ac 01       	movw	r20, r24
     212:	bd 01       	movw	r22, r26
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 be 06 	call	0xd7c	; 0xd7c <Configure_Timer>
     21c:	8f 83       	std	Y+7, r24	; 0x07
	
	if(!Timer1_Set || !Timer2_Set || !Timer3_Set){
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	88 23       	and	r24, r24
     222:	31 f0       	breq	.+12     	; 0x230 <main+0xb2>
     224:	8d 81       	ldd	r24, Y+5	; 0x05
     226:	88 23       	and	r24, r24
     228:	19 f0       	breq	.+6      	; 0x230 <main+0xb2>
     22a:	8f 81       	ldd	r24, Y+7	; 0x07
     22c:	88 23       	and	r24, r24
     22e:	29 f4       	brne	.+10     	; 0x23a <main+0xbc>
		PORTB = (1 << PORTB1);
     230:	85 e2       	ldi	r24, 0x25	; 37
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	22 e0       	ldi	r18, 0x02	; 2
     236:	fc 01       	movw	r30, r24
     238:	20 83       	st	Z, r18
	if(!W1 || !W2 || !R1){
		PORTB = (1 << PORTB1);
	}*/
	
	Ring_Buffer Buffer1;
	uint8_t Received_Data = 0;
     23a:	1b 8a       	std	Y+19, r1	; 0x13
	
	Init_Buffer(&Buffer1, 10, 2);
     23c:	ce 01       	movw	r24, r28
     23e:	08 96       	adiw	r24, 0x08	; 8
     240:	42 e0       	ldi	r20, 0x02	; 2
     242:	6a e0       	ldi	r22, 0x0A	; 10
     244:	0e 94 48 01 	call	0x290	; 0x290 <Init_Buffer>
	
	for(uint8_t i = 0; i <= 30; i++){
     248:	19 82       	std	Y+1, r1	; 0x01
     24a:	10 c0       	rjmp	.+32     	; 0x26c <main+0xee>
		Write_to_Buffer(&Buffer1, i);
     24c:	ce 01       	movw	r24, r28
     24e:	08 96       	adiw	r24, 0x08	; 8
     250:	69 81       	ldd	r22, Y+1	; 0x01
     252:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Write_to_Buffer>
		Read_from_Buffer(&Buffer1, &Received_Data);
     256:	9e 01       	movw	r18, r28
     258:	2d 5e       	subi	r18, 0xED	; 237
     25a:	3f 4f       	sbci	r19, 0xFF	; 255
     25c:	ce 01       	movw	r24, r28
     25e:	08 96       	adiw	r24, 0x08	; 8
     260:	b9 01       	movw	r22, r18
     262:	0e 94 90 02 	call	0x520	; 0x520 <Read_from_Buffer>
	Ring_Buffer Buffer1;
	uint8_t Received_Data = 0;
	
	Init_Buffer(&Buffer1, 10, 2);
	
	for(uint8_t i = 0; i <= 30; i++){
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	8f 5f       	subi	r24, 0xFF	; 255
     26a:	89 83       	std	Y+1, r24	; 0x01
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	8f 31       	cpi	r24, 0x1F	; 31
     270:	68 f3       	brcs	.-38     	; 0x24c <main+0xce>
		Write_to_Buffer(&Buffer1, i);
		Read_from_Buffer(&Buffer1, &Received_Data);
	}
	
	Free_Buffer(&Buffer1); // Buffer functionality Verified with debugger. More rigorous testing soon.
     272:	ce 01       	movw	r24, r28
     274:	08 96       	adiw	r24, 0x08	; 8
     276:	0e 94 71 02 	call	0x4e2	; 0x4e2 <Free_Buffer>
	
	TWI_Data MCP23017;
	
	Init_TWI(&MCP23017, MCP23017_Address, 0x00, WRITING_MODE, 0b10101010);
     27a:	ce 01       	movw	r24, r28
     27c:	44 96       	adiw	r24, 0x14	; 20
     27e:	0a ea       	ldi	r16, 0xAA	; 170
     280:	21 e0       	ldi	r18, 0x01	; 1
     282:	40 e0       	ldi	r20, 0x00	; 0
     284:	60 e2       	ldi	r22, 0x20	; 32
     286:	0e 94 83 00 	call	0x106	; 0x106 <Init_TWI>
	
	while (1 == true){
		
		if(TWI_Ready){
     28a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TWI_Ready>
			
			//TWI_Handler(&MCP23017);
			
		}

	}
     28e:	fd cf       	rjmp	.-6      	; 0x28a <main+0x10c>

00000290 <Init_Buffer>:
 */ 

#include "../Headers/Includes.h"
#include "../Headers/Dynamic_Ring_Buffer.h"

Ring_Buffer_Status Init_Buffer(Ring_Buffer* Ring_Buffer, uint8_t Size, uint8_t Increment){
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	00 d0       	rcall	.+0      	; 0x296 <Init_Buffer+0x6>
     296:	00 d0       	rcall	.+0      	; 0x298 <Init_Buffer+0x8>
     298:	00 d0       	rcall	.+0      	; 0x29a <Init_Buffer+0xa>
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	9c 83       	std	Y+4, r25	; 0x04
     2a0:	8b 83       	std	Y+3, r24	; 0x03
     2a2:	6d 83       	std	Y+5, r22	; 0x05
     2a4:	4e 83       	std	Y+6, r20	; 0x06
	
	if(Size == 0 
     2a6:	8d 81       	ldd	r24, Y+5	; 0x05
     2a8:	88 23       	and	r24, r24
     2aa:	19 f0       	breq	.+6      	; 0x2b2 <Init_Buffer+0x22>
	|| Increment == 0){
     2ac:	8e 81       	ldd	r24, Y+6	; 0x06
     2ae:	88 23       	and	r24, r24
     2b0:	11 f4       	brne	.+4      	; 0x2b6 <Init_Buffer+0x26>
		return BUFFER_FAULT;
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	3a c0       	rjmp	.+116    	; 0x32a <Init_Buffer+0x9a>
	}
	
	uint8_t* p = (uint8_t*)malloc(Size);
     2b6:	8d 81       	ldd	r24, Y+5	; 0x05
     2b8:	88 2f       	mov	r24, r24
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <malloc>
     2c0:	9a 83       	std	Y+2, r25	; 0x02
     2c2:	89 83       	std	Y+1, r24	; 0x01
	
	if(p == NULL){
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	9a 81       	ldd	r25, Y+2	; 0x02
     2c8:	89 2b       	or	r24, r25
     2ca:	11 f4       	brne	.+4      	; 0x2d0 <Init_Buffer+0x40>
		return BUFFER_FAULT;
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	2d c0       	rjmp	.+90     	; 0x32a <Init_Buffer+0x9a>
	}
	
	Ring_Buffer->Buffer = p;
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	9c 81       	ldd	r25, Y+4	; 0x04
     2d4:	29 81       	ldd	r18, Y+1	; 0x01
     2d6:	3a 81       	ldd	r19, Y+2	; 0x02
     2d8:	fc 01       	movw	r30, r24
     2da:	31 83       	std	Z+1, r19	; 0x01
     2dc:	20 83       	st	Z, r18
		
	Ring_Buffer->Read_Index = 0;
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	9c 81       	ldd	r25, Y+4	; 0x04
     2e2:	fc 01       	movw	r30, r24
     2e4:	12 82       	std	Z+2, r1	; 0x02
	Ring_Buffer->Write_Index = 0;
     2e6:	8b 81       	ldd	r24, Y+3	; 0x03
     2e8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ea:	fc 01       	movw	r30, r24
     2ec:	13 82       	std	Z+3, r1	; 0x03
	
	Ring_Buffer->Size = Size;
     2ee:	8d 81       	ldd	r24, Y+5	; 0x05
     2f0:	28 2f       	mov	r18, r24
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	8b 81       	ldd	r24, Y+3	; 0x03
     2f6:	9c 81       	ldd	r25, Y+4	; 0x04
     2f8:	fc 01       	movw	r30, r24
     2fa:	35 83       	std	Z+5, r19	; 0x05
     2fc:	24 83       	std	Z+4, r18	; 0x04
	Ring_Buffer->Increment = Increment;
     2fe:	8b 81       	ldd	r24, Y+3	; 0x03
     300:	9c 81       	ldd	r25, Y+4	; 0x04
     302:	2e 81       	ldd	r18, Y+6	; 0x06
     304:	fc 01       	movw	r30, r24
     306:	26 83       	std	Z+6, r18	; 0x06
	
	Ring_Buffer->Adjusted_Size = 0;
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	fc 01       	movw	r30, r24
     30e:	17 82       	std	Z+7, r1	; 0x07
	Ring_Buffer->Wrap_Index = 0;
     310:	8b 81       	ldd	r24, Y+3	; 0x03
     312:	9c 81       	ldd	r25, Y+4	; 0x04
     314:	fc 01       	movw	r30, r24
     316:	10 86       	std	Z+8, r1	; 0x08
	Ring_Buffer->Overflow_Index = 0;
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	9c 81       	ldd	r25, Y+4	; 0x04
     31c:	fc 01       	movw	r30, r24
     31e:	11 86       	std	Z+9, r1	; 0x09
	
	Ring_Buffer->Indexing_State = NONE;
     320:	8b 81       	ldd	r24, Y+3	; 0x03
     322:	9c 81       	ldd	r25, Y+4	; 0x04
     324:	fc 01       	movw	r30, r24
     326:	12 86       	std	Z+10, r1	; 0x0a

	return BUFFER_OK;
     328:	81 e0       	ldi	r24, 0x01	; 1
	
}
     32a:	26 96       	adiw	r28, 0x06	; 6
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <Increase_Buffer>:

Ring_Buffer_Status Increase_Buffer(Ring_Buffer* Ring_Buffer){
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	00 d0       	rcall	.+0      	; 0x342 <Increase_Buffer+0x6>
     342:	00 d0       	rcall	.+0      	; 0x344 <Increase_Buffer+0x8>
     344:	00 d0       	rcall	.+0      	; 0x346 <Increase_Buffer+0xa>
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	9e 83       	std	Y+6, r25	; 0x06
     34c:	8d 83       	std	Y+5, r24	; 0x05
	
	if(Ring_Buffer == NULL){
     34e:	8d 81       	ldd	r24, Y+5	; 0x05
     350:	9e 81       	ldd	r25, Y+6	; 0x06
     352:	89 2b       	or	r24, r25
     354:	11 f4       	brne	.+4      	; 0x35a <Increase_Buffer+0x1e>
		return BUFFER_FAULT;
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	3a c0       	rjmp	.+116    	; 0x3ce <Increase_Buffer+0x92>
	}
	
	uint8_t RB_Size = Ring_Buffer->Size;
     35a:	8d 81       	ldd	r24, Y+5	; 0x05
     35c:	9e 81       	ldd	r25, Y+6	; 0x06
     35e:	fc 01       	movw	r30, r24
     360:	84 81       	ldd	r24, Z+4	; 0x04
     362:	95 81       	ldd	r25, Z+5	; 0x05
     364:	89 83       	std	Y+1, r24	; 0x01
	uint8_t RB_Increment = Ring_Buffer->Increment;
     366:	8d 81       	ldd	r24, Y+5	; 0x05
     368:	9e 81       	ldd	r25, Y+6	; 0x06
     36a:	fc 01       	movw	r30, r24
     36c:	86 81       	ldd	r24, Z+6	; 0x06
     36e:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t* p = (uint8_t*)realloc(Ring_Buffer->Buffer, RB_Size + RB_Increment); // Opted for safe re-allocation
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	28 2f       	mov	r18, r24
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	82 0f       	add	r24, r18
     37e:	93 1f       	adc	r25, r19
     380:	9c 01       	movw	r18, r24
     382:	8d 81       	ldd	r24, Y+5	; 0x05
     384:	9e 81       	ldd	r25, Y+6	; 0x06
     386:	fc 01       	movw	r30, r24
     388:	80 81       	ld	r24, Z
     38a:	91 81       	ldd	r25, Z+1	; 0x01
     38c:	b9 01       	movw	r22, r18
     38e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <realloc>
     392:	9c 83       	std	Y+4, r25	; 0x04
     394:	8b 83       	std	Y+3, r24	; 0x03
	
	if(p == NULL){
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	9c 81       	ldd	r25, Y+4	; 0x04
     39a:	89 2b       	or	r24, r25
     39c:	11 f4       	brne	.+4      	; 0x3a2 <Increase_Buffer+0x66>
		return BUFFER_FAULT;
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	16 c0       	rjmp	.+44     	; 0x3ce <Increase_Buffer+0x92>
	}
	
	Ring_Buffer->Buffer = p;
     3a2:	8d 81       	ldd	r24, Y+5	; 0x05
     3a4:	9e 81       	ldd	r25, Y+6	; 0x06
     3a6:	2b 81       	ldd	r18, Y+3	; 0x03
     3a8:	3c 81       	ldd	r19, Y+4	; 0x04
     3aa:	fc 01       	movw	r30, r24
     3ac:	31 83       	std	Z+1, r19	; 0x01
     3ae:	20 83       	st	Z, r18
	Ring_Buffer->Size = RB_Size + RB_Increment;
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	28 2f       	mov	r18, r24
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	8a 81       	ldd	r24, Y+2	; 0x02
     3b8:	88 2f       	mov	r24, r24
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	82 0f       	add	r24, r18
     3be:	93 1f       	adc	r25, r19
     3c0:	9c 01       	movw	r18, r24
     3c2:	8d 81       	ldd	r24, Y+5	; 0x05
     3c4:	9e 81       	ldd	r25, Y+6	; 0x06
     3c6:	fc 01       	movw	r30, r24
     3c8:	35 83       	std	Z+5, r19	; 0x05
     3ca:	24 83       	std	Z+4, r18	; 0x04
	
	return BUFFER_OK;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
	
}
     3ce:	26 96       	adiw	r28, 0x06	; 6
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <Write_to_Buffer>:

Ring_Buffer_Status Write_to_Buffer(Ring_Buffer* Ring_Buffer, uint8_t Data){
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <Write_to_Buffer+0x6>
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <Write_to_Buffer+0x8>
     3e8:	00 d0       	rcall	.+0      	; 0x3ea <Write_to_Buffer+0xa>
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	9d 83       	std	Y+5, r25	; 0x05
     3f0:	8c 83       	std	Y+4, r24	; 0x04
     3f2:	6e 83       	std	Y+6, r22	; 0x06
	
	uint8_t RB_Write_Index = Ring_Buffer->Write_Index;
     3f4:	8c 81       	ldd	r24, Y+4	; 0x04
     3f6:	9d 81       	ldd	r25, Y+5	; 0x05
     3f8:	fc 01       	movw	r30, r24
     3fa:	83 81       	ldd	r24, Z+3	; 0x03
     3fc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t RB_Read_Index = Ring_Buffer->Read_Index;
     3fe:	8c 81       	ldd	r24, Y+4	; 0x04
     400:	9d 81       	ldd	r25, Y+5	; 0x05
     402:	fc 01       	movw	r30, r24
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t RB_Size = Ring_Buffer->Size;
     408:	8c 81       	ldd	r24, Y+4	; 0x04
     40a:	9d 81       	ldd	r25, Y+5	; 0x05
     40c:	fc 01       	movw	r30, r24
     40e:	84 81       	ldd	r24, Z+4	; 0x04
     410:	95 81       	ldd	r25, Z+5	; 0x05
     412:	8b 83       	std	Y+3, r24	; 0x03
	
	if(RB_Write_Index == RB_Size){ 
     414:	99 81       	ldd	r25, Y+1	; 0x01
     416:	8b 81       	ldd	r24, Y+3	; 0x03
     418:	98 17       	cp	r25, r24
     41a:	49 f4       	brne	.+18     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		
		Ring_Buffer->Write_Index = 0;
     41c:	8c 81       	ldd	r24, Y+4	; 0x04
     41e:	9d 81       	ldd	r25, Y+5	; 0x05
     420:	fc 01       	movw	r30, r24
     422:	13 82       	std	Z+3, r1	; 0x03
		Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
     424:	8c 81       	ldd	r24, Y+4	; 0x04
     426:	9d 81       	ldd	r25, Y+5	; 0x05
     428:	21 e0       	ldi	r18, 0x01	; 1
     42a:	fc 01       	movw	r30, r24
     42c:	22 87       	std	Z+10, r18	; 0x0a
		
	}
	
	if( Ring_Buffer->Indexing_State == WRITE_LEADS_READ && 
     42e:	8c 81       	ldd	r24, Y+4	; 0x04
     430:	9d 81       	ldd	r25, Y+5	; 0x05
     432:	fc 01       	movw	r30, r24
     434:	82 85       	ldd	r24, Z+10	; 0x0a
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	81 f5       	brne	.+96     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	98 17       	cp	r25, r24
     440:	61 f5       	brne	.+88     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
	RB_Read_Index == RB_Write_Index){
		
		if(Increase_Buffer(Ring_Buffer) == 1){
     442:	8c 81       	ldd	r24, Y+4	; 0x04
     444:	9d 81       	ldd	r25, Y+5	; 0x05
     446:	0e 94 9e 01 	call	0x33c	; 0x33c <Increase_Buffer>
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	21 f5       	brne	.+72     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			
			Ring_Buffer->Indexing_State = OVERFLOW;
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	9d 81       	ldd	r25, Y+5	; 0x05
     452:	22 e0       	ldi	r18, 0x02	; 2
     454:	fc 01       	movw	r30, r24
     456:	22 87       	std	Z+10, r18	; 0x0a
			
			Ring_Buffer->Overflow_Index = RB_Write_Index;
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	9d 81       	ldd	r25, Y+5	; 0x05
     45c:	29 81       	ldd	r18, Y+1	; 0x01
     45e:	fc 01       	movw	r30, r24
     460:	21 87       	std	Z+9, r18	; 0x09
			
			Ring_Buffer->Adjusted_Size = RB_Size;
     462:	8c 81       	ldd	r24, Y+4	; 0x04
     464:	9d 81       	ldd	r25, Y+5	; 0x05
     466:	2b 81       	ldd	r18, Y+3	; 0x03
     468:	fc 01       	movw	r30, r24
     46a:	27 83       	std	Z+7, r18	; 0x07
			
			Ring_Buffer->Wrap_Index = RB_Size;
     46c:	8c 81       	ldd	r24, Y+4	; 0x04
     46e:	9d 81       	ldd	r25, Y+5	; 0x05
     470:	2b 81       	ldd	r18, Y+3	; 0x03
     472:	fc 01       	movw	r30, r24
     474:	20 87       	std	Z+8, r18	; 0x08
	
			Ring_Buffer->Write_Index = Ring_Buffer->Size - Ring_Buffer->Increment;
     476:	8c 81       	ldd	r24, Y+4	; 0x04
     478:	9d 81       	ldd	r25, Y+5	; 0x05
     47a:	fc 01       	movw	r30, r24
     47c:	84 81       	ldd	r24, Z+4	; 0x04
     47e:	95 81       	ldd	r25, Z+5	; 0x05
     480:	28 2f       	mov	r18, r24
     482:	8c 81       	ldd	r24, Y+4	; 0x04
     484:	9d 81       	ldd	r25, Y+5	; 0x05
     486:	fc 01       	movw	r30, r24
     488:	86 81       	ldd	r24, Z+6	; 0x06
     48a:	28 1b       	sub	r18, r24
     48c:	8c 81       	ldd	r24, Y+4	; 0x04
     48e:	9d 81       	ldd	r25, Y+5	; 0x05
     490:	fc 01       	movw	r30, r24
     492:	23 83       	std	Z+3, r18	; 0x03
     494:	02 c0       	rjmp	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			
		}else{
			
			return BUFFER_FAULT;
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	1b c0       	rjmp	.+54     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			
		}
		
	}
	
	Ring_Buffer->Buffer[Ring_Buffer->Write_Index] = Data;
     49a:	8c 81       	ldd	r24, Y+4	; 0x04
     49c:	9d 81       	ldd	r25, Y+5	; 0x05
     49e:	fc 01       	movw	r30, r24
     4a0:	20 81       	ld	r18, Z
     4a2:	31 81       	ldd	r19, Z+1	; 0x01
     4a4:	8c 81       	ldd	r24, Y+4	; 0x04
     4a6:	9d 81       	ldd	r25, Y+5	; 0x05
     4a8:	fc 01       	movw	r30, r24
     4aa:	83 81       	ldd	r24, Z+3	; 0x03
     4ac:	88 2f       	mov	r24, r24
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	82 0f       	add	r24, r18
     4b2:	93 1f       	adc	r25, r19
     4b4:	2e 81       	ldd	r18, Y+6	; 0x06
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
	Ring_Buffer->Write_Index++;
     4ba:	8c 81       	ldd	r24, Y+4	; 0x04
     4bc:	9d 81       	ldd	r25, Y+5	; 0x05
     4be:	fc 01       	movw	r30, r24
     4c0:	83 81       	ldd	r24, Z+3	; 0x03
     4c2:	21 e0       	ldi	r18, 0x01	; 1
     4c4:	28 0f       	add	r18, r24
     4c6:	8c 81       	ldd	r24, Y+4	; 0x04
     4c8:	9d 81       	ldd	r25, Y+5	; 0x05
     4ca:	fc 01       	movw	r30, r24
     4cc:	23 83       	std	Z+3, r18	; 0x03
	
	return BUFFER_OK;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
	
}
     4d0:	26 96       	adiw	r28, 0x06	; 6
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <Free_Buffer>:

Ring_Buffer_Status Free_Buffer(Ring_Buffer* Ring_Buffer){
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <Free_Buffer+0x6>
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	9a 83       	std	Y+2, r25	; 0x02
     4ee:	89 83       	std	Y+1, r24	; 0x01
	
	if(Ring_Buffer == NULL){
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
     4f4:	89 2b       	or	r24, r25
     4f6:	11 f4       	brne	.+4      	; 0x4fc <Free_Buffer+0x1a>
		return BUFFER_FAULT;
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0d c0       	rjmp	.+26     	; 0x516 <Free_Buffer+0x34>
	}
	
	free(Ring_Buffer->Buffer);
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	9a 81       	ldd	r25, Y+2	; 0x02
     500:	fc 01       	movw	r30, r24
     502:	80 81       	ld	r24, Z
     504:	91 81       	ldd	r25, Z+1	; 0x01
     506:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <free>
	
	Ring_Buffer->Buffer = NULL;
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	9a 81       	ldd	r25, Y+2	; 0x02
     50e:	fc 01       	movw	r30, r24
     510:	11 82       	std	Z+1, r1	; 0x01
     512:	10 82       	st	Z, r1
	
	return BUFFER_OK;
     514:	81 e0       	ldi	r24, 0x01	; 1
	
}
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <Read_from_Buffer>:


Ring_Buffer_Status Read_from_Buffer(Ring_Buffer* Ring_Buffer, uint8_t* Outgoing_Data){
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	00 d0       	rcall	.+0      	; 0x526 <Read_from_Buffer+0x6>
     526:	00 d0       	rcall	.+0      	; 0x528 <Read_from_Buffer+0x8>
     528:	1f 92       	push	r1
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	9b 83       	std	Y+3, r25	; 0x03
     530:	8a 83       	std	Y+2, r24	; 0x02
     532:	7d 83       	std	Y+5, r23	; 0x05
     534:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t RB_Read_Index = Ring_Buffer->Read_Index;
     536:	8a 81       	ldd	r24, Y+2	; 0x02
     538:	9b 81       	ldd	r25, Y+3	; 0x03
     53a:	fc 01       	movw	r30, r24
     53c:	82 81       	ldd	r24, Z+2	; 0x02
     53e:	89 83       	std	Y+1, r24	; 0x01
	
	if (Ring_Buffer->Indexing_State == NONE
     540:	8a 81       	ldd	r24, Y+2	; 0x02
     542:	9b 81       	ldd	r25, Y+3	; 0x03
     544:	fc 01       	movw	r30, r24
     546:	82 85       	ldd	r24, Z+10	; 0x0a
     548:	88 23       	and	r24, r24
     54a:	61 f4       	brne	.+24     	; 0x564 <Read_from_Buffer+0x44>
	 && Ring_Buffer->Read_Index == Ring_Buffer->Write_Index) {
     54c:	8a 81       	ldd	r24, Y+2	; 0x02
     54e:	9b 81       	ldd	r25, Y+3	; 0x03
     550:	fc 01       	movw	r30, r24
     552:	22 81       	ldd	r18, Z+2	; 0x02
     554:	8a 81       	ldd	r24, Y+2	; 0x02
     556:	9b 81       	ldd	r25, Y+3	; 0x03
     558:	fc 01       	movw	r30, r24
     55a:	83 81       	ldd	r24, Z+3	; 0x03
     55c:	28 17       	cp	r18, r24
     55e:	11 f4       	brne	.+4      	; 0x564 <Read_from_Buffer+0x44>
		
		return BUFFER_EMPTY;
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	92 c0       	rjmp	.+292    	; 0x688 <Read_from_Buffer+0x168>
		
	}
	
	*Outgoing_Data = Ring_Buffer->Buffer[Ring_Buffer->Read_Index];
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	9b 81       	ldd	r25, Y+3	; 0x03
     568:	fc 01       	movw	r30, r24
     56a:	20 81       	ld	r18, Z
     56c:	31 81       	ldd	r19, Z+1	; 0x01
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	9b 81       	ldd	r25, Y+3	; 0x03
     572:	fc 01       	movw	r30, r24
     574:	82 81       	ldd	r24, Z+2	; 0x02
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	82 0f       	add	r24, r18
     57c:	93 1f       	adc	r25, r19
     57e:	fc 01       	movw	r30, r24
     580:	20 81       	ld	r18, Z
     582:	8c 81       	ldd	r24, Y+4	; 0x04
     584:	9d 81       	ldd	r25, Y+5	; 0x05
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
	
	switch(Ring_Buffer->Indexing_State){
     58a:	8a 81       	ldd	r24, Y+2	; 0x02
     58c:	9b 81       	ldd	r25, Y+3	; 0x03
     58e:	fc 01       	movw	r30, r24
     590:	82 85       	ldd	r24, Z+10	; 0x0a
     592:	88 2f       	mov	r24, r24
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	91 05       	cpc	r25, r1
     59a:	89 f0       	breq	.+34     	; 0x5be <Read_from_Buffer+0x9e>
     59c:	82 30       	cpi	r24, 0x02	; 2
     59e:	91 05       	cpc	r25, r1
     5a0:	51 f1       	breq	.+84     	; 0x5f6 <Read_from_Buffer+0xd6>
     5a2:	89 2b       	or	r24, r25
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <Read_from_Buffer+0x88>
     5a6:	5f c0       	rjmp	.+190    	; 0x666 <Read_from_Buffer+0x146>
		
		case NONE:
			
			Ring_Buffer->Read_Index++;
     5a8:	8a 81       	ldd	r24, Y+2	; 0x02
     5aa:	9b 81       	ldd	r25, Y+3	; 0x03
     5ac:	fc 01       	movw	r30, r24
     5ae:	82 81       	ldd	r24, Z+2	; 0x02
     5b0:	21 e0       	ldi	r18, 0x01	; 1
     5b2:	28 0f       	add	r18, r24
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	9b 81       	ldd	r25, Y+3	; 0x03
     5b8:	fc 01       	movw	r30, r24
     5ba:	22 83       	std	Z+2, r18	; 0x02
			break;
     5bc:	56 c0       	rjmp	.+172    	; 0x66a <Read_from_Buffer+0x14a>
		
		case WRITE_LEADS_READ:
		
			if(RB_Read_Index == Ring_Buffer->Size - 1){
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	28 2f       	mov	r18, r24
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	8a 81       	ldd	r24, Y+2	; 0x02
     5c6:	9b 81       	ldd	r25, Y+3	; 0x03
     5c8:	fc 01       	movw	r30, r24
     5ca:	84 81       	ldd	r24, Z+4	; 0x04
     5cc:	95 81       	ldd	r25, Z+5	; 0x05
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	28 17       	cp	r18, r24
     5d2:	39 07       	cpc	r19, r25
     5d4:	29 f4       	brne	.+10     	; 0x5e0 <Read_from_Buffer+0xc0>
					
				Ring_Buffer->Read_Index = 0;	
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	9b 81       	ldd	r25, Y+3	; 0x03
     5da:	fc 01       	movw	r30, r24
     5dc:	12 82       	std	Z+2, r1	; 0x02
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     5de:	45 c0       	rjmp	.+138    	; 0x66a <Read_from_Buffer+0x14a>
					
				Ring_Buffer->Read_Index = 0;	
				
			}else{
				
				Ring_Buffer->Read_Index++;
     5e0:	8a 81       	ldd	r24, Y+2	; 0x02
     5e2:	9b 81       	ldd	r25, Y+3	; 0x03
     5e4:	fc 01       	movw	r30, r24
     5e6:	82 81       	ldd	r24, Z+2	; 0x02
     5e8:	21 e0       	ldi	r18, 0x01	; 1
     5ea:	28 0f       	add	r18, r24
     5ec:	8a 81       	ldd	r24, Y+2	; 0x02
     5ee:	9b 81       	ldd	r25, Y+3	; 0x03
     5f0:	fc 01       	movw	r30, r24
     5f2:	22 83       	std	Z+2, r18	; 0x02
				
			}
		
			break;
     5f4:	3a c0       	rjmp	.+116    	; 0x66a <Read_from_Buffer+0x14a>
		
		case OVERFLOW:
		
			if(RB_Read_Index == (Ring_Buffer->Adjusted_Size - 1)){
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	28 2f       	mov	r18, r24
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	8a 81       	ldd	r24, Y+2	; 0x02
     5fe:	9b 81       	ldd	r25, Y+3	; 0x03
     600:	fc 01       	movw	r30, r24
     602:	87 81       	ldd	r24, Z+7	; 0x07
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	28 17       	cp	r18, r24
     60c:	39 07       	cpc	r19, r25
     60e:	29 f4       	brne	.+10     	; 0x61a <Read_from_Buffer+0xfa>
				
				Ring_Buffer->Read_Index = 0;
     610:	8a 81       	ldd	r24, Y+2	; 0x02
     612:	9b 81       	ldd	r25, Y+3	; 0x03
     614:	fc 01       	movw	r30, r24
     616:	12 82       	std	Z+2, r1	; 0x02
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     618:	28 c0       	rjmp	.+80     	; 0x66a <Read_from_Buffer+0x14a>
		
			if(RB_Read_Index == (Ring_Buffer->Adjusted_Size - 1)){
				
				Ring_Buffer->Read_Index = 0;
								
			}else if(RB_Read_Index == Ring_Buffer->Overflow_Index - 1){
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	28 2f       	mov	r18, r24
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	8a 81       	ldd	r24, Y+2	; 0x02
     622:	9b 81       	ldd	r25, Y+3	; 0x03
     624:	fc 01       	movw	r30, r24
     626:	81 85       	ldd	r24, Z+9	; 0x09
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	28 17       	cp	r18, r24
     630:	39 07       	cpc	r19, r25
     632:	71 f4       	brne	.+28     	; 0x650 <Read_from_Buffer+0x130>
				
				Ring_Buffer->Read_Index = Ring_Buffer->Wrap_Index;
     634:	8a 81       	ldd	r24, Y+2	; 0x02
     636:	9b 81       	ldd	r25, Y+3	; 0x03
     638:	fc 01       	movw	r30, r24
     63a:	20 85       	ldd	r18, Z+8	; 0x08
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	9b 81       	ldd	r25, Y+3	; 0x03
     640:	fc 01       	movw	r30, r24
     642:	22 83       	std	Z+2, r18	; 0x02
				Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
     644:	8a 81       	ldd	r24, Y+2	; 0x02
     646:	9b 81       	ldd	r25, Y+3	; 0x03
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	fc 01       	movw	r30, r24
     64c:	22 87       	std	Z+10, r18	; 0x0a
				
				Ring_Buffer->Read_Index++;
				
			}
		
			break;
     64e:	0d c0       	rjmp	.+26     	; 0x66a <Read_from_Buffer+0x14a>
				Ring_Buffer->Read_Index = Ring_Buffer->Wrap_Index;
				Ring_Buffer->Indexing_State = WRITE_LEADS_READ;
				
			}else{
				
				Ring_Buffer->Read_Index++;
     650:	8a 81       	ldd	r24, Y+2	; 0x02
     652:	9b 81       	ldd	r25, Y+3	; 0x03
     654:	fc 01       	movw	r30, r24
     656:	82 81       	ldd	r24, Z+2	; 0x02
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	28 0f       	add	r18, r24
     65c:	8a 81       	ldd	r24, Y+2	; 0x02
     65e:	9b 81       	ldd	r25, Y+3	; 0x03
     660:	fc 01       	movw	r30, r24
     662:	22 83       	std	Z+2, r18	; 0x02
				
			}
		
			break;
     664:	02 c0       	rjmp	.+4      	; 0x66a <Read_from_Buffer+0x14a>
		
		default:
		
			return BUFFER_FAULT;
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0f c0       	rjmp	.+30     	; 0x688 <Read_from_Buffer+0x168>
		
	}
	
	if(Ring_Buffer->Read_Index == Ring_Buffer->Write_Index){
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	9b 81       	ldd	r25, Y+3	; 0x03
     66e:	fc 01       	movw	r30, r24
     670:	22 81       	ldd	r18, Z+2	; 0x02
     672:	8a 81       	ldd	r24, Y+2	; 0x02
     674:	9b 81       	ldd	r25, Y+3	; 0x03
     676:	fc 01       	movw	r30, r24
     678:	83 81       	ldd	r24, Z+3	; 0x03
     67a:	28 17       	cp	r18, r24
     67c:	21 f4       	brne	.+8      	; 0x686 <Read_from_Buffer+0x166>
		Ring_Buffer->Indexing_State = NONE;
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	9b 81       	ldd	r25, Y+3	; 0x03
     682:	fc 01       	movw	r30, r24
     684:	12 86       	std	Z+10, r1	; 0x0a
	}
	
	return BUFFER_OK;
     686:	81 e0       	ldi	r24, 0x01	; 1
	
}
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <__vector_14>:

//------- Timer Definitions:

const uint8_t Max_ISR_Cycles = 150; // Max time the ISR will take to increment System_Ticks.

ISR(TIMER0_COMPA_vect){
     698:	1f 92       	push	r1
     69a:	0f 92       	push	r0
     69c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	2f 93       	push	r18
     6ae:	3f 93       	push	r19
     6b0:	4f 93       	push	r20
     6b2:	5f 93       	push	r21
     6b4:	8f 93       	push	r24
     6b6:	9f 93       	push	r25
     6b8:	af 93       	push	r26
     6ba:	bf 93       	push	r27
     6bc:	ef 93       	push	r30
     6be:	ff 93       	push	r31
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	1f 92       	push	r1
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
		
	if(Remaining_Ticks[_8_bit1] == 0){
     6ca:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x4>
     6ce:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x5>
     6d2:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0x6>
     6d6:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0x7>
     6da:	89 2b       	or	r24, r25
     6dc:	8a 2b       	or	r24, r26
     6de:	8b 2b       	or	r24, r27
     6e0:	69 f5       	brne	.+90     	; 0x73c <__vector_14+0xa4>
		
		PORTD ^= (1 << PORTD6);
     6e2:	8b e2       	ldi	r24, 0x2B	; 43
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	2b e2       	ldi	r18, 0x2B	; 43
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	f9 01       	movw	r30, r18
     6ec:	30 81       	ld	r19, Z
     6ee:	20 e4       	ldi	r18, 0x40	; 64
     6f0:	23 27       	eor	r18, r19
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
				
		if(Calculated_Ticks[_8_bit1] > 0){
     6f6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Calculated_Ticks+0x4>
     6fa:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Calculated_Ticks+0x5>
     6fe:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <Calculated_Ticks+0x6>
     702:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <Calculated_Ticks+0x7>
     706:	89 2b       	or	r24, r25
     708:	8a 2b       	or	r24, r26
     70a:	8b 2b       	or	r24, r27
     70c:	09 f4       	brne	.+2      	; 0x710 <__vector_14+0x78>
     70e:	51 c0       	rjmp	.+162    	; 0x7b2 <__vector_14+0x11a>
			
			Remaining_Ticks[_8_bit1] = Calculated_Ticks[_8_bit1]; // Reset the counter
     710:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Calculated_Ticks+0x4>
     714:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Calculated_Ticks+0x5>
     718:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <Calculated_Ticks+0x6>
     71c:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <Calculated_Ticks+0x7>
     720:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Remaining_Ticks+0x4>
     724:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <Remaining_Ticks+0x5>
     728:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <Remaining_Ticks+0x6>
     72c:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <Remaining_Ticks+0x7>
			OCR0A = 0xFF;
     730:	87 e4       	ldi	r24, 0x47	; 71
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	2f ef       	ldi	r18, 0xFF	; 255
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18
		OCR0A = NextOCR;
		Remaining_Ticks[_8_bit1] -= NextOCR;
		
	}
	
}
     73a:	3b c0       	rjmp	.+118    	; 0x7b2 <__vector_14+0x11a>
			
		}
		
	}else{

		uint8_t NextOCR = (Remaining_Ticks[_8_bit1] > 0xFF) ? 0xFF : (uint8_t)Remaining_Ticks[_8_bit1];
     73c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x4>
     740:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x5>
     744:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0x6>
     748:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0x7>
     74c:	8f 3f       	cpi	r24, 0xFF	; 255
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	09 f0       	breq	.+2      	; 0x758 <__vector_14+0xc0>
     756:	48 f4       	brcc	.+18     	; 0x76a <__vector_14+0xd2>
     758:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Remaining_Ticks+0x4>
     75c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Remaining_Ticks+0x5>
     760:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <Remaining_Ticks+0x6>
     764:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <Remaining_Ticks+0x7>
     768:	01 c0       	rjmp	.+2      	; 0x76c <__vector_14+0xd4>
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	89 83       	std	Y+1, r24	; 0x01

		OCR0A = NextOCR;
     76e:	87 e4       	ldi	r24, 0x47	; 71
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	29 81       	ldd	r18, Y+1	; 0x01
     774:	fc 01       	movw	r30, r24
     776:	20 83       	st	Z, r18
		Remaining_Ticks[_8_bit1] -= NextOCR;
     778:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Remaining_Ticks+0x4>
     77c:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <Remaining_Ticks+0x5>
     780:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <Remaining_Ticks+0x6>
     784:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <Remaining_Ticks+0x7>
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	a0 e0       	ldi	r26, 0x00	; 0
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	79 01       	movw	r14, r18
     794:	8a 01       	movw	r16, r20
     796:	e8 1a       	sub	r14, r24
     798:	f9 0a       	sbc	r15, r25
     79a:	0a 0b       	sbc	r16, r26
     79c:	1b 0b       	sbc	r17, r27
     79e:	d8 01       	movw	r26, r16
     7a0:	c7 01       	movw	r24, r14
     7a2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Remaining_Ticks+0x4>
     7a6:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <Remaining_Ticks+0x5>
     7aa:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <Remaining_Ticks+0x6>
     7ae:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <Remaining_Ticks+0x7>
		
	}
	
}
     7b2:	00 00       	nop
     7b4:	0f 90       	pop	r0
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	ff 91       	pop	r31
     7bc:	ef 91       	pop	r30
     7be:	bf 91       	pop	r27
     7c0:	af 91       	pop	r26
     7c2:	9f 91       	pop	r25
     7c4:	8f 91       	pop	r24
     7c6:	5f 91       	pop	r21
     7c8:	4f 91       	pop	r20
     7ca:	3f 91       	pop	r19
     7cc:	2f 91       	pop	r18
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	0f 90       	pop	r0
     7d8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <__vector_7>:

ISR(TIMER2_COMPA_vect){
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	af 92       	push	r10
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	2f 93       	push	r18
     800:	3f 93       	push	r19
     802:	4f 93       	push	r20
     804:	5f 93       	push	r21
     806:	6f 93       	push	r22
     808:	7f 93       	push	r23
     80a:	8f 93       	push	r24
     80c:	9f 93       	push	r25
     80e:	af 93       	push	r26
     810:	bf 93       	push	r27
     812:	ef 93       	push	r30
     814:	ff 93       	push	r31
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	1f 92       	push	r1
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
	
	if(Remaining_Ticks[_8_bit2] == 0){
     820:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Remaining_Ticks+0x8>
     824:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Remaining_Ticks+0x9>
     828:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <Remaining_Ticks+0xa>
     82c:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <Remaining_Ticks+0xb>
     830:	89 2b       	or	r24, r25
     832:	8a 2b       	or	r24, r26
     834:	8b 2b       	or	r24, r27
     836:	09 f0       	breq	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     838:	60 c0       	rjmp	.+192    	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		
		PORTD ^= (1 << PORTD7);
     83a:	8b e2       	ldi	r24, 0x2B	; 43
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	2b e2       	ldi	r18, 0x2B	; 43
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	f9 01       	movw	r30, r18
     844:	30 81       	ld	r19, Z
     846:	20 e8       	ldi	r18, 0x80	; 128
     848:	23 27       	eor	r18, r19
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18
		
		System_Ticks[_8_bit2]++; 
     84e:	a0 90 31 01 	lds	r10, 0x0131	; 0x800131 <System_Ticks+0x10>
     852:	b0 90 32 01 	lds	r11, 0x0132	; 0x800132 <System_Ticks+0x11>
     856:	c0 90 33 01 	lds	r12, 0x0133	; 0x800133 <System_Ticks+0x12>
     85a:	d0 90 34 01 	lds	r13, 0x0134	; 0x800134 <System_Ticks+0x13>
     85e:	e0 90 35 01 	lds	r14, 0x0135	; 0x800135 <System_Ticks+0x14>
     862:	f0 90 36 01 	lds	r15, 0x0136	; 0x800136 <System_Ticks+0x15>
     866:	00 91 37 01 	lds	r16, 0x0137	; 0x800137 <System_Ticks+0x16>
     86a:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <System_Ticks+0x17>
     86e:	2a 2d       	mov	r18, r10
     870:	3b 2d       	mov	r19, r11
     872:	4c 2d       	mov	r20, r12
     874:	5d 2d       	mov	r21, r13
     876:	6e 2d       	mov	r22, r14
     878:	7f 2d       	mov	r23, r15
     87a:	80 2f       	mov	r24, r16
     87c:	91 2f       	mov	r25, r17
     87e:	a1 e0       	ldi	r26, 0x01	; 1
     880:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__adddi3_s8>
     884:	a2 2e       	mov	r10, r18
     886:	b3 2e       	mov	r11, r19
     888:	c4 2e       	mov	r12, r20
     88a:	d5 2e       	mov	r13, r21
     88c:	e6 2e       	mov	r14, r22
     88e:	f7 2e       	mov	r15, r23
     890:	08 2f       	mov	r16, r24
     892:	19 2f       	mov	r17, r25
     894:	a0 92 31 01 	sts	0x0131, r10	; 0x800131 <System_Ticks+0x10>
     898:	b0 92 32 01 	sts	0x0132, r11	; 0x800132 <System_Ticks+0x11>
     89c:	c0 92 33 01 	sts	0x0133, r12	; 0x800133 <System_Ticks+0x12>
     8a0:	d0 92 34 01 	sts	0x0134, r13	; 0x800134 <System_Ticks+0x13>
     8a4:	e0 92 35 01 	sts	0x0135, r14	; 0x800135 <System_Ticks+0x14>
     8a8:	f0 92 36 01 	sts	0x0136, r15	; 0x800136 <System_Ticks+0x15>
     8ac:	00 93 37 01 	sts	0x0137, r16	; 0x800137 <System_Ticks+0x16>
     8b0:	10 93 38 01 	sts	0x0138, r17	; 0x800138 <System_Ticks+0x17>

		if(Calculated_Ticks[_8_bit2] > 0){
     8b4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Calculated_Ticks+0x8>
     8b8:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Calculated_Ticks+0x9>
     8bc:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <Calculated_Ticks+0xa>
     8c0:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <Calculated_Ticks+0xb>
     8c4:	89 2b       	or	r24, r25
     8c6:	8a 2b       	or	r24, r26
     8c8:	8b 2b       	or	r24, r27
     8ca:	09 f4       	brne	.+2      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
     8cc:	51 c0       	rjmp	.+162    	; 0x970 <__stack+0x71>
			
			Remaining_Ticks[_8_bit2] = Calculated_Ticks[_8_bit2]; 
     8ce:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Calculated_Ticks+0x8>
     8d2:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Calculated_Ticks+0x9>
     8d6:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <Calculated_Ticks+0xa>
     8da:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <Calculated_Ticks+0xb>
     8de:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Remaining_Ticks+0x8>
     8e2:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <Remaining_Ticks+0x9>
     8e6:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <Remaining_Ticks+0xa>
     8ea:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <Remaining_Ticks+0xb>
			OCR2A = 0xFF;
     8ee:	83 eb       	ldi	r24, 0xB3	; 179
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	fc 01       	movw	r30, r24
     8f6:	20 83       	st	Z, r18
		OCR2A = NextOCR;
		Remaining_Ticks[_8_bit2] -= NextOCR;
		
	}

}
     8f8:	3b c0       	rjmp	.+118    	; 0x970 <__stack+0x71>
			
		}
		
	}else{

		uint8_t NextOCR = (Remaining_Ticks[_8_bit2] > 0xFF) ? 0xFF : (uint8_t)Remaining_Ticks[_8_bit2];
     8fa:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Remaining_Ticks+0x8>
     8fe:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Remaining_Ticks+0x9>
     902:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <Remaining_Ticks+0xa>
     906:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <Remaining_Ticks+0xb>
     90a:	8f 3f       	cpi	r24, 0xFF	; 255
     90c:	91 05       	cpc	r25, r1
     90e:	a1 05       	cpc	r26, r1
     910:	b1 05       	cpc	r27, r1
     912:	09 f0       	breq	.+2      	; 0x916 <__stack+0x17>
     914:	48 f4       	brcc	.+18     	; 0x928 <__stack+0x29>
     916:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Remaining_Ticks+0x8>
     91a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Remaining_Ticks+0x9>
     91e:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <Remaining_Ticks+0xa>
     922:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <Remaining_Ticks+0xb>
     926:	01 c0       	rjmp	.+2      	; 0x92a <__stack+0x2b>
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	89 83       	std	Y+1, r24	; 0x01

		OCR2A = NextOCR;
     92c:	83 eb       	ldi	r24, 0xB3	; 179
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	29 81       	ldd	r18, Y+1	; 0x01
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
		Remaining_Ticks[_8_bit2] -= NextOCR;
     936:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <Remaining_Ticks+0x8>
     93a:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <Remaining_Ticks+0x9>
     93e:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <Remaining_Ticks+0xa>
     942:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <Remaining_Ticks+0xb>
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	88 2f       	mov	r24, r24
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	79 01       	movw	r14, r18
     952:	8a 01       	movw	r16, r20
     954:	e8 1a       	sub	r14, r24
     956:	f9 0a       	sbc	r15, r25
     958:	0a 0b       	sbc	r16, r26
     95a:	1b 0b       	sbc	r17, r27
     95c:	d8 01       	movw	r26, r16
     95e:	c7 01       	movw	r24, r14
     960:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Remaining_Ticks+0x8>
     964:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <Remaining_Ticks+0x9>
     968:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <Remaining_Ticks+0xa>
     96c:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <Remaining_Ticks+0xb>
		
	}

}
     970:	00 00       	nop
     972:	0f 90       	pop	r0
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	ff 91       	pop	r31
     97a:	ef 91       	pop	r30
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	7f 91       	pop	r23
     986:	6f 91       	pop	r22
     988:	5f 91       	pop	r21
     98a:	4f 91       	pop	r20
     98c:	3f 91       	pop	r19
     98e:	2f 91       	pop	r18
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	0f 90       	pop	r0
     9a2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     9a6:	0f 90       	pop	r0
     9a8:	1f 90       	pop	r1
     9aa:	18 95       	reti

000009ac <__vector_11>:


ISR(TIMER1_COMPA_vect){
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     9b4:	0f 92       	push	r0
     9b6:	11 24       	eor	r1, r1
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	2f 93       	push	r18
     9ca:	3f 93       	push	r19
     9cc:	4f 93       	push	r20
     9ce:	5f 93       	push	r21
     9d0:	6f 93       	push	r22
     9d2:	7f 93       	push	r23
     9d4:	8f 93       	push	r24
     9d6:	9f 93       	push	r25
     9d8:	af 93       	push	r26
     9da:	bf 93       	push	r27
     9dc:	ef 93       	push	r30
     9de:	ff 93       	push	r31
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <__vector_11+0x3a>
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
	
	if(Remaining_Ticks[_16_bit] == 0){
     9ea:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks>
     9ee:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x1>
     9f2:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x2>
     9f6:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x3>
     9fa:	89 2b       	or	r24, r25
     9fc:	8a 2b       	or	r24, r26
     9fe:	8b 2b       	or	r24, r27
     a00:	09 f0       	breq	.+2      	; 0xa04 <__vector_11+0x58>
     a02:	65 c0       	rjmp	.+202    	; 0xace <__vector_11+0x122>
		
		PORTB ^= (1 << PORTB0);
     a04:	85 e2       	ldi	r24, 0x25	; 37
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	25 e2       	ldi	r18, 0x25	; 37
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	f9 01       	movw	r30, r18
     a0e:	30 81       	ld	r19, Z
     a10:	21 e0       	ldi	r18, 0x01	; 1
     a12:	23 27       	eor	r18, r19
     a14:	fc 01       	movw	r30, r24
     a16:	20 83       	st	Z, r18
		
		System_Ticks[_16_bit]++;
     a18:	a0 90 21 01 	lds	r10, 0x0121	; 0x800121 <System_Ticks>
     a1c:	b0 90 22 01 	lds	r11, 0x0122	; 0x800122 <System_Ticks+0x1>
     a20:	c0 90 23 01 	lds	r12, 0x0123	; 0x800123 <System_Ticks+0x2>
     a24:	d0 90 24 01 	lds	r13, 0x0124	; 0x800124 <System_Ticks+0x3>
     a28:	e0 90 25 01 	lds	r14, 0x0125	; 0x800125 <System_Ticks+0x4>
     a2c:	f0 90 26 01 	lds	r15, 0x0126	; 0x800126 <System_Ticks+0x5>
     a30:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <System_Ticks+0x6>
     a34:	10 91 28 01 	lds	r17, 0x0128	; 0x800128 <System_Ticks+0x7>
     a38:	2a 2d       	mov	r18, r10
     a3a:	3b 2d       	mov	r19, r11
     a3c:	4c 2d       	mov	r20, r12
     a3e:	5d 2d       	mov	r21, r13
     a40:	6e 2d       	mov	r22, r14
     a42:	7f 2d       	mov	r23, r15
     a44:	80 2f       	mov	r24, r16
     a46:	91 2f       	mov	r25, r17
     a48:	a1 e0       	ldi	r26, 0x01	; 1
     a4a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__adddi3_s8>
     a4e:	a2 2e       	mov	r10, r18
     a50:	b3 2e       	mov	r11, r19
     a52:	c4 2e       	mov	r12, r20
     a54:	d5 2e       	mov	r13, r21
     a56:	e6 2e       	mov	r14, r22
     a58:	f7 2e       	mov	r15, r23
     a5a:	08 2f       	mov	r16, r24
     a5c:	19 2f       	mov	r17, r25
     a5e:	a0 92 21 01 	sts	0x0121, r10	; 0x800121 <System_Ticks>
     a62:	b0 92 22 01 	sts	0x0122, r11	; 0x800122 <System_Ticks+0x1>
     a66:	c0 92 23 01 	sts	0x0123, r12	; 0x800123 <System_Ticks+0x2>
     a6a:	d0 92 24 01 	sts	0x0124, r13	; 0x800124 <System_Ticks+0x3>
     a6e:	e0 92 25 01 	sts	0x0125, r14	; 0x800125 <System_Ticks+0x4>
     a72:	f0 92 26 01 	sts	0x0126, r15	; 0x800126 <System_Ticks+0x5>
     a76:	00 93 27 01 	sts	0x0127, r16	; 0x800127 <System_Ticks+0x6>
     a7a:	10 93 28 01 	sts	0x0128, r17	; 0x800128 <System_Ticks+0x7>
		
		if(Calculated_Ticks[_16_bit] > 0){
     a7e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Calculated_Ticks>
     a82:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Calculated_Ticks+0x1>
     a86:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Calculated_Ticks+0x2>
     a8a:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Calculated_Ticks+0x3>
     a8e:	89 2b       	or	r24, r25
     a90:	8a 2b       	or	r24, r26
     a92:	8b 2b       	or	r24, r27
     a94:	09 f4       	brne	.+2      	; 0xa98 <__vector_11+0xec>
     a96:	58 c0       	rjmp	.+176    	; 0xb48 <__vector_11+0x19c>
			
			Remaining_Ticks[_16_bit] = Calculated_Ticks[_16_bit];
     a98:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Calculated_Ticks>
     a9c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Calculated_Ticks+0x1>
     aa0:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Calculated_Ticks+0x2>
     aa4:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Calculated_Ticks+0x3>
     aa8:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Remaining_Ticks>
     aac:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <Remaining_Ticks+0x1>
     ab0:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <Remaining_Ticks+0x2>
     ab4:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <Remaining_Ticks+0x3>
			OCR1AH = 0xFF;
     ab8:	89 e8       	ldi	r24, 0x89	; 137
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	2f ef       	ldi	r18, 0xFF	; 255
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
			OCR1AL = 0xFF;
     ac2:	88 e8       	ldi	r24, 0x88	; 136
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	2f ef       	ldi	r18, 0xFF	; 255
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
		OCR1A = NextOCR;
		Remaining_Ticks[_16_bit] -= NextOCR;
		
	}
	
}
     acc:	3d c0       	rjmp	.+122    	; 0xb48 <__vector_11+0x19c>
			
		}
		
	}else{
		
		uint16_t NextOCR = (Remaining_Ticks[_16_bit] > 0xFFFF) ? 0xFFFF : (uint16_t)Remaining_Ticks[_16_bit];
     ace:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks>
     ad2:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x1>
     ad6:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x2>
     ada:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x3>
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	a1 40       	sbci	r26, 0x01	; 1
     ae2:	b1 05       	cpc	r27, r1
     ae4:	48 f4       	brcc	.+18     	; 0xaf8 <__vector_11+0x14c>
     ae6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Remaining_Ticks>
     aea:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Remaining_Ticks+0x1>
     aee:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Remaining_Ticks+0x2>
     af2:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Remaining_Ticks+0x3>
     af6:	02 c0       	rjmp	.+4      	; 0xafc <__vector_11+0x150>
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	9f ef       	ldi	r25, 0xFF	; 255
     afc:	9a 83       	std	Y+2, r25	; 0x02
     afe:	89 83       	std	Y+1, r24	; 0x01
		
		OCR1A = NextOCR;
     b00:	88 e8       	ldi	r24, 0x88	; 136
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	29 81       	ldd	r18, Y+1	; 0x01
     b06:	3a 81       	ldd	r19, Y+2	; 0x02
     b08:	fc 01       	movw	r30, r24
     b0a:	31 83       	std	Z+1, r19	; 0x01
     b0c:	20 83       	st	Z, r18
		Remaining_Ticks[_16_bit] -= NextOCR;
     b0e:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <Remaining_Ticks>
     b12:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <Remaining_Ticks+0x1>
     b16:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <Remaining_Ticks+0x2>
     b1a:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <Remaining_Ticks+0x3>
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
     b22:	cc 01       	movw	r24, r24
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	79 01       	movw	r14, r18
     b2a:	8a 01       	movw	r16, r20
     b2c:	e8 1a       	sub	r14, r24
     b2e:	f9 0a       	sbc	r15, r25
     b30:	0a 0b       	sbc	r16, r26
     b32:	1b 0b       	sbc	r17, r27
     b34:	d8 01       	movw	r26, r16
     b36:	c7 01       	movw	r24, r14
     b38:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Remaining_Ticks>
     b3c:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <Remaining_Ticks+0x1>
     b40:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <Remaining_Ticks+0x2>
     b44:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <Remaining_Ticks+0x3>
		
	}
	
}
     b48:	00 00       	nop
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	ff 91       	pop	r31
     b54:	ef 91       	pop	r30
     b56:	bf 91       	pop	r27
     b58:	af 91       	pop	r26
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	7f 91       	pop	r23
     b60:	6f 91       	pop	r22
     b62:	5f 91       	pop	r21
     b64:	4f 91       	pop	r20
     b66:	3f 91       	pop	r19
     b68:	2f 91       	pop	r18
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	df 90       	pop	r13
     b74:	cf 90       	pop	r12
     b76:	bf 90       	pop	r11
     b78:	af 90       	pop	r10
     b7a:	0f 90       	pop	r0
     b7c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <Set_Prescaler>:

Timer_Status Set_Prescaler(Timers Timer, uint16_t Prescaler){
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <Set_Prescaler+0x6>
     b8c:	1f 92       	push	r1
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	7b 83       	std	Y+3, r23	; 0x03
     b96:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Timer){
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	91 05       	cpc	r25, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <Set_Prescaler+0x20>
     ba4:	50 c0       	rjmp	.+160    	; 0xc46 <Set_Prescaler+0xc0>
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	91 05       	cpc	r25, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <Set_Prescaler+0x28>
     bac:	95 c0       	rjmp	.+298    	; 0xcd8 <Set_Prescaler+0x152>
     bae:	89 2b       	or	r24, r25
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <Set_Prescaler+0x2e>
     bb2:	db c0       	rjmp	.+438    	; 0xd6a <Set_Prescaler+0x1e4>
		
		case _16_bit:
		
			switch(Prescaler){ // Don't need to clear TCCRxB, as it will be assigned:
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	9b 81       	ldd	r25, Y+3	; 0x03
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	29 f1       	breq	.+74     	; 0xc08 <Set_Prescaler+0x82>
     bbe:	81 34       	cpi	r24, 0x41	; 65
     bc0:	91 05       	cpc	r25, r1
     bc2:	30 f4       	brcc	.+12     	; 0xbd0 <Set_Prescaler+0x4a>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	91 05       	cpc	r25, r1
     bc8:	59 f0       	breq	.+22     	; 0xbe0 <Set_Prescaler+0x5a>
     bca:	08 97       	sbiw	r24, 0x08	; 8
     bcc:	99 f0       	breq	.+38     	; 0xbf4 <Set_Prescaler+0x6e>
				TCCR1B |= (1 << CS12) | (1 << CS10);
				break;
				
			}
			
			break;
     bce:	cf c0       	rjmp	.+414    	; 0xd6e <Set_Prescaler+0x1e8>
	
	switch(Timer){
		
		case _16_bit:
		
			switch(Prescaler){ // Don't need to clear TCCRxB, as it will be assigned:
     bd0:	81 15       	cp	r24, r1
     bd2:	21 e0       	ldi	r18, 0x01	; 1
     bd4:	92 07       	cpc	r25, r18
     bd6:	11 f1       	breq	.+68     	; 0xc1c <Set_Prescaler+0x96>
     bd8:	81 15       	cp	r24, r1
     bda:	94 40       	sbci	r25, 0x04	; 4
     bdc:	49 f1       	breq	.+82     	; 0xc30 <Set_Prescaler+0xaa>
				TCCR1B |= (1 << CS12) | (1 << CS10);
				break;
				
			}
			
			break;
     bde:	c7 c0       	rjmp	.+398    	; 0xd6e <Set_Prescaler+0x1e8>
		
			switch(Prescaler){ // Don't need to clear TCCRxB, as it will be assigned:
				
				case 1:
				
				TCCR1B |= (1 << CS10);
     be0:	81 e8       	ldi	r24, 0x81	; 129
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	21 e8       	ldi	r18, 0x81	; 129
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	f9 01       	movw	r30, r18
     bea:	20 81       	ld	r18, Z
     bec:	21 60       	ori	r18, 0x01	; 1
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18
				break;
     bf2:	28 c0       	rjmp	.+80     	; 0xc44 <Set_Prescaler+0xbe>
				
				case 8:
				
				TCCR1B |= (1 << CS11);
     bf4:	81 e8       	ldi	r24, 0x81	; 129
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	21 e8       	ldi	r18, 0x81	; 129
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	f9 01       	movw	r30, r18
     bfe:	20 81       	ld	r18, Z
     c00:	22 60       	ori	r18, 0x02	; 2
     c02:	fc 01       	movw	r30, r24
     c04:	20 83       	st	Z, r18
				break;
     c06:	1e c0       	rjmp	.+60     	; 0xc44 <Set_Prescaler+0xbe>
				
				case 64:
				
				TCCR1B |= (1 << CS11) | (1 << CS10);
     c08:	81 e8       	ldi	r24, 0x81	; 129
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	21 e8       	ldi	r18, 0x81	; 129
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	f9 01       	movw	r30, r18
     c12:	20 81       	ld	r18, Z
     c14:	23 60       	ori	r18, 0x03	; 3
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18
				break;
     c1a:	14 c0       	rjmp	.+40     	; 0xc44 <Set_Prescaler+0xbe>
				
				case 256:
				
				TCCR1B |= (1 << CS12);
     c1c:	81 e8       	ldi	r24, 0x81	; 129
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	21 e8       	ldi	r18, 0x81	; 129
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	f9 01       	movw	r30, r18
     c26:	20 81       	ld	r18, Z
     c28:	24 60       	ori	r18, 0x04	; 4
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18
				break;
     c2e:	0a c0       	rjmp	.+20     	; 0xc44 <Set_Prescaler+0xbe>
				
				case 1024:
				
				TCCR1B |= (1 << CS12) | (1 << CS10);
     c30:	81 e8       	ldi	r24, 0x81	; 129
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	21 e8       	ldi	r18, 0x81	; 129
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	f9 01       	movw	r30, r18
     c3a:	20 81       	ld	r18, Z
     c3c:	25 60       	ori	r18, 0x05	; 5
     c3e:	fc 01       	movw	r30, r24
     c40:	20 83       	st	Z, r18
				break;
     c42:	00 00       	nop
				
			}
			
			break;
     c44:	94 c0       	rjmp	.+296    	; 0xd6e <Set_Prescaler+0x1e8>
		
		case _8_bit1:
		
			switch(Prescaler){
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	9b 81       	ldd	r25, Y+3	; 0x03
     c4a:	80 34       	cpi	r24, 0x40	; 64
     c4c:	91 05       	cpc	r25, r1
     c4e:	29 f1       	breq	.+74     	; 0xc9a <Set_Prescaler+0x114>
     c50:	81 34       	cpi	r24, 0x41	; 65
     c52:	91 05       	cpc	r25, r1
     c54:	30 f4       	brcc	.+12     	; 0xc62 <Set_Prescaler+0xdc>
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	59 f0       	breq	.+22     	; 0xc72 <Set_Prescaler+0xec>
     c5c:	08 97       	sbiw	r24, 0x08	; 8
     c5e:	99 f0       	breq	.+38     	; 0xc86 <Set_Prescaler+0x100>
				TCCR0B |= (1 << CS02) | (1 << CS00);
				break;
				
			}
			
			break;
     c60:	86 c0       	rjmp	.+268    	; 0xd6e <Set_Prescaler+0x1e8>
			
			break;
		
		case _8_bit1:
		
			switch(Prescaler){
     c62:	81 15       	cp	r24, r1
     c64:	f1 e0       	ldi	r31, 0x01	; 1
     c66:	9f 07       	cpc	r25, r31
     c68:	11 f1       	breq	.+68     	; 0xcae <Set_Prescaler+0x128>
     c6a:	81 15       	cp	r24, r1
     c6c:	94 40       	sbci	r25, 0x04	; 4
     c6e:	49 f1       	breq	.+82     	; 0xcc2 <Set_Prescaler+0x13c>
				TCCR0B |= (1 << CS02) | (1 << CS00);
				break;
				
			}
			
			break;
     c70:	7e c0       	rjmp	.+252    	; 0xd6e <Set_Prescaler+0x1e8>
		
			switch(Prescaler){
				
				case 1:
				
				TCCR0B |= (1 << CS00);
     c72:	85 e4       	ldi	r24, 0x45	; 69
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	25 e4       	ldi	r18, 0x45	; 69
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	f9 01       	movw	r30, r18
     c7c:	20 81       	ld	r18, Z
     c7e:	21 60       	ori	r18, 0x01	; 1
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
				break;
     c84:	28 c0       	rjmp	.+80     	; 0xcd6 <Set_Prescaler+0x150>
				
				case 8:
				
				TCCR0B |= (1 << CS01);
     c86:	85 e4       	ldi	r24, 0x45	; 69
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	25 e4       	ldi	r18, 0x45	; 69
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	f9 01       	movw	r30, r18
     c90:	20 81       	ld	r18, Z
     c92:	22 60       	ori	r18, 0x02	; 2
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18
				break;
     c98:	1e c0       	rjmp	.+60     	; 0xcd6 <Set_Prescaler+0x150>
				
				case 64:
				
				TCCR0B |= (1 << CS01) | (1 << CS00);
     c9a:	85 e4       	ldi	r24, 0x45	; 69
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	25 e4       	ldi	r18, 0x45	; 69
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	f9 01       	movw	r30, r18
     ca4:	20 81       	ld	r18, Z
     ca6:	23 60       	ori	r18, 0x03	; 3
     ca8:	fc 01       	movw	r30, r24
     caa:	20 83       	st	Z, r18
				break;
     cac:	14 c0       	rjmp	.+40     	; 0xcd6 <Set_Prescaler+0x150>
				
				case 256:
				
				TCCR0B |= (1 << CS02);
     cae:	85 e4       	ldi	r24, 0x45	; 69
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	25 e4       	ldi	r18, 0x45	; 69
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	f9 01       	movw	r30, r18
     cb8:	20 81       	ld	r18, Z
     cba:	24 60       	ori	r18, 0x04	; 4
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 83       	st	Z, r18
				break;
     cc0:	0a c0       	rjmp	.+20     	; 0xcd6 <Set_Prescaler+0x150>
				
				case 1024:
				
				TCCR0B |= (1 << CS02) | (1 << CS00);
     cc2:	85 e4       	ldi	r24, 0x45	; 69
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	25 e4       	ldi	r18, 0x45	; 69
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	f9 01       	movw	r30, r18
     ccc:	20 81       	ld	r18, Z
     cce:	25 60       	ori	r18, 0x05	; 5
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 83       	st	Z, r18
				break;
     cd4:	00 00       	nop
				
			}
			
			break;
     cd6:	4b c0       	rjmp	.+150    	; 0xd6e <Set_Prescaler+0x1e8>
		
		case _8_bit2:
		
			switch(Prescaler){
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	9b 81       	ldd	r25, Y+3	; 0x03
     cdc:	80 34       	cpi	r24, 0x40	; 64
     cde:	91 05       	cpc	r25, r1
     ce0:	29 f1       	breq	.+74     	; 0xd2c <Set_Prescaler+0x1a6>
     ce2:	81 34       	cpi	r24, 0x41	; 65
     ce4:	91 05       	cpc	r25, r1
     ce6:	30 f4       	brcc	.+12     	; 0xcf4 <Set_Prescaler+0x16e>
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	91 05       	cpc	r25, r1
     cec:	59 f0       	breq	.+22     	; 0xd04 <Set_Prescaler+0x17e>
     cee:	08 97       	sbiw	r24, 0x08	; 8
     cf0:	99 f0       	breq	.+38     	; 0xd18 <Set_Prescaler+0x192>
				TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
				break;
				
			}
			
			break;
     cf2:	3d c0       	rjmp	.+122    	; 0xd6e <Set_Prescaler+0x1e8>
			
			break;
		
		case _8_bit2:
		
			switch(Prescaler){
     cf4:	81 15       	cp	r24, r1
     cf6:	f1 e0       	ldi	r31, 0x01	; 1
     cf8:	9f 07       	cpc	r25, r31
     cfa:	11 f1       	breq	.+68     	; 0xd40 <Set_Prescaler+0x1ba>
     cfc:	81 15       	cp	r24, r1
     cfe:	94 40       	sbci	r25, 0x04	; 4
     d00:	49 f1       	breq	.+82     	; 0xd54 <Set_Prescaler+0x1ce>
				TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
				break;
				
			}
			
			break;
     d02:	35 c0       	rjmp	.+106    	; 0xd6e <Set_Prescaler+0x1e8>
		
			switch(Prescaler){
				
				case 1:
				
				TCCR2B |= (1 << CS20);
     d04:	81 eb       	ldi	r24, 0xB1	; 177
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	21 eb       	ldi	r18, 0xB1	; 177
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	f9 01       	movw	r30, r18
     d0e:	20 81       	ld	r18, Z
     d10:	21 60       	ori	r18, 0x01	; 1
     d12:	fc 01       	movw	r30, r24
     d14:	20 83       	st	Z, r18
				break;
     d16:	28 c0       	rjmp	.+80     	; 0xd68 <Set_Prescaler+0x1e2>
				
				case 8:
				
				TCCR2B |= (1 << CS21);
     d18:	81 eb       	ldi	r24, 0xB1	; 177
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	21 eb       	ldi	r18, 0xB1	; 177
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	f9 01       	movw	r30, r18
     d22:	20 81       	ld	r18, Z
     d24:	22 60       	ori	r18, 0x02	; 2
     d26:	fc 01       	movw	r30, r24
     d28:	20 83       	st	Z, r18
				break;
     d2a:	1e c0       	rjmp	.+60     	; 0xd68 <Set_Prescaler+0x1e2>
				
				case 64:
				
				TCCR2B |= (1 << CS22);
     d2c:	81 eb       	ldi	r24, 0xB1	; 177
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	21 eb       	ldi	r18, 0xB1	; 177
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	f9 01       	movw	r30, r18
     d36:	20 81       	ld	r18, Z
     d38:	24 60       	ori	r18, 0x04	; 4
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 83       	st	Z, r18
				break;
     d3e:	14 c0       	rjmp	.+40     	; 0xd68 <Set_Prescaler+0x1e2>
				
				case 256:
				
				TCCR2B |= (1 << CS22) |  (1<<CS21);
     d40:	81 eb       	ldi	r24, 0xB1	; 177
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	21 eb       	ldi	r18, 0xB1	; 177
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	f9 01       	movw	r30, r18
     d4a:	20 81       	ld	r18, Z
     d4c:	26 60       	ori	r18, 0x06	; 6
     d4e:	fc 01       	movw	r30, r24
     d50:	20 83       	st	Z, r18
				break;
     d52:	0a c0       	rjmp	.+20     	; 0xd68 <Set_Prescaler+0x1e2>
				
				case 1024:
				
				TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
     d54:	81 eb       	ldi	r24, 0xB1	; 177
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	21 eb       	ldi	r18, 0xB1	; 177
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	f9 01       	movw	r30, r18
     d5e:	20 81       	ld	r18, Z
     d60:	27 60       	ori	r18, 0x07	; 7
     d62:	fc 01       	movw	r30, r24
     d64:	20 83       	st	Z, r18
				break;
     d66:	00 00       	nop
				
			}
			
			break;
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <Set_Prescaler+0x1e8>
		
		default:
		
			return TIMER_FAULT;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <Set_Prescaler+0x1ea>

	}
	
	return TIMER_OK;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
	
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <Configure_Timer>:


Timer_Status Configure_Timer(uint16_t Time, uint32_t Unit, Timers Selected_Timer){ // All relevent types were optimized by calculating the largest possible values to Configure_Timer_Step()
     d7c:	2f 92       	push	r2
     d7e:	3f 92       	push	r3
     d80:	4f 92       	push	r4
     d82:	5f 92       	push	r5
     d84:	6f 92       	push	r6
     d86:	7f 92       	push	r7
     d88:	8f 92       	push	r8
     d8a:	9f 92       	push	r9
     d8c:	af 92       	push	r10
     d8e:	bf 92       	push	r11
     d90:	cf 92       	push	r12
     d92:	df 92       	push	r13
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	e1 97       	sbiw	r28, 0x31	; 49
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	9c a7       	std	Y+44, r25	; 0x2c
     db2:	8b a7       	std	Y+43, r24	; 0x2b
     db4:	4d a7       	std	Y+45, r20	; 0x2d
     db6:	5e a7       	std	Y+46, r21	; 0x2e
     db8:	6f a7       	std	Y+47, r22	; 0x2f
     dba:	78 ab       	std	Y+48, r23	; 0x30
     dbc:	29 ab       	std	Y+49, r18	; 0x31
	
	if(TC_CLK == 0){ 
     dbe:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <TC_CLK>
     dc2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <TC_CLK+0x1>
     dc6:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <TC_CLK+0x2>
     dca:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <TC_CLK+0x3>
     dce:	89 2b       	or	r24, r25
     dd0:	8a 2b       	or	r24, r26
     dd2:	8b 2b       	or	r24, r27
     dd4:	11 f4       	brne	.+4      	; 0xdda <Configure_Timer+0x5e>
		return TIMER_FAULT;
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	b2 c3       	rjmp	.+1892   	; 0x153e <Configure_Timer+0x7c2>
	}
	
	if(Unit == 0){
     dda:	8d a5       	ldd	r24, Y+45	; 0x2d
     ddc:	9e a5       	ldd	r25, Y+46	; 0x2e
     dde:	af a5       	ldd	r26, Y+47	; 0x2f
     de0:	b8 a9       	ldd	r27, Y+48	; 0x30
     de2:	89 2b       	or	r24, r25
     de4:	8a 2b       	or	r24, r26
     de6:	8b 2b       	or	r24, r27
     de8:	11 f4       	brne	.+4      	; 0xdee <Configure_Timer+0x72>
		return TIMER_FAULT;
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	a8 c3       	rjmp	.+1872   	; 0x153e <Configure_Timer+0x7c2>
	}
	
	if((uint64_t)TC_CLK * Time/Unit <= Max_ISR_Cycles){ // If the requested tick is shorter than or equal to the max time it takes to increment System_Ticks, return error state
     dee:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <TC_CLK>
     df2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <TC_CLK+0x1>
     df6:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <TC_CLK+0x2>
     dfa:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <TC_CLK+0x3>
     dfe:	1c 01       	movw	r2, r24
     e00:	2d 01       	movw	r4, r26
     e02:	61 2c       	mov	r6, r1
     e04:	71 2c       	mov	r7, r1
     e06:	43 01       	movw	r8, r6
     e08:	8b a5       	ldd	r24, Y+43	; 0x2b
     e0a:	9c a5       	ldd	r25, Y+44	; 0x2c
     e0c:	9c 01       	movw	r18, r24
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	cb 01       	movw	r24, r22
     e18:	a2 2e       	mov	r10, r18
     e1a:	b3 2e       	mov	r11, r19
     e1c:	c4 2e       	mov	r12, r20
     e1e:	d5 2e       	mov	r13, r21
     e20:	e6 2e       	mov	r14, r22
     e22:	f7 2e       	mov	r15, r23
     e24:	08 2f       	mov	r16, r24
     e26:	19 2f       	mov	r17, r25
     e28:	22 2d       	mov	r18, r2
     e2a:	33 2d       	mov	r19, r3
     e2c:	44 2d       	mov	r20, r4
     e2e:	55 2d       	mov	r21, r5
     e30:	66 2d       	mov	r22, r6
     e32:	77 2d       	mov	r23, r7
     e34:	88 2d       	mov	r24, r8
     e36:	99 2d       	mov	r25, r9
     e38:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__muldi3>
     e3c:	a2 2e       	mov	r10, r18
     e3e:	b3 2e       	mov	r11, r19
     e40:	c4 2e       	mov	r12, r20
     e42:	d5 2e       	mov	r13, r21
     e44:	e6 2e       	mov	r14, r22
     e46:	f7 2e       	mov	r15, r23
     e48:	08 2f       	mov	r16, r24
     e4a:	19 2f       	mov	r17, r25
     e4c:	2a 2c       	mov	r2, r10
     e4e:	3b 2c       	mov	r3, r11
     e50:	4c 2c       	mov	r4, r12
     e52:	5d 2c       	mov	r5, r13
     e54:	6e 2c       	mov	r6, r14
     e56:	7f 2c       	mov	r7, r15
     e58:	80 2e       	mov	r8, r16
     e5a:	91 2e       	mov	r9, r17
     e5c:	8d a5       	ldd	r24, Y+45	; 0x2d
     e5e:	9e a5       	ldd	r25, Y+46	; 0x2e
     e60:	af a5       	ldd	r26, Y+47	; 0x2f
     e62:	b8 a9       	ldd	r27, Y+48	; 0x30
     e64:	9c 01       	movw	r18, r24
     e66:	ad 01       	movw	r20, r26
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	cb 01       	movw	r24, r22
     e6e:	a2 2e       	mov	r10, r18
     e70:	b3 2e       	mov	r11, r19
     e72:	c4 2e       	mov	r12, r20
     e74:	d5 2e       	mov	r13, r21
     e76:	e6 2e       	mov	r14, r22
     e78:	f7 2e       	mov	r15, r23
     e7a:	08 2f       	mov	r16, r24
     e7c:	19 2f       	mov	r17, r25
     e7e:	22 2d       	mov	r18, r2
     e80:	33 2d       	mov	r19, r3
     e82:	44 2d       	mov	r20, r4
     e84:	55 2d       	mov	r21, r5
     e86:	66 2d       	mov	r22, r6
     e88:	77 2d       	mov	r23, r7
     e8a:	88 2d       	mov	r24, r8
     e8c:	99 2d       	mov	r25, r9
     e8e:	0e 94 2e 0b 	call	0x165c	; 0x165c <__udivdi3>
     e92:	22 2e       	mov	r2, r18
     e94:	33 2e       	mov	r3, r19
     e96:	44 2e       	mov	r4, r20
     e98:	55 2e       	mov	r5, r21
     e9a:	66 2e       	mov	r6, r22
     e9c:	77 2e       	mov	r7, r23
     e9e:	88 2e       	mov	r8, r24
     ea0:	99 2e       	mov	r9, r25
     ea2:	a2 2c       	mov	r10, r2
     ea4:	b3 2c       	mov	r11, r3
     ea6:	c4 2c       	mov	r12, r4
     ea8:	d5 2c       	mov	r13, r5
     eaa:	e6 2c       	mov	r14, r6
     eac:	f7 2c       	mov	r15, r7
     eae:	08 2d       	mov	r16, r8
     eb0:	19 2d       	mov	r17, r9
     eb2:	86 e9       	ldi	r24, 0x96	; 150
     eb4:	28 2e       	mov	r2, r24
     eb6:	31 2c       	mov	r3, r1
     eb8:	41 2c       	mov	r4, r1
     eba:	51 2c       	mov	r5, r1
     ebc:	61 2c       	mov	r6, r1
     ebe:	71 2c       	mov	r7, r1
     ec0:	43 01       	movw	r8, r6
     ec2:	2a 2d       	mov	r18, r10
     ec4:	3b 2d       	mov	r19, r11
     ec6:	4c 2d       	mov	r20, r12
     ec8:	5d 2d       	mov	r21, r13
     eca:	6e 2d       	mov	r22, r14
     ecc:	7f 2d       	mov	r23, r15
     ece:	80 2f       	mov	r24, r16
     ed0:	91 2f       	mov	r25, r17
     ed2:	a2 2c       	mov	r10, r2
     ed4:	b3 2c       	mov	r11, r3
     ed6:	c4 2c       	mov	r12, r4
     ed8:	d5 2c       	mov	r13, r5
     eda:	e6 2c       	mov	r14, r6
     edc:	f7 2c       	mov	r15, r7
     ede:	08 2d       	mov	r16, r8
     ee0:	19 2d       	mov	r17, r9
     ee2:	0e 94 be 0b 	call	0x177c	; 0x177c <__cmpdi2>
     ee6:	09 f0       	breq	.+2      	; 0xeea <Configure_Timer+0x16e>
     ee8:	10 f4       	brcc	.+4      	; 0xeee <Configure_Timer+0x172>
		return TIMER_FAULT;
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	28 c3       	rjmp	.+1616   	; 0x153e <Configure_Timer+0x7c2>
		Adjusted_Cycles = ((TC_CLK + (F_CLK/2))/F_CLK) * Avg_ISR_Cycles;
	} */

	// Disable the timer interrupts as the timer is being re-configured:

	uint64_t Numerator = Time * TC_CLK;
     eee:	8b a5       	ldd	r24, Y+43	; 0x2b
     ef0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ef2:	9c 01       	movw	r18, r24
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <TC_CLK>
     efc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <TC_CLK+0x1>
     f00:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <TC_CLK+0x2>
     f04:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <TC_CLK+0x3>
     f08:	bc 01       	movw	r22, r24
     f0a:	cd 01       	movw	r24, r26
     f0c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__mulsi3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	9c 01       	movw	r18, r24
     f16:	ad 01       	movw	r20, r26
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	cb 01       	movw	r24, r22
     f1e:	28 87       	std	Y+8, r18	; 0x08
     f20:	39 87       	std	Y+9, r19	; 0x09
     f22:	4a 87       	std	Y+10, r20	; 0x0a
     f24:	5b 87       	std	Y+11, r21	; 0x0b
     f26:	6c 87       	std	Y+12, r22	; 0x0c
     f28:	7d 87       	std	Y+13, r23	; 0x0d
     f2a:	8e 87       	std	Y+14, r24	; 0x0e
     f2c:	9f 87       	std	Y+15, r25	; 0x0f
	uint64_t Scaled_Ticks = Numerator / Unit; // How many times we have to count for the requested time to have passed at the current clock frequency
     f2e:	8d a5       	ldd	r24, Y+45	; 0x2d
     f30:	9e a5       	ldd	r25, Y+46	; 0x2e
     f32:	af a5       	ldd	r26, Y+47	; 0x2f
     f34:	b8 a9       	ldd	r27, Y+48	; 0x30
     f36:	9c 01       	movw	r18, r24
     f38:	ad 01       	movw	r20, r26
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	cb 01       	movw	r24, r22
     f40:	a2 2e       	mov	r10, r18
     f42:	b3 2e       	mov	r11, r19
     f44:	c4 2e       	mov	r12, r20
     f46:	d5 2e       	mov	r13, r21
     f48:	e6 2e       	mov	r14, r22
     f4a:	f7 2e       	mov	r15, r23
     f4c:	08 2f       	mov	r16, r24
     f4e:	19 2f       	mov	r17, r25
     f50:	28 85       	ldd	r18, Y+8	; 0x08
     f52:	39 85       	ldd	r19, Y+9	; 0x09
     f54:	4a 85       	ldd	r20, Y+10	; 0x0a
     f56:	5b 85       	ldd	r21, Y+11	; 0x0b
     f58:	6c 85       	ldd	r22, Y+12	; 0x0c
     f5a:	7d 85       	ldd	r23, Y+13	; 0x0d
     f5c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f5e:	9f 85       	ldd	r25, Y+15	; 0x0f
     f60:	0e 94 2e 0b 	call	0x165c	; 0x165c <__udivdi3>
     f64:	a2 2e       	mov	r10, r18
     f66:	b3 2e       	mov	r11, r19
     f68:	c4 2e       	mov	r12, r20
     f6a:	d5 2e       	mov	r13, r21
     f6c:	e6 2e       	mov	r14, r22
     f6e:	f7 2e       	mov	r15, r23
     f70:	08 2f       	mov	r16, r24
     f72:	19 2f       	mov	r17, r25
     f74:	a8 8a       	std	Y+16, r10	; 0x10
     f76:	b9 8a       	std	Y+17, r11	; 0x11
     f78:	ca 8a       	std	Y+18, r12	; 0x12
     f7a:	db 8a       	std	Y+19, r13	; 0x13
     f7c:	ec 8a       	std	Y+20, r14	; 0x14
     f7e:	fd 8a       	std	Y+21, r15	; 0x15
     f80:	0e 8b       	std	Y+22, r16	; 0x16
     f82:	1f 8b       	std	Y+23, r17	; 0x17
	
	uint16_t Prescaler = 0;
     f84:	1a 82       	std	Y+2, r1	; 0x02
     f86:	19 82       	std	Y+1, r1	; 0x01
	uint32_t Calculated_Prescaler = 0; // Ensures that OCRxA is <= (2^n - 1)
     f88:	1b 82       	std	Y+3, r1	; 0x03
     f8a:	1c 82       	std	Y+4, r1	; 0x04
     f8c:	1d 82       	std	Y+5, r1	; 0x05
     f8e:	1e 82       	std	Y+6, r1	; 0x06
	
	switch(Selected_Timer){
     f90:	89 a9       	ldd	r24, Y+49	; 0x31
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	91 05       	cpc	r25, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <Configure_Timer+0x222>
     f9c:	51 c0       	rjmp	.+162    	; 0x1040 <Configure_Timer+0x2c4>
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	91 05       	cpc	r25, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <Configure_Timer+0x22a>
     fa4:	96 c0       	rjmp	.+300    	; 0x10d2 <Configure_Timer+0x356>
     fa6:	89 2b       	or	r24, r25
     fa8:	09 f0       	breq	.+2      	; 0xfac <Configure_Timer+0x230>
     faa:	dc c0       	rjmp	.+440    	; 0x1164 <Configure_Timer+0x3e8>
		
		case _16_bit:
			
			TIMSK1 = TIMSK1 & ~(1 << OCIE1A); // Disable the timer interrupt as it is being reconfigured.
     fac:	8f e6       	ldi	r24, 0x6F	; 111
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	2f e6       	ldi	r18, 0x6F	; 111
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	f9 01       	movw	r30, r18
     fb6:	20 81       	ld	r18, Z
     fb8:	2d 7f       	andi	r18, 0xFD	; 253
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18

			Calculated_Prescaler = (Scaled_Ticks+65534)/65535; // Ceiling function
     fbe:	28 89       	ldd	r18, Y+16	; 0x10
     fc0:	39 89       	ldd	r19, Y+17	; 0x11
     fc2:	4a 89       	ldd	r20, Y+18	; 0x12
     fc4:	5b 89       	ldd	r21, Y+19	; 0x13
     fc6:	6c 89       	ldd	r22, Y+20	; 0x14
     fc8:	7d 89       	ldd	r23, Y+21	; 0x15
     fca:	8e 89       	ldd	r24, Y+22	; 0x16
     fcc:	9f 89       	ldd	r25, Y+23	; 0x17
     fce:	22 50       	subi	r18, 0x02	; 2
     fd0:	31 09       	sbc	r19, r1
     fd2:	4f 4f       	sbci	r20, 0xFF	; 255
     fd4:	5f 4f       	sbci	r21, 0xFF	; 255
     fd6:	6f 4f       	sbci	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	22 2e       	mov	r2, r18
     fe0:	33 2e       	mov	r3, r19
     fe2:	44 2e       	mov	r4, r20
     fe4:	55 2e       	mov	r5, r21
     fe6:	66 2e       	mov	r6, r22
     fe8:	77 2e       	mov	r7, r23
     fea:	88 2e       	mov	r8, r24
     fec:	99 2e       	mov	r9, r25
     fee:	aa 24       	eor	r10, r10
     ff0:	aa 94       	dec	r10
     ff2:	bb 24       	eor	r11, r11
     ff4:	ba 94       	dec	r11
     ff6:	c1 2c       	mov	r12, r1
     ff8:	d1 2c       	mov	r13, r1
     ffa:	e1 2c       	mov	r14, r1
     ffc:	f1 2c       	mov	r15, r1
     ffe:	00 e0       	ldi	r16, 0x00	; 0
    1000:	10 e0       	ldi	r17, 0x00	; 0
    1002:	22 2d       	mov	r18, r2
    1004:	33 2d       	mov	r19, r3
    1006:	44 2d       	mov	r20, r4
    1008:	55 2d       	mov	r21, r5
    100a:	66 2d       	mov	r22, r6
    100c:	77 2d       	mov	r23, r7
    100e:	88 2d       	mov	r24, r8
    1010:	99 2d       	mov	r25, r9
    1012:	0e 94 2e 0b 	call	0x165c	; 0x165c <__udivdi3>
    1016:	a2 2e       	mov	r10, r18
    1018:	b3 2e       	mov	r11, r19
    101a:	c4 2e       	mov	r12, r20
    101c:	d5 2e       	mov	r13, r21
    101e:	e6 2e       	mov	r14, r22
    1020:	f7 2e       	mov	r15, r23
    1022:	08 2f       	mov	r16, r24
    1024:	19 2f       	mov	r17, r25
    1026:	2a 2d       	mov	r18, r10
    1028:	3b 2d       	mov	r19, r11
    102a:	4c 2d       	mov	r20, r12
    102c:	5d 2d       	mov	r21, r13
    102e:	6e 2d       	mov	r22, r14
    1030:	7f 2d       	mov	r23, r15
    1032:	80 2f       	mov	r24, r16
    1034:	91 2f       	mov	r25, r17
    1036:	2b 83       	std	Y+3, r18	; 0x03
    1038:	3c 83       	std	Y+4, r19	; 0x04
    103a:	4d 83       	std	Y+5, r20	; 0x05
    103c:	5e 83       	std	Y+6, r21	; 0x06

			break;
    103e:	94 c0       	rjmp	.+296    	; 0x1168 <Configure_Timer+0x3ec>
		
		case _8_bit1:
			
			TIMSK0 = TIMSK0 & ~(1 << OCIE0A);
    1040:	8e e6       	ldi	r24, 0x6E	; 110
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	2e e6       	ldi	r18, 0x6E	; 110
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	f9 01       	movw	r30, r18
    104a:	20 81       	ld	r18, Z
    104c:	2d 7f       	andi	r18, 0xFD	; 253
    104e:	fc 01       	movw	r30, r24
    1050:	20 83       	st	Z, r18
			
			Calculated_Prescaler = (Scaled_Ticks+254)/255;
    1052:	28 89       	ldd	r18, Y+16	; 0x10
    1054:	39 89       	ldd	r19, Y+17	; 0x11
    1056:	4a 89       	ldd	r20, Y+18	; 0x12
    1058:	5b 89       	ldd	r21, Y+19	; 0x13
    105a:	6c 89       	ldd	r22, Y+20	; 0x14
    105c:	7d 89       	ldd	r23, Y+21	; 0x15
    105e:	8e 89       	ldd	r24, Y+22	; 0x16
    1060:	9f 89       	ldd	r25, Y+23	; 0x17
    1062:	22 50       	subi	r18, 0x02	; 2
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	4f 4f       	sbci	r20, 0xFF	; 255
    1068:	5f 4f       	sbci	r21, 0xFF	; 255
    106a:	6f 4f       	sbci	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	8f 4f       	sbci	r24, 0xFF	; 255
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	22 2e       	mov	r2, r18
    1074:	33 2e       	mov	r3, r19
    1076:	44 2e       	mov	r4, r20
    1078:	55 2e       	mov	r5, r21
    107a:	66 2e       	mov	r6, r22
    107c:	77 2e       	mov	r7, r23
    107e:	88 2e       	mov	r8, r24
    1080:	99 2e       	mov	r9, r25
    1082:	aa 24       	eor	r10, r10
    1084:	aa 94       	dec	r10
    1086:	b1 2c       	mov	r11, r1
    1088:	c1 2c       	mov	r12, r1
    108a:	d1 2c       	mov	r13, r1
    108c:	e1 2c       	mov	r14, r1
    108e:	f1 2c       	mov	r15, r1
    1090:	00 e0       	ldi	r16, 0x00	; 0
    1092:	10 e0       	ldi	r17, 0x00	; 0
    1094:	22 2d       	mov	r18, r2
    1096:	33 2d       	mov	r19, r3
    1098:	44 2d       	mov	r20, r4
    109a:	55 2d       	mov	r21, r5
    109c:	66 2d       	mov	r22, r6
    109e:	77 2d       	mov	r23, r7
    10a0:	88 2d       	mov	r24, r8
    10a2:	99 2d       	mov	r25, r9
    10a4:	0e 94 2e 0b 	call	0x165c	; 0x165c <__udivdi3>
    10a8:	a2 2e       	mov	r10, r18
    10aa:	b3 2e       	mov	r11, r19
    10ac:	c4 2e       	mov	r12, r20
    10ae:	d5 2e       	mov	r13, r21
    10b0:	e6 2e       	mov	r14, r22
    10b2:	f7 2e       	mov	r15, r23
    10b4:	08 2f       	mov	r16, r24
    10b6:	19 2f       	mov	r17, r25
    10b8:	2a 2d       	mov	r18, r10
    10ba:	3b 2d       	mov	r19, r11
    10bc:	4c 2d       	mov	r20, r12
    10be:	5d 2d       	mov	r21, r13
    10c0:	6e 2d       	mov	r22, r14
    10c2:	7f 2d       	mov	r23, r15
    10c4:	80 2f       	mov	r24, r16
    10c6:	91 2f       	mov	r25, r17
    10c8:	2b 83       	std	Y+3, r18	; 0x03
    10ca:	3c 83       	std	Y+4, r19	; 0x04
    10cc:	4d 83       	std	Y+5, r20	; 0x05
    10ce:	5e 83       	std	Y+6, r21	; 0x06
			
			break;
    10d0:	4b c0       	rjmp	.+150    	; 0x1168 <Configure_Timer+0x3ec>
			
		case _8_bit2:
			
			TIMSK2 = TIMSK2 & ~(1 << OCIE2A);
    10d2:	80 e7       	ldi	r24, 0x70	; 112
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	20 e7       	ldi	r18, 0x70	; 112
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	f9 01       	movw	r30, r18
    10dc:	20 81       	ld	r18, Z
    10de:	2d 7f       	andi	r18, 0xFD	; 253
    10e0:	fc 01       	movw	r30, r24
    10e2:	20 83       	st	Z, r18
			
			Calculated_Prescaler = (Scaled_Ticks+254)/255;
    10e4:	28 89       	ldd	r18, Y+16	; 0x10
    10e6:	39 89       	ldd	r19, Y+17	; 0x11
    10e8:	4a 89       	ldd	r20, Y+18	; 0x12
    10ea:	5b 89       	ldd	r21, Y+19	; 0x13
    10ec:	6c 89       	ldd	r22, Y+20	; 0x14
    10ee:	7d 89       	ldd	r23, Y+21	; 0x15
    10f0:	8e 89       	ldd	r24, Y+22	; 0x16
    10f2:	9f 89       	ldd	r25, Y+23	; 0x17
    10f4:	22 50       	subi	r18, 0x02	; 2
    10f6:	3f 4f       	sbci	r19, 0xFF	; 255
    10f8:	4f 4f       	sbci	r20, 0xFF	; 255
    10fa:	5f 4f       	sbci	r21, 0xFF	; 255
    10fc:	6f 4f       	sbci	r22, 0xFF	; 255
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	8f 4f       	sbci	r24, 0xFF	; 255
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	22 2e       	mov	r2, r18
    1106:	33 2e       	mov	r3, r19
    1108:	44 2e       	mov	r4, r20
    110a:	55 2e       	mov	r5, r21
    110c:	66 2e       	mov	r6, r22
    110e:	77 2e       	mov	r7, r23
    1110:	88 2e       	mov	r8, r24
    1112:	99 2e       	mov	r9, r25
    1114:	aa 24       	eor	r10, r10
    1116:	aa 94       	dec	r10
    1118:	b1 2c       	mov	r11, r1
    111a:	c1 2c       	mov	r12, r1
    111c:	d1 2c       	mov	r13, r1
    111e:	e1 2c       	mov	r14, r1
    1120:	f1 2c       	mov	r15, r1
    1122:	00 e0       	ldi	r16, 0x00	; 0
    1124:	10 e0       	ldi	r17, 0x00	; 0
    1126:	22 2d       	mov	r18, r2
    1128:	33 2d       	mov	r19, r3
    112a:	44 2d       	mov	r20, r4
    112c:	55 2d       	mov	r21, r5
    112e:	66 2d       	mov	r22, r6
    1130:	77 2d       	mov	r23, r7
    1132:	88 2d       	mov	r24, r8
    1134:	99 2d       	mov	r25, r9
    1136:	0e 94 2e 0b 	call	0x165c	; 0x165c <__udivdi3>
    113a:	a2 2e       	mov	r10, r18
    113c:	b3 2e       	mov	r11, r19
    113e:	c4 2e       	mov	r12, r20
    1140:	d5 2e       	mov	r13, r21
    1142:	e6 2e       	mov	r14, r22
    1144:	f7 2e       	mov	r15, r23
    1146:	08 2f       	mov	r16, r24
    1148:	19 2f       	mov	r17, r25
    114a:	2a 2d       	mov	r18, r10
    114c:	3b 2d       	mov	r19, r11
    114e:	4c 2d       	mov	r20, r12
    1150:	5d 2d       	mov	r21, r13
    1152:	6e 2d       	mov	r22, r14
    1154:	7f 2d       	mov	r23, r15
    1156:	80 2f       	mov	r24, r16
    1158:	91 2f       	mov	r25, r17
    115a:	2b 83       	std	Y+3, r18	; 0x03
    115c:	3c 83       	std	Y+4, r19	; 0x04
    115e:	4d 83       	std	Y+5, r20	; 0x05
    1160:	5e 83       	std	Y+6, r21	; 0x06
		
			break;
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <Configure_Timer+0x3ec>
			
		default:
		
			return TIMER_FAULT;
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	eb c1       	rjmp	.+982    	; 0x153e <Configure_Timer+0x7c2>
		
	}


	if(Calculated_Prescaler > 1024){  // The required count will overflow the selected timer, even with the largest available prescaler
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	ad 81       	ldd	r26, Y+5	; 0x05
    116e:	be 81       	ldd	r27, Y+6	; 0x06
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	94 40       	sbci	r25, 0x04	; 4
    1174:	a1 05       	cpc	r26, r1
    1176:	b1 05       	cpc	r27, r1
    1178:	08 f4       	brcc	.+2      	; 0x117c <Configure_Timer+0x400>
    117a:	91 c0       	rjmp	.+290    	; 0x129e <Configure_Timer+0x522>

		Prescaler = 1024;
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	94 e0       	ldi	r25, 0x04	; 4
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
		
		//Adjusted_Cycles = (((TC_CLK + (F_CLK*Prescaler/2))/F_CLK*Prescaler) * Avg_ISR_Cycles); // I may revisit this. Quite challenging to get right, and even harder to get consistently right
		
		Calculated_Ticks[Selected_Timer] = (Scaled_Ticks >> 10);
    1184:	89 a9       	ldd	r24, Y+49	; 0x31
    1186:	e8 2f       	mov	r30, r24
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	28 89       	ldd	r18, Y+16	; 0x10
    118c:	39 89       	ldd	r19, Y+17	; 0x11
    118e:	4a 89       	ldd	r20, Y+18	; 0x12
    1190:	5b 89       	ldd	r21, Y+19	; 0x13
    1192:	6c 89       	ldd	r22, Y+20	; 0x14
    1194:	7d 89       	ldd	r23, Y+21	; 0x15
    1196:	8e 89       	ldd	r24, Y+22	; 0x16
    1198:	9f 89       	ldd	r25, Y+23	; 0x17
    119a:	0a e0       	ldi	r16, 0x0A	; 10
    119c:	0e 94 8d 0b 	call	0x171a	; 0x171a <__lshrdi3>
    11a0:	a2 2e       	mov	r10, r18
    11a2:	b3 2e       	mov	r11, r19
    11a4:	c4 2e       	mov	r12, r20
    11a6:	d5 2e       	mov	r13, r21
    11a8:	e6 2e       	mov	r14, r22
    11aa:	f7 2e       	mov	r15, r23
    11ac:	08 2f       	mov	r16, r24
    11ae:	19 2f       	mov	r17, r25
    11b0:	d6 01       	movw	r26, r12
    11b2:	c5 01       	movw	r24, r10
    11b4:	9f 01       	movw	r18, r30
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	27 5c       	subi	r18, 0xC7	; 199
    11c0:	3e 4f       	sbci	r19, 0xFE	; 254
    11c2:	f9 01       	movw	r30, r18
    11c4:	80 83       	st	Z, r24
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	a2 83       	std	Z+2, r26	; 0x02
    11ca:	b3 83       	std	Z+3, r27	; 0x03
		
		Remaining_Ticks[Selected_Timer] = Calculated_Ticks[Selected_Timer];
    11cc:	89 a9       	ldd	r24, Y+49	; 0x31
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	89 a9       	ldd	r24, Y+49	; 0x31
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	87 5c       	subi	r24, 0xC7	; 199
    11e2:	9e 4f       	sbci	r25, 0xFE	; 254
    11e4:	fc 01       	movw	r30, r24
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	a2 81       	ldd	r26, Z+2	; 0x02
    11ec:	b3 81       	ldd	r27, Z+3	; 0x03
    11ee:	22 0f       	add	r18, r18
    11f0:	33 1f       	adc	r19, r19
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	2b 5b       	subi	r18, 0xBB	; 187
    11f8:	3e 4f       	sbci	r19, 0xFE	; 254
    11fa:	f9 01       	movw	r30, r18
    11fc:	80 83       	st	Z, r24
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	a2 83       	std	Z+2, r26	; 0x02
    1202:	b3 83       	std	Z+3, r27	; 0x03
		
		switch(Selected_Timer){
    1204:	89 a9       	ldd	r24, Y+49	; 0x31
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	d9 f0       	breq	.+54     	; 0x1246 <Configure_Timer+0x4ca>
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	91 05       	cpc	r25, r1
    1214:	69 f1       	breq	.+90     	; 0x1270 <Configure_Timer+0x4f4>
    1216:	89 2b       	or	r24, r25
    1218:	09 f0       	breq	.+2      	; 0x121c <Configure_Timer+0x4a0>
    121a:	3f c0       	rjmp	.+126    	; 0x129a <Configure_Timer+0x51e>
			
			case _16_bit:
				
				TCCR1B = (1 << CS12) | (1 << CS10) | (1 << WGM12); // Set prescaler to 1024, CTC mode (TCCR = Timer counter control register)
    121c:	81 e8       	ldi	r24, 0x81	; 129
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	2d e0       	ldi	r18, 0x0D	; 13
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18
								
				OCR1AH = 0xFF;
    1226:	89 e8       	ldi	r24, 0x89	; 137
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	2f ef       	ldi	r18, 0xFF	; 255
    122c:	fc 01       	movw	r30, r24
    122e:	20 83       	st	Z, r18
				OCR1AL = 0xFF; // Timer begins
    1230:	88 e8       	ldi	r24, 0x88	; 136
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	2f ef       	ldi	r18, 0xFF	; 255
    1236:	fc 01       	movw	r30, r24
    1238:	20 83       	st	Z, r18
				
				TIMSK1 = (1 << OCIE1A); // Timer/Counter1 Interrupt Mask Register -> Enabled interrupt for progrm at TIMER1_COMPA_vect to be executed on compare match
    123a:	8f e6       	ldi	r24, 0x6F	; 111
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	22 e0       	ldi	r18, 0x02	; 2
    1240:	fc 01       	movw	r30, r24
    1242:	20 83       	st	Z, r18
				break;
    1244:	2a c0       	rjmp	.+84     	; 0x129a <Configure_Timer+0x51e>
			
			case _8_bit1:
				
				TCCR0A = (1 << WGM01);
    1246:	84 e4       	ldi	r24, 0x44	; 68
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	22 e0       	ldi	r18, 0x02	; 2
    124c:	fc 01       	movw	r30, r24
    124e:	20 83       	st	Z, r18
				TCCR0B = (1 << CS02) | (1 << CS00);
    1250:	85 e4       	ldi	r24, 0x45	; 69
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	25 e0       	ldi	r18, 0x05	; 5
    1256:	fc 01       	movw	r30, r24
    1258:	20 83       	st	Z, r18
				
				TIMSK0 = (1 << OCIE0A);
    125a:	8e e6       	ldi	r24, 0x6E	; 110
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	22 e0       	ldi	r18, 0x02	; 2
    1260:	fc 01       	movw	r30, r24
    1262:	20 83       	st	Z, r18
				
				OCR0A = 0xFF;
    1264:	87 e4       	ldi	r24, 0x47	; 71
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	2f ef       	ldi	r18, 0xFF	; 255
    126a:	fc 01       	movw	r30, r24
    126c:	20 83       	st	Z, r18
				break;
    126e:	15 c0       	rjmp	.+42     	; 0x129a <Configure_Timer+0x51e>
			
			case _8_bit2:

				TCCR2A = (1 << WGM21);
    1270:	80 eb       	ldi	r24, 0xB0	; 176
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	22 e0       	ldi	r18, 0x02	; 2
    1276:	fc 01       	movw	r30, r24
    1278:	20 83       	st	Z, r18
				TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);
    127a:	81 eb       	ldi	r24, 0xB1	; 177
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	27 e0       	ldi	r18, 0x07	; 7
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18

				TIMSK2 = (1 << OCIE2A);
    1284:	80 e7       	ldi	r24, 0x70	; 112
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	22 e0       	ldi	r18, 0x02	; 2
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
	
				OCR2A = 0xFF;
    128e:	83 eb       	ldi	r24, 0xB3	; 179
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	2f ef       	ldi	r18, 0xFF	; 255
    1294:	fc 01       	movw	r30, r24
    1296:	20 83       	st	Z, r18
				break;
    1298:	00 00       	nop
			
		}
		
		return TIMER_OK;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	50 c1       	rjmp	.+672    	; 0x153e <Configure_Timer+0x7c2>
		
	}else{
		
		Calculated_Ticks[Selected_Timer] = 0;
    129e:	89 a9       	ldd	r24, Y+49	; 0x31
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	87 5c       	subi	r24, 0xC7	; 199
    12ae:	9e 4f       	sbci	r25, 0xFE	; 254
    12b0:	fc 01       	movw	r30, r24
    12b2:	10 82       	st	Z, r1
    12b4:	11 82       	std	Z+1, r1	; 0x01
    12b6:	12 82       	std	Z+2, r1	; 0x02
    12b8:	13 82       	std	Z+3, r1	; 0x03
		
		uint16_t Clock_Dividers[5] = {1, 8, 64, 256, 1024}; 
    12ba:	8a e0       	ldi	r24, 0x0A	; 10
    12bc:	ea e0       	ldi	r30, 0x0A	; 10
    12be:	f1 e0       	ldi	r31, 0x01	; 1
    12c0:	de 01       	movw	r26, r28
    12c2:	91 96       	adiw	r26, 0x21	; 33
    12c4:	01 90       	ld	r0, Z+
    12c6:	0d 92       	st	X+, r0
    12c8:	8a 95       	dec	r24
    12ca:	e1 f7       	brne	.-8      	; 0x12c4 <Configure_Timer+0x548>
		
		for(uint8_t i = 0; i <= 4; i++){  // Logic to ensure that the Raw_Count <= uint16_t
    12cc:	1f 82       	std	Y+7, r1	; 0x07
    12ce:	2e c0       	rjmp	.+92     	; 0x132c <Configure_Timer+0x5b0>
			
			if(Clock_Dividers[i] >= Calculated_Prescaler){
    12d0:	8f 81       	ldd	r24, Y+7	; 0x07
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	9e 01       	movw	r18, r28
    12dc:	2f 5f       	subi	r18, 0xFF	; 255
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	82 0f       	add	r24, r18
    12e2:	93 1f       	adc	r25, r19
    12e4:	80 96       	adiw	r24, 0x20	; 32
    12e6:	fc 01       	movw	r30, r24
    12e8:	80 81       	ld	r24, Z
    12ea:	91 81       	ldd	r25, Z+1	; 0x01
    12ec:	9c 01       	movw	r18, r24
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	ad 81       	ldd	r26, Y+5	; 0x05
    12f8:	be 81       	ldd	r27, Y+6	; 0x06
    12fa:	28 17       	cp	r18, r24
    12fc:	39 07       	cpc	r19, r25
    12fe:	4a 07       	cpc	r20, r26
    1300:	5b 07       	cpc	r21, r27
    1302:	88 f0       	brcs	.+34     	; 0x1326 <Configure_Timer+0x5aa>
				Prescaler = Clock_Dividers[i];
    1304:	8f 81       	ldd	r24, Y+7	; 0x07
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	9e 01       	movw	r18, r28
    1310:	2f 5f       	subi	r18, 0xFF	; 255
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	82 0f       	add	r24, r18
    1316:	93 1f       	adc	r25, r19
    1318:	80 96       	adiw	r24, 0x20	; 32
    131a:	fc 01       	movw	r30, r24
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	89 83       	std	Y+1, r24	; 0x01
				break;
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <Configure_Timer+0x5b6>
		
		Calculated_Ticks[Selected_Timer] = 0;
		
		uint16_t Clock_Dividers[5] = {1, 8, 64, 256, 1024}; 
		
		for(uint8_t i = 0; i <= 4; i++){  // Logic to ensure that the Raw_Count <= uint16_t
    1326:	8f 81       	ldd	r24, Y+7	; 0x07
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	8f 83       	std	Y+7, r24	; 0x07
    132c:	8f 81       	ldd	r24, Y+7	; 0x07
    132e:	85 30       	cpi	r24, 0x05	; 5
    1330:	78 f2       	brcs	.-98     	; 0x12d0 <Configure_Timer+0x554>
			}
			
		}
	}
	
	uint32_t Denominator =  Prescaler * Unit;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	9c 01       	movw	r18, r24
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	8d a5       	ldd	r24, Y+45	; 0x2d
    133e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1340:	af a5       	ldd	r26, Y+47	; 0x2f
    1342:	b8 a9       	ldd	r27, Y+48	; 0x30
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__mulsi3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	88 8f       	std	Y+24, r24	; 0x18
    1352:	99 8f       	std	Y+25, r25	; 0x19
    1354:	aa 8f       	std	Y+26, r26	; 0x1a
    1356:	bb 8f       	std	Y+27, r27	; 0x1b

	if(Denominator == 0) return TIMER_FAULT;
    1358:	88 8d       	ldd	r24, Y+24	; 0x18
    135a:	99 8d       	ldd	r25, Y+25	; 0x19
    135c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    135e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1360:	89 2b       	or	r24, r25
    1362:	8a 2b       	or	r24, r26
    1364:	8b 2b       	or	r24, r27
    1366:	11 f4       	brne	.+4      	; 0x136c <Configure_Timer+0x5f0>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	e9 c0       	rjmp	.+466    	; 0x153e <Configure_Timer+0x7c2>
	
	//Adjusted_Cycles = (((TC_CLK + (F_CLK*Prescaler/2))/F_CLK*Prescaler) * Avg_ISR_Cycles); 
	
	// Rounding integer division (A new trick I learned) reduces error of Timer_Top ideally to +- 0.5:
	
	uint32_t Timer_Top = ((Numerator + (Denominator/2)) / Denominator); 
    136c:	88 8d       	ldd	r24, Y+24	; 0x18
    136e:	99 8d       	ldd	r25, Y+25	; 0x19
    1370:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1372:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1374:	b6 95       	lsr	r27
    1376:	a7 95       	ror	r26
    1378:	97 95       	ror	r25
    137a:	87 95       	ror	r24
    137c:	5c 01       	movw	r10, r24
    137e:	6d 01       	movw	r12, r26
    1380:	e1 2c       	mov	r14, r1
    1382:	f1 2c       	mov	r15, r1
    1384:	87 01       	movw	r16, r14
    1386:	2a 2d       	mov	r18, r10
    1388:	3b 2d       	mov	r19, r11
    138a:	4c 2d       	mov	r20, r12
    138c:	5d 2d       	mov	r21, r13
    138e:	6e 2d       	mov	r22, r14
    1390:	7f 2d       	mov	r23, r15
    1392:	80 2f       	mov	r24, r16
    1394:	91 2f       	mov	r25, r17
    1396:	a8 84       	ldd	r10, Y+8	; 0x08
    1398:	b9 84       	ldd	r11, Y+9	; 0x09
    139a:	ca 84       	ldd	r12, Y+10	; 0x0a
    139c:	db 84       	ldd	r13, Y+11	; 0x0b
    139e:	ec 84       	ldd	r14, Y+12	; 0x0c
    13a0:	fd 84       	ldd	r15, Y+13	; 0x0d
    13a2:	0e 85       	ldd	r16, Y+14	; 0x0e
    13a4:	1f 85       	ldd	r17, Y+15	; 0x0f
    13a6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__adddi3>
    13aa:	22 2e       	mov	r2, r18
    13ac:	33 2e       	mov	r3, r19
    13ae:	44 2e       	mov	r4, r20
    13b0:	55 2e       	mov	r5, r21
    13b2:	66 2e       	mov	r6, r22
    13b4:	77 2e       	mov	r7, r23
    13b6:	88 2e       	mov	r8, r24
    13b8:	99 2e       	mov	r9, r25
    13ba:	88 8d       	ldd	r24, Y+24	; 0x18
    13bc:	99 8d       	ldd	r25, Y+25	; 0x19
    13be:	aa 8d       	ldd	r26, Y+26	; 0x1a
    13c0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    13c2:	9c 01       	movw	r18, r24
    13c4:	ad 01       	movw	r20, r26
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	cb 01       	movw	r24, r22
    13cc:	a2 2e       	mov	r10, r18
    13ce:	b3 2e       	mov	r11, r19
    13d0:	c4 2e       	mov	r12, r20
    13d2:	d5 2e       	mov	r13, r21
    13d4:	e6 2e       	mov	r14, r22
    13d6:	f7 2e       	mov	r15, r23
    13d8:	08 2f       	mov	r16, r24
    13da:	19 2f       	mov	r17, r25
    13dc:	22 2d       	mov	r18, r2
    13de:	33 2d       	mov	r19, r3
    13e0:	44 2d       	mov	r20, r4
    13e2:	55 2d       	mov	r21, r5
    13e4:	66 2d       	mov	r22, r6
    13e6:	77 2d       	mov	r23, r7
    13e8:	88 2d       	mov	r24, r8
    13ea:	99 2d       	mov	r25, r9
    13ec:	0e 94 2e 0b 	call	0x165c	; 0x165c <__udivdi3>
    13f0:	a2 2e       	mov	r10, r18
    13f2:	b3 2e       	mov	r11, r19
    13f4:	c4 2e       	mov	r12, r20
    13f6:	d5 2e       	mov	r13, r21
    13f8:	e6 2e       	mov	r14, r22
    13fa:	f7 2e       	mov	r15, r23
    13fc:	08 2f       	mov	r16, r24
    13fe:	19 2f       	mov	r17, r25
    1400:	2a 2d       	mov	r18, r10
    1402:	3b 2d       	mov	r19, r11
    1404:	4c 2d       	mov	r20, r12
    1406:	5d 2d       	mov	r21, r13
    1408:	6e 2d       	mov	r22, r14
    140a:	7f 2d       	mov	r23, r15
    140c:	80 2f       	mov	r24, r16
    140e:	91 2f       	mov	r25, r17
    1410:	2c 8f       	std	Y+28, r18	; 0x1c
    1412:	3d 8f       	std	Y+29, r19	; 0x1d
    1414:	4e 8f       	std	Y+30, r20	; 0x1e
    1416:	5f 8f       	std	Y+31, r21	; 0x1f
	
	if (Timer_Top == 0) return TIMER_FAULT;
    1418:	8c 8d       	ldd	r24, Y+28	; 0x1c
    141a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    141c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    141e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1420:	89 2b       	or	r24, r25
    1422:	8a 2b       	or	r24, r26
    1424:	8b 2b       	or	r24, r27
    1426:	11 f4       	brne	.+4      	; 0x142c <Configure_Timer+0x6b0>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	89 c0       	rjmp	.+274    	; 0x153e <Configure_Timer+0x7c2>

	if( (Selected_Timer == _8_bit1 || Selected_Timer == _8_bit2) && Timer_Top > 255 ){
    142c:	89 a9       	ldd	r24, Y+49	; 0x31
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	19 f0       	breq	.+6      	; 0x1438 <Configure_Timer+0x6bc>
    1432:	89 a9       	ldd	r24, Y+49	; 0x31
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	61 f4       	brne	.+24     	; 0x1450 <Configure_Timer+0x6d4>
    1438:	8c 8d       	ldd	r24, Y+28	; 0x1c
    143a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    143c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    143e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1440:	8f 3f       	cpi	r24, 0xFF	; 255
    1442:	91 05       	cpc	r25, r1
    1444:	a1 05       	cpc	r26, r1
    1446:	b1 05       	cpc	r27, r1
    1448:	19 f0       	breq	.+6      	; 0x1450 <Configure_Timer+0x6d4>
    144a:	10 f0       	brcs	.+4      	; 0x1450 <Configure_Timer+0x6d4>
		
		return TIMER_FAULT; 
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	77 c0       	rjmp	.+238    	; 0x153e <Configure_Timer+0x7c2>
		
	}else if(Selected_Timer == _16_bit && Timer_Top > 65535){
    1450:	89 a9       	ldd	r24, Y+49	; 0x31
    1452:	88 23       	and	r24, r24
    1454:	51 f4       	brne	.+20     	; 0x146a <Configure_Timer+0x6ee>
    1456:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1458:	9d 8d       	ldd	r25, Y+29	; 0x1d
    145a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    145c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	a1 40       	sbci	r26, 0x01	; 1
    1462:	b1 05       	cpc	r27, r1
    1464:	10 f0       	brcs	.+4      	; 0x146a <Configure_Timer+0x6ee>
		
		return TIMER_FAULT;
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	6a c0       	rjmp	.+212    	; 0x153e <Configure_Timer+0x7c2>
		
	}
	
	Timer_Status Status = Set_Prescaler(Selected_Timer, Prescaler);
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	bc 01       	movw	r22, r24
    1470:	89 a9       	ldd	r24, Y+49	; 0x31
    1472:	0e 94 c3 05 	call	0xb86	; 0xb86 <Set_Prescaler>
    1476:	88 a3       	std	Y+32, r24	; 0x20
	
	if(Status == TIMER_FAULT){
    1478:	88 a1       	ldd	r24, Y+32	; 0x20
    147a:	88 23       	and	r24, r24
    147c:	11 f4       	brne	.+4      	; 0x1482 <Configure_Timer+0x706>
		return TIMER_FAULT;
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	5e c0       	rjmp	.+188    	; 0x153e <Configure_Timer+0x7c2>
	}
	
	switch(Selected_Timer){
    1482:	89 a9       	ldd	r24, Y+49	; 0x31
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	49 f1       	breq	.+82     	; 0x14e0 <Configure_Timer+0x764>
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	91 05       	cpc	r25, r1
    1492:	e9 f1       	breq	.+122    	; 0x150e <Configure_Timer+0x792>
    1494:	89 2b       	or	r24, r25
    1496:	09 f0       	breq	.+2      	; 0x149a <Configure_Timer+0x71e>
    1498:	51 c0       	rjmp	.+162    	; 0x153c <Configure_Timer+0x7c0>
		
		case _16_bit:
				
			Modes[_16_bit] = TIMER_CTC;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Modes>
				
			TCCR1B |= (1 << WGM12); 
    14a0:	81 e8       	ldi	r24, 0x81	; 129
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	21 e8       	ldi	r18, 0x81	; 129
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	f9 01       	movw	r30, r18
    14aa:	20 81       	ld	r18, Z
    14ac:	28 60       	ori	r18, 0x08	; 8
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 83       	st	Z, r18
			
			OCR1AH = (Timer_Top >> 8) & 0xFF;
    14b2:	29 e8       	ldi	r18, 0x89	; 137
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14ba:	ae 8d       	ldd	r26, Y+30	; 0x1e
    14bc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    14be:	89 2f       	mov	r24, r25
    14c0:	9a 2f       	mov	r25, r26
    14c2:	ab 2f       	mov	r26, r27
    14c4:	bb 27       	eor	r27, r27
    14c6:	f9 01       	movw	r30, r18
    14c8:	80 83       	st	Z, r24
			TIMSK1 = (1 << OCIE1A); // Timer/Counter1 Interrupt Mask Register -> Enabled interrupt for progrm at TIMER1_COMPA_vect to be executed on compare match
    14ca:	8f e6       	ldi	r24, 0x6F	; 111
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	22 e0       	ldi	r18, 0x02	; 2
    14d0:	fc 01       	movw	r30, r24
    14d2:	20 83       	st	Z, r18
			OCR1AL = (Timer_Top & 0xFF); // Timer begins
    14d4:	88 e8       	ldi	r24, 0x88	; 136
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18
			
				
			break;
    14de:	2e c0       	rjmp	.+92     	; 0x153c <Configure_Timer+0x7c0>
			
		case _8_bit1:
			
			Modes[_8_bit1] = TIMER_CTC;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Modes+0x1>

			TCCR0A |= (1 << WGM01); 	
    14e6:	84 e4       	ldi	r24, 0x44	; 68
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	24 e4       	ldi	r18, 0x44	; 68
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	f9 01       	movw	r30, r18
    14f0:	20 81       	ld	r18, Z
    14f2:	22 60       	ori	r18, 0x02	; 2
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
			
			TIMSK0 = (1 << OCIE0A);
    14f8:	8e e6       	ldi	r24, 0x6E	; 110
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	22 e0       	ldi	r18, 0x02	; 2
    14fe:	fc 01       	movw	r30, r24
    1500:	20 83       	st	Z, r18
			OCR0A = Timer_Top;		
    1502:	87 e4       	ldi	r24, 0x47	; 71
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
		
			break;
    150c:	17 c0       	rjmp	.+46     	; 0x153c <Configure_Timer+0x7c0>
			
		case _8_bit2:
			
			Modes[_8_bit2] = TIMER_CTC;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Modes+0x2>

			TCCR2A |= (1 << WGM21);		
    1514:	80 eb       	ldi	r24, 0xB0	; 176
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	20 eb       	ldi	r18, 0xB0	; 176
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	f9 01       	movw	r30, r18
    151e:	20 81       	ld	r18, Z
    1520:	22 60       	ori	r18, 0x02	; 2
    1522:	fc 01       	movw	r30, r24
    1524:	20 83       	st	Z, r18
			
			TIMSK2 = (1 << OCIE2A);
    1526:	80 e7       	ldi	r24, 0x70	; 112
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	22 e0       	ldi	r18, 0x02	; 2
    152c:	fc 01       	movw	r30, r24
    152e:	20 83       	st	Z, r18
			OCR2A = Timer_Top; 
    1530:	83 eb       	ldi	r24, 0xB3	; 179
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1536:	fc 01       	movw	r30, r24
    1538:	20 83       	st	Z, r18
		
			break;
    153a:	00 00       	nop
				
	}
	
	return TIMER_OK;
    153c:	81 e0       	ldi	r24, 0x01	; 1

}
    153e:	e1 96       	adiw	r28, 0x31	; 49
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	ff 90       	pop	r15
    1554:	ef 90       	pop	r14
    1556:	df 90       	pop	r13
    1558:	cf 90       	pop	r12
    155a:	bf 90       	pop	r11
    155c:	af 90       	pop	r10
    155e:	9f 90       	pop	r9
    1560:	8f 90       	pop	r8
    1562:	7f 90       	pop	r7
    1564:	6f 90       	pop	r6
    1566:	5f 90       	pop	r5
    1568:	4f 90       	pop	r4
    156a:	3f 90       	pop	r3
    156c:	2f 90       	pop	r2
    156e:	08 95       	ret

00001570 <__mulsi3>:
    1570:	db 01       	movw	r26, r22
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__muluhisi3>
    157a:	bf 91       	pop	r27
    157c:	af 91       	pop	r26
    157e:	a2 9f       	mul	r26, r18
    1580:	80 0d       	add	r24, r0
    1582:	91 1d       	adc	r25, r1
    1584:	a3 9f       	mul	r26, r19
    1586:	90 0d       	add	r25, r0
    1588:	b2 9f       	mul	r27, r18
    158a:	90 0d       	add	r25, r0
    158c:	11 24       	eor	r1, r1
    158e:	08 95       	ret

00001590 <__muluhisi3>:
    1590:	0e 94 c7 0b 	call	0x178e	; 0x178e <__umulhisi3>
    1594:	a5 9f       	mul	r26, r21
    1596:	90 0d       	add	r25, r0
    1598:	b4 9f       	mul	r27, r20
    159a:	90 0d       	add	r25, r0
    159c:	a4 9f       	mul	r26, r20
    159e:	80 0d       	add	r24, r0
    15a0:	91 1d       	adc	r25, r1
    15a2:	11 24       	eor	r1, r1
    15a4:	08 95       	ret

000015a6 <__muldi3>:
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	1f 93       	push	r17
    15ac:	0f 93       	push	r16
    15ae:	9a 9d       	mul	r25, r10
    15b0:	f0 2d       	mov	r31, r0
    15b2:	21 9f       	mul	r18, r17
    15b4:	f0 0d       	add	r31, r0
    15b6:	8b 9d       	mul	r24, r11
    15b8:	f0 0d       	add	r31, r0
    15ba:	8a 9d       	mul	r24, r10
    15bc:	e0 2d       	mov	r30, r0
    15be:	f1 0d       	add	r31, r1
    15c0:	03 9f       	mul	r16, r19
    15c2:	f0 0d       	add	r31, r0
    15c4:	02 9f       	mul	r16, r18
    15c6:	e0 0d       	add	r30, r0
    15c8:	f1 1d       	adc	r31, r1
    15ca:	4e 9d       	mul	r20, r14
    15cc:	e0 0d       	add	r30, r0
    15ce:	f1 1d       	adc	r31, r1
    15d0:	5e 9d       	mul	r21, r14
    15d2:	f0 0d       	add	r31, r0
    15d4:	4f 9d       	mul	r20, r15
    15d6:	f0 0d       	add	r31, r0
    15d8:	7f 93       	push	r23
    15da:	6f 93       	push	r22
    15dc:	bf 92       	push	r11
    15de:	af 92       	push	r10
    15e0:	5f 93       	push	r21
    15e2:	4f 93       	push	r20
    15e4:	d5 01       	movw	r26, r10
    15e6:	0e 94 c7 0b 	call	0x178e	; 0x178e <__umulhisi3>
    15ea:	8b 01       	movw	r16, r22
    15ec:	ac 01       	movw	r20, r24
    15ee:	d7 01       	movw	r26, r14
    15f0:	0e 94 c7 0b 	call	0x178e	; 0x178e <__umulhisi3>
    15f4:	eb 01       	movw	r28, r22
    15f6:	e8 0f       	add	r30, r24
    15f8:	f9 1f       	adc	r31, r25
    15fa:	d6 01       	movw	r26, r12
    15fc:	0e 94 23 0b 	call	0x1646	; 0x1646 <__muldi3_6>
    1600:	2f 91       	pop	r18
    1602:	3f 91       	pop	r19
    1604:	d6 01       	movw	r26, r12
    1606:	0e 94 c7 0b 	call	0x178e	; 0x178e <__umulhisi3>
    160a:	c6 0f       	add	r28, r22
    160c:	d7 1f       	adc	r29, r23
    160e:	e8 1f       	adc	r30, r24
    1610:	f9 1f       	adc	r31, r25
    1612:	af 91       	pop	r26
    1614:	bf 91       	pop	r27
    1616:	0e 94 23 0b 	call	0x1646	; 0x1646 <__muldi3_6>
    161a:	2f 91       	pop	r18
    161c:	3f 91       	pop	r19
    161e:	0e 94 c7 0b 	call	0x178e	; 0x178e <__umulhisi3>
    1622:	c6 0f       	add	r28, r22
    1624:	d7 1f       	adc	r29, r23
    1626:	e8 1f       	adc	r30, r24
    1628:	f9 1f       	adc	r31, r25
    162a:	d6 01       	movw	r26, r12
    162c:	0e 94 c7 0b 	call	0x178e	; 0x178e <__umulhisi3>
    1630:	e6 0f       	add	r30, r22
    1632:	f7 1f       	adc	r31, r23
    1634:	98 01       	movw	r18, r16
    1636:	be 01       	movw	r22, r28
    1638:	cf 01       	movw	r24, r30
    163a:	11 24       	eor	r1, r1
    163c:	0f 91       	pop	r16
    163e:	1f 91       	pop	r17
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <__muldi3_6>:
    1646:	0e 94 c7 0b 	call	0x178e	; 0x178e <__umulhisi3>
    164a:	46 0f       	add	r20, r22
    164c:	57 1f       	adc	r21, r23
    164e:	c8 1f       	adc	r28, r24
    1650:	d9 1f       	adc	r29, r25
    1652:	08 f4       	brcc	.+2      	; 0x1656 <__muldi3_6+0x10>
    1654:	31 96       	adiw	r30, 0x01	; 1
    1656:	08 95       	ret

00001658 <__umoddi3>:
    1658:	68 94       	set
    165a:	01 c0       	rjmp	.+2      	; 0x165e <__udivdi3_umoddi3>

0000165c <__udivdi3>:
    165c:	e8 94       	clt

0000165e <__udivdi3_umoddi3>:
    165e:	8f 92       	push	r8
    1660:	9f 92       	push	r9
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__udivmod64>
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	9f 90       	pop	r9
    1670:	8f 90       	pop	r8
    1672:	08 95       	ret

00001674 <__udivmod64>:
    1674:	88 24       	eor	r8, r8
    1676:	99 24       	eor	r9, r9
    1678:	f4 01       	movw	r30, r8
    167a:	e4 01       	movw	r28, r8
    167c:	b0 e4       	ldi	r27, 0x40	; 64
    167e:	9f 93       	push	r25
    1680:	aa 27       	eor	r26, r26
    1682:	9a 15       	cp	r25, r10
    1684:	8b 04       	cpc	r8, r11
    1686:	9c 04       	cpc	r9, r12
    1688:	ed 05       	cpc	r30, r13
    168a:	fe 05       	cpc	r31, r14
    168c:	cf 05       	cpc	r28, r15
    168e:	d0 07       	cpc	r29, r16
    1690:	a1 07       	cpc	r26, r17
    1692:	98 f4       	brcc	.+38     	; 0x16ba <__udivmod64+0x46>
    1694:	ad 2f       	mov	r26, r29
    1696:	dc 2f       	mov	r29, r28
    1698:	cf 2f       	mov	r28, r31
    169a:	fe 2f       	mov	r31, r30
    169c:	e9 2d       	mov	r30, r9
    169e:	98 2c       	mov	r9, r8
    16a0:	89 2e       	mov	r8, r25
    16a2:	98 2f       	mov	r25, r24
    16a4:	87 2f       	mov	r24, r23
    16a6:	76 2f       	mov	r23, r22
    16a8:	65 2f       	mov	r22, r21
    16aa:	54 2f       	mov	r21, r20
    16ac:	43 2f       	mov	r20, r19
    16ae:	32 2f       	mov	r19, r18
    16b0:	22 27       	eor	r18, r18
    16b2:	b8 50       	subi	r27, 0x08	; 8
    16b4:	31 f7       	brne	.-52     	; 0x1682 <__udivmod64+0xe>
    16b6:	bf 91       	pop	r27
    16b8:	27 c0       	rjmp	.+78     	; 0x1708 <__udivmod64+0x94>
    16ba:	1b 2e       	mov	r1, r27
    16bc:	bf 91       	pop	r27
    16be:	bb 27       	eor	r27, r27
    16c0:	22 0f       	add	r18, r18
    16c2:	33 1f       	adc	r19, r19
    16c4:	44 1f       	adc	r20, r20
    16c6:	55 1f       	adc	r21, r21
    16c8:	66 1f       	adc	r22, r22
    16ca:	77 1f       	adc	r23, r23
    16cc:	88 1f       	adc	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	88 1c       	adc	r8, r8
    16d2:	99 1c       	adc	r9, r9
    16d4:	ee 1f       	adc	r30, r30
    16d6:	ff 1f       	adc	r31, r31
    16d8:	cc 1f       	adc	r28, r28
    16da:	dd 1f       	adc	r29, r29
    16dc:	aa 1f       	adc	r26, r26
    16de:	bb 1f       	adc	r27, r27
    16e0:	8a 14       	cp	r8, r10
    16e2:	9b 04       	cpc	r9, r11
    16e4:	ec 05       	cpc	r30, r12
    16e6:	fd 05       	cpc	r31, r13
    16e8:	ce 05       	cpc	r28, r14
    16ea:	df 05       	cpc	r29, r15
    16ec:	a0 07       	cpc	r26, r16
    16ee:	b1 07       	cpc	r27, r17
    16f0:	48 f0       	brcs	.+18     	; 0x1704 <__udivmod64+0x90>
    16f2:	8a 18       	sub	r8, r10
    16f4:	9b 08       	sbc	r9, r11
    16f6:	ec 09       	sbc	r30, r12
    16f8:	fd 09       	sbc	r31, r13
    16fa:	ce 09       	sbc	r28, r14
    16fc:	df 09       	sbc	r29, r15
    16fe:	a0 0b       	sbc	r26, r16
    1700:	b1 0b       	sbc	r27, r17
    1702:	21 60       	ori	r18, 0x01	; 1
    1704:	1a 94       	dec	r1
    1706:	e1 f6       	brne	.-72     	; 0x16c0 <__udivmod64+0x4c>
    1708:	2e f4       	brtc	.+10     	; 0x1714 <__udivmod64+0xa0>
    170a:	94 01       	movw	r18, r8
    170c:	af 01       	movw	r20, r30
    170e:	be 01       	movw	r22, r28
    1710:	cd 01       	movw	r24, r26
    1712:	00 0c       	add	r0, r0
    1714:	08 95       	ret

00001716 <__ashrdi3>:
    1716:	97 fb       	bst	r25, 7
    1718:	10 f8       	bld	r1, 0

0000171a <__lshrdi3>:
    171a:	16 94       	lsr	r1
    171c:	00 08       	sbc	r0, r0
    171e:	0f 93       	push	r16
    1720:	08 30       	cpi	r16, 0x08	; 8
    1722:	98 f0       	brcs	.+38     	; 0x174a <__lshrdi3+0x30>
    1724:	08 50       	subi	r16, 0x08	; 8
    1726:	23 2f       	mov	r18, r19
    1728:	34 2f       	mov	r19, r20
    172a:	45 2f       	mov	r20, r21
    172c:	56 2f       	mov	r21, r22
    172e:	67 2f       	mov	r22, r23
    1730:	78 2f       	mov	r23, r24
    1732:	89 2f       	mov	r24, r25
    1734:	90 2d       	mov	r25, r0
    1736:	f4 cf       	rjmp	.-24     	; 0x1720 <__lshrdi3+0x6>
    1738:	05 94       	asr	r0
    173a:	97 95       	ror	r25
    173c:	87 95       	ror	r24
    173e:	77 95       	ror	r23
    1740:	67 95       	ror	r22
    1742:	57 95       	ror	r21
    1744:	47 95       	ror	r20
    1746:	37 95       	ror	r19
    1748:	27 95       	ror	r18
    174a:	0a 95       	dec	r16
    174c:	aa f7       	brpl	.-22     	; 0x1738 <__lshrdi3+0x1e>
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret

00001752 <__adddi3>:
    1752:	2a 0d       	add	r18, r10
    1754:	3b 1d       	adc	r19, r11
    1756:	4c 1d       	adc	r20, r12
    1758:	5d 1d       	adc	r21, r13
    175a:	6e 1d       	adc	r22, r14
    175c:	7f 1d       	adc	r23, r15
    175e:	80 1f       	adc	r24, r16
    1760:	91 1f       	adc	r25, r17
    1762:	08 95       	ret

00001764 <__adddi3_s8>:
    1764:	00 24       	eor	r0, r0
    1766:	a7 fd       	sbrc	r26, 7
    1768:	00 94       	com	r0
    176a:	2a 0f       	add	r18, r26
    176c:	30 1d       	adc	r19, r0
    176e:	40 1d       	adc	r20, r0
    1770:	50 1d       	adc	r21, r0
    1772:	60 1d       	adc	r22, r0
    1774:	70 1d       	adc	r23, r0
    1776:	80 1d       	adc	r24, r0
    1778:	90 1d       	adc	r25, r0
    177a:	08 95       	ret

0000177c <__cmpdi2>:
    177c:	2a 15       	cp	r18, r10
    177e:	3b 05       	cpc	r19, r11
    1780:	4c 05       	cpc	r20, r12
    1782:	5d 05       	cpc	r21, r13
    1784:	6e 05       	cpc	r22, r14
    1786:	7f 05       	cpc	r23, r15
    1788:	80 07       	cpc	r24, r16
    178a:	91 07       	cpc	r25, r17
    178c:	08 95       	ret

0000178e <__umulhisi3>:
    178e:	a2 9f       	mul	r26, r18
    1790:	b0 01       	movw	r22, r0
    1792:	b3 9f       	mul	r27, r19
    1794:	c0 01       	movw	r24, r0
    1796:	a3 9f       	mul	r26, r19
    1798:	70 0d       	add	r23, r0
    179a:	81 1d       	adc	r24, r1
    179c:	11 24       	eor	r1, r1
    179e:	91 1d       	adc	r25, r1
    17a0:	b2 9f       	mul	r27, r18
    17a2:	70 0d       	add	r23, r0
    17a4:	81 1d       	adc	r24, r1
    17a6:	11 24       	eor	r1, r1
    17a8:	91 1d       	adc	r25, r1
    17aa:	08 95       	ret

000017ac <malloc>:
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	91 05       	cpc	r25, r1
    17b8:	10 f4       	brcc	.+4      	; 0x17be <malloc+0x12>
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <__flp>
    17c2:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <__flp+0x1>
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	30 97       	sbiw	r30, 0x00	; 0
    17d0:	19 f1       	breq	.+70     	; 0x1818 <malloc+0x6c>
    17d2:	40 81       	ld	r20, Z
    17d4:	51 81       	ldd	r21, Z+1	; 0x01
    17d6:	02 81       	ldd	r16, Z+2	; 0x02
    17d8:	13 81       	ldd	r17, Z+3	; 0x03
    17da:	48 17       	cp	r20, r24
    17dc:	59 07       	cpc	r21, r25
    17de:	c8 f0       	brcs	.+50     	; 0x1812 <malloc+0x66>
    17e0:	84 17       	cp	r24, r20
    17e2:	95 07       	cpc	r25, r21
    17e4:	69 f4       	brne	.+26     	; 0x1800 <malloc+0x54>
    17e6:	10 97       	sbiw	r26, 0x00	; 0
    17e8:	31 f0       	breq	.+12     	; 0x17f6 <malloc+0x4a>
    17ea:	12 96       	adiw	r26, 0x02	; 2
    17ec:	0c 93       	st	X, r16
    17ee:	12 97       	sbiw	r26, 0x02	; 2
    17f0:	13 96       	adiw	r26, 0x03	; 3
    17f2:	1c 93       	st	X, r17
    17f4:	27 c0       	rjmp	.+78     	; 0x1844 <malloc+0x98>
    17f6:	00 93 53 01 	sts	0x0153, r16	; 0x800153 <__flp>
    17fa:	10 93 54 01 	sts	0x0154, r17	; 0x800154 <__flp+0x1>
    17fe:	22 c0       	rjmp	.+68     	; 0x1844 <malloc+0x98>
    1800:	21 15       	cp	r18, r1
    1802:	31 05       	cpc	r19, r1
    1804:	19 f0       	breq	.+6      	; 0x180c <malloc+0x60>
    1806:	42 17       	cp	r20, r18
    1808:	53 07       	cpc	r21, r19
    180a:	18 f4       	brcc	.+6      	; 0x1812 <malloc+0x66>
    180c:	9a 01       	movw	r18, r20
    180e:	bd 01       	movw	r22, r26
    1810:	ef 01       	movw	r28, r30
    1812:	df 01       	movw	r26, r30
    1814:	f8 01       	movw	r30, r16
    1816:	db cf       	rjmp	.-74     	; 0x17ce <malloc+0x22>
    1818:	21 15       	cp	r18, r1
    181a:	31 05       	cpc	r19, r1
    181c:	f9 f0       	breq	.+62     	; 0x185c <malloc+0xb0>
    181e:	28 1b       	sub	r18, r24
    1820:	39 0b       	sbc	r19, r25
    1822:	24 30       	cpi	r18, 0x04	; 4
    1824:	31 05       	cpc	r19, r1
    1826:	80 f4       	brcc	.+32     	; 0x1848 <malloc+0x9c>
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	61 15       	cp	r22, r1
    182e:	71 05       	cpc	r23, r1
    1830:	21 f0       	breq	.+8      	; 0x183a <malloc+0x8e>
    1832:	fb 01       	movw	r30, r22
    1834:	93 83       	std	Z+3, r25	; 0x03
    1836:	82 83       	std	Z+2, r24	; 0x02
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <malloc+0x96>
    183a:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <__flp+0x1>
    183e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__flp>
    1842:	fe 01       	movw	r30, r28
    1844:	32 96       	adiw	r30, 0x02	; 2
    1846:	44 c0       	rjmp	.+136    	; 0x18d0 <malloc+0x124>
    1848:	fe 01       	movw	r30, r28
    184a:	e2 0f       	add	r30, r18
    184c:	f3 1f       	adc	r31, r19
    184e:	81 93       	st	Z+, r24
    1850:	91 93       	st	Z+, r25
    1852:	22 50       	subi	r18, 0x02	; 2
    1854:	31 09       	sbc	r19, r1
    1856:	39 83       	std	Y+1, r19	; 0x01
    1858:	28 83       	st	Y, r18
    185a:	3a c0       	rjmp	.+116    	; 0x18d0 <malloc+0x124>
    185c:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <__brkval>
    1860:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <__brkval+0x1>
    1864:	23 2b       	or	r18, r19
    1866:	41 f4       	brne	.+16     	; 0x1878 <malloc+0xcc>
    1868:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    186c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1870:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <__brkval+0x1>
    1874:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <__brkval>
    1878:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    187c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1880:	21 15       	cp	r18, r1
    1882:	31 05       	cpc	r19, r1
    1884:	41 f4       	brne	.+16     	; 0x1896 <malloc+0xea>
    1886:	2d b7       	in	r18, 0x3d	; 61
    1888:	3e b7       	in	r19, 0x3e	; 62
    188a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    188e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1892:	24 1b       	sub	r18, r20
    1894:	35 0b       	sbc	r19, r21
    1896:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <__brkval>
    189a:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <__brkval+0x1>
    189e:	e2 17       	cp	r30, r18
    18a0:	f3 07       	cpc	r31, r19
    18a2:	a0 f4       	brcc	.+40     	; 0x18cc <malloc+0x120>
    18a4:	2e 1b       	sub	r18, r30
    18a6:	3f 0b       	sbc	r19, r31
    18a8:	28 17       	cp	r18, r24
    18aa:	39 07       	cpc	r19, r25
    18ac:	78 f0       	brcs	.+30     	; 0x18cc <malloc+0x120>
    18ae:	ac 01       	movw	r20, r24
    18b0:	4e 5f       	subi	r20, 0xFE	; 254
    18b2:	5f 4f       	sbci	r21, 0xFF	; 255
    18b4:	24 17       	cp	r18, r20
    18b6:	35 07       	cpc	r19, r21
    18b8:	48 f0       	brcs	.+18     	; 0x18cc <malloc+0x120>
    18ba:	4e 0f       	add	r20, r30
    18bc:	5f 1f       	adc	r21, r31
    18be:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <__brkval+0x1>
    18c2:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <__brkval>
    18c6:	81 93       	st	Z+, r24
    18c8:	91 93       	st	Z+, r25
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <malloc+0x124>
    18cc:	e0 e0       	ldi	r30, 0x00	; 0
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	cf 01       	movw	r24, r30
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	08 95       	ret

000018dc <free>:
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <free+0xa>
    18e4:	81 c0       	rjmp	.+258    	; 0x19e8 <free+0x10c>
    18e6:	fc 01       	movw	r30, r24
    18e8:	32 97       	sbiw	r30, 0x02	; 2
    18ea:	13 82       	std	Z+3, r1	; 0x03
    18ec:	12 82       	std	Z+2, r1	; 0x02
    18ee:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <__flp>
    18f2:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <__flp+0x1>
    18f6:	10 97       	sbiw	r26, 0x00	; 0
    18f8:	81 f4       	brne	.+32     	; 0x191a <free+0x3e>
    18fa:	20 81       	ld	r18, Z
    18fc:	31 81       	ldd	r19, Z+1	; 0x01
    18fe:	82 0f       	add	r24, r18
    1900:	93 1f       	adc	r25, r19
    1902:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <__brkval>
    1906:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <__brkval+0x1>
    190a:	28 17       	cp	r18, r24
    190c:	39 07       	cpc	r19, r25
    190e:	51 f5       	brne	.+84     	; 0x1964 <free+0x88>
    1910:	f0 93 52 01 	sts	0x0152, r31	; 0x800152 <__brkval+0x1>
    1914:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <__brkval>
    1918:	67 c0       	rjmp	.+206    	; 0x19e8 <free+0x10c>
    191a:	ed 01       	movw	r28, r26
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	ce 17       	cp	r28, r30
    1922:	df 07       	cpc	r29, r31
    1924:	40 f4       	brcc	.+16     	; 0x1936 <free+0x5a>
    1926:	4a 81       	ldd	r20, Y+2	; 0x02
    1928:	5b 81       	ldd	r21, Y+3	; 0x03
    192a:	9e 01       	movw	r18, r28
    192c:	41 15       	cp	r20, r1
    192e:	51 05       	cpc	r21, r1
    1930:	f1 f0       	breq	.+60     	; 0x196e <free+0x92>
    1932:	ea 01       	movw	r28, r20
    1934:	f5 cf       	rjmp	.-22     	; 0x1920 <free+0x44>
    1936:	d3 83       	std	Z+3, r29	; 0x03
    1938:	c2 83       	std	Z+2, r28	; 0x02
    193a:	40 81       	ld	r20, Z
    193c:	51 81       	ldd	r21, Z+1	; 0x01
    193e:	84 0f       	add	r24, r20
    1940:	95 1f       	adc	r25, r21
    1942:	c8 17       	cp	r28, r24
    1944:	d9 07       	cpc	r29, r25
    1946:	59 f4       	brne	.+22     	; 0x195e <free+0x82>
    1948:	88 81       	ld	r24, Y
    194a:	99 81       	ldd	r25, Y+1	; 0x01
    194c:	84 0f       	add	r24, r20
    194e:	95 1f       	adc	r25, r21
    1950:	02 96       	adiw	r24, 0x02	; 2
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	93 83       	std	Z+3, r25	; 0x03
    195c:	82 83       	std	Z+2, r24	; 0x02
    195e:	21 15       	cp	r18, r1
    1960:	31 05       	cpc	r19, r1
    1962:	29 f4       	brne	.+10     	; 0x196e <free+0x92>
    1964:	f0 93 54 01 	sts	0x0154, r31	; 0x800154 <__flp+0x1>
    1968:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <__flp>
    196c:	3d c0       	rjmp	.+122    	; 0x19e8 <free+0x10c>
    196e:	e9 01       	movw	r28, r18
    1970:	fb 83       	std	Y+3, r31	; 0x03
    1972:	ea 83       	std	Y+2, r30	; 0x02
    1974:	49 91       	ld	r20, Y+
    1976:	59 91       	ld	r21, Y+
    1978:	c4 0f       	add	r28, r20
    197a:	d5 1f       	adc	r29, r21
    197c:	ec 17       	cp	r30, r28
    197e:	fd 07       	cpc	r31, r29
    1980:	61 f4       	brne	.+24     	; 0x199a <free+0xbe>
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	84 0f       	add	r24, r20
    1988:	95 1f       	adc	r25, r21
    198a:	02 96       	adiw	r24, 0x02	; 2
    198c:	e9 01       	movw	r28, r18
    198e:	99 83       	std	Y+1, r25	; 0x01
    1990:	88 83       	st	Y, r24
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	9b 83       	std	Y+3, r25	; 0x03
    1998:	8a 83       	std	Y+2, r24	; 0x02
    199a:	e0 e0       	ldi	r30, 0x00	; 0
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	12 96       	adiw	r26, 0x02	; 2
    19a0:	8d 91       	ld	r24, X+
    19a2:	9c 91       	ld	r25, X
    19a4:	13 97       	sbiw	r26, 0x03	; 3
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <free+0xd4>
    19aa:	fd 01       	movw	r30, r26
    19ac:	dc 01       	movw	r26, r24
    19ae:	f7 cf       	rjmp	.-18     	; 0x199e <free+0xc2>
    19b0:	8d 91       	ld	r24, X+
    19b2:	9c 91       	ld	r25, X
    19b4:	11 97       	sbiw	r26, 0x01	; 1
    19b6:	9d 01       	movw	r18, r26
    19b8:	2e 5f       	subi	r18, 0xFE	; 254
    19ba:	3f 4f       	sbci	r19, 0xFF	; 255
    19bc:	82 0f       	add	r24, r18
    19be:	93 1f       	adc	r25, r19
    19c0:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <__brkval>
    19c4:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <__brkval+0x1>
    19c8:	28 17       	cp	r18, r24
    19ca:	39 07       	cpc	r19, r25
    19cc:	69 f4       	brne	.+26     	; 0x19e8 <free+0x10c>
    19ce:	30 97       	sbiw	r30, 0x00	; 0
    19d0:	29 f4       	brne	.+10     	; 0x19dc <free+0x100>
    19d2:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__flp+0x1>
    19d6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__flp>
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <free+0x104>
    19dc:	13 82       	std	Z+3, r1	; 0x03
    19de:	12 82       	std	Z+2, r1	; 0x02
    19e0:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <__brkval+0x1>
    19e4:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <__brkval>
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	08 95       	ret

000019ee <realloc>:
    19ee:	a0 e0       	ldi	r26, 0x00	; 0
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ed ef       	ldi	r30, 0xFD	; 253
    19f4:	fc e0       	ldi	r31, 0x0C	; 12
    19f6:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__prologue_saves__+0x8>
    19fa:	ec 01       	movw	r28, r24
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	21 f4       	brne	.+8      	; 0x1a08 <realloc+0x1a>
    1a00:	cb 01       	movw	r24, r22
    1a02:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <malloc>
    1a06:	b4 c0       	rjmp	.+360    	; 0x1b70 <realloc+0x182>
    1a08:	fc 01       	movw	r30, r24
    1a0a:	e6 0f       	add	r30, r22
    1a0c:	f7 1f       	adc	r31, r23
    1a0e:	9c 01       	movw	r18, r24
    1a10:	22 50       	subi	r18, 0x02	; 2
    1a12:	31 09       	sbc	r19, r1
    1a14:	e2 17       	cp	r30, r18
    1a16:	f3 07       	cpc	r31, r19
    1a18:	08 f4       	brcc	.+2      	; 0x1a1c <realloc+0x2e>
    1a1a:	a8 c0       	rjmp	.+336    	; 0x1b6c <realloc+0x17e>
    1a1c:	d9 01       	movw	r26, r18
    1a1e:	0d 91       	ld	r16, X+
    1a20:	1c 91       	ld	r17, X
    1a22:	11 97       	sbiw	r26, 0x01	; 1
    1a24:	06 17       	cp	r16, r22
    1a26:	17 07       	cpc	r17, r23
    1a28:	b0 f0       	brcs	.+44     	; 0x1a56 <realloc+0x68>
    1a2a:	05 30       	cpi	r16, 0x05	; 5
    1a2c:	11 05       	cpc	r17, r1
    1a2e:	08 f4       	brcc	.+2      	; 0x1a32 <realloc+0x44>
    1a30:	9b c0       	rjmp	.+310    	; 0x1b68 <realloc+0x17a>
    1a32:	c8 01       	movw	r24, r16
    1a34:	04 97       	sbiw	r24, 0x04	; 4
    1a36:	86 17       	cp	r24, r22
    1a38:	97 07       	cpc	r25, r23
    1a3a:	08 f4       	brcc	.+2      	; 0x1a3e <realloc+0x50>
    1a3c:	95 c0       	rjmp	.+298    	; 0x1b68 <realloc+0x17a>
    1a3e:	02 50       	subi	r16, 0x02	; 2
    1a40:	11 09       	sbc	r17, r1
    1a42:	06 1b       	sub	r16, r22
    1a44:	17 0b       	sbc	r17, r23
    1a46:	01 93       	st	Z+, r16
    1a48:	11 93       	st	Z+, r17
    1a4a:	6d 93       	st	X+, r22
    1a4c:	7c 93       	st	X, r23
    1a4e:	cf 01       	movw	r24, r30
    1a50:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <free>
    1a54:	89 c0       	rjmp	.+274    	; 0x1b68 <realloc+0x17a>
    1a56:	5b 01       	movw	r10, r22
    1a58:	a0 1a       	sub	r10, r16
    1a5a:	b1 0a       	sbc	r11, r17
    1a5c:	4c 01       	movw	r8, r24
    1a5e:	80 0e       	add	r8, r16
    1a60:	91 1e       	adc	r9, r17
    1a62:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <__flp>
    1a66:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <__flp+0x1>
    1a6a:	61 2c       	mov	r6, r1
    1a6c:	71 2c       	mov	r7, r1
    1a6e:	e1 2c       	mov	r14, r1
    1a70:	f1 2c       	mov	r15, r1
    1a72:	10 97       	sbiw	r26, 0x00	; 0
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <realloc+0x8a>
    1a76:	46 c0       	rjmp	.+140    	; 0x1b04 <realloc+0x116>
    1a78:	8d 91       	ld	r24, X+
    1a7a:	9c 91       	ld	r25, X
    1a7c:	11 97       	sbiw	r26, 0x01	; 1
    1a7e:	a8 15       	cp	r26, r8
    1a80:	b9 05       	cpc	r27, r9
    1a82:	b1 f5       	brne	.+108    	; 0x1af0 <realloc+0x102>
    1a84:	6c 01       	movw	r12, r24
    1a86:	42 e0       	ldi	r20, 0x02	; 2
    1a88:	c4 0e       	add	r12, r20
    1a8a:	d1 1c       	adc	r13, r1
    1a8c:	ca 14       	cp	r12, r10
    1a8e:	db 04       	cpc	r13, r11
    1a90:	78 f1       	brcs	.+94     	; 0x1af0 <realloc+0x102>
    1a92:	4c 01       	movw	r8, r24
    1a94:	8a 18       	sub	r8, r10
    1a96:	9b 08       	sbc	r9, r11
    1a98:	64 01       	movw	r12, r8
    1a9a:	42 e0       	ldi	r20, 0x02	; 2
    1a9c:	c4 0e       	add	r12, r20
    1a9e:	d1 1c       	adc	r13, r1
    1aa0:	12 96       	adiw	r26, 0x02	; 2
    1aa2:	bc 90       	ld	r11, X
    1aa4:	12 97       	sbiw	r26, 0x02	; 2
    1aa6:	13 96       	adiw	r26, 0x03	; 3
    1aa8:	ac 91       	ld	r26, X
    1aaa:	b5 e0       	ldi	r27, 0x05	; 5
    1aac:	cb 16       	cp	r12, r27
    1aae:	d1 04       	cpc	r13, r1
    1ab0:	40 f0       	brcs	.+16     	; 0x1ac2 <realloc+0xd4>
    1ab2:	b2 82       	std	Z+2, r11	; 0x02
    1ab4:	a3 83       	std	Z+3, r26	; 0x03
    1ab6:	91 82       	std	Z+1, r9	; 0x01
    1ab8:	80 82       	st	Z, r8
    1aba:	d9 01       	movw	r26, r18
    1abc:	6d 93       	st	X+, r22
    1abe:	7c 93       	st	X, r23
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <realloc+0xe6>
    1ac2:	0e 5f       	subi	r16, 0xFE	; 254
    1ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac6:	80 0f       	add	r24, r16
    1ac8:	91 1f       	adc	r25, r17
    1aca:	f9 01       	movw	r30, r18
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	80 83       	st	Z, r24
    1ad0:	eb 2d       	mov	r30, r11
    1ad2:	fa 2f       	mov	r31, r26
    1ad4:	e1 14       	cp	r14, r1
    1ad6:	f1 04       	cpc	r15, r1
    1ad8:	31 f0       	breq	.+12     	; 0x1ae6 <realloc+0xf8>
    1ada:	d7 01       	movw	r26, r14
    1adc:	13 96       	adiw	r26, 0x03	; 3
    1ade:	fc 93       	st	X, r31
    1ae0:	ee 93       	st	-X, r30
    1ae2:	12 97       	sbiw	r26, 0x02	; 2
    1ae4:	41 c0       	rjmp	.+130    	; 0x1b68 <realloc+0x17a>
    1ae6:	f0 93 54 01 	sts	0x0154, r31	; 0x800154 <__flp+0x1>
    1aea:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <__flp>
    1aee:	3c c0       	rjmp	.+120    	; 0x1b68 <realloc+0x17a>
    1af0:	68 16       	cp	r6, r24
    1af2:	79 06       	cpc	r7, r25
    1af4:	08 f4       	brcc	.+2      	; 0x1af8 <realloc+0x10a>
    1af6:	3c 01       	movw	r6, r24
    1af8:	7d 01       	movw	r14, r26
    1afa:	12 96       	adiw	r26, 0x02	; 2
    1afc:	0d 90       	ld	r0, X+
    1afe:	bc 91       	ld	r27, X
    1b00:	a0 2d       	mov	r26, r0
    1b02:	b7 cf       	rjmp	.-146    	; 0x1a72 <realloc+0x84>
    1b04:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <__brkval>
    1b08:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <__brkval+0x1>
    1b0c:	88 16       	cp	r8, r24
    1b0e:	99 06       	cpc	r9, r25
    1b10:	e1 f4       	brne	.+56     	; 0x1b4a <realloc+0x15c>
    1b12:	66 16       	cp	r6, r22
    1b14:	77 06       	cpc	r7, r23
    1b16:	c8 f4       	brcc	.+50     	; 0x1b4a <realloc+0x15c>
    1b18:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b1c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	41 f4       	brne	.+16     	; 0x1b34 <realloc+0x146>
    1b24:	8d b7       	in	r24, 0x3d	; 61
    1b26:	9e b7       	in	r25, 0x3e	; 62
    1b28:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1b2c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1b30:	84 1b       	sub	r24, r20
    1b32:	95 0b       	sbc	r25, r21
    1b34:	e8 17       	cp	r30, r24
    1b36:	f9 07       	cpc	r31, r25
    1b38:	c8 f4       	brcc	.+50     	; 0x1b6c <realloc+0x17e>
    1b3a:	f0 93 52 01 	sts	0x0152, r31	; 0x800152 <__brkval+0x1>
    1b3e:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <__brkval>
    1b42:	f9 01       	movw	r30, r18
    1b44:	71 83       	std	Z+1, r23	; 0x01
    1b46:	60 83       	st	Z, r22
    1b48:	0f c0       	rjmp	.+30     	; 0x1b68 <realloc+0x17a>
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <malloc>
    1b50:	7c 01       	movw	r14, r24
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	59 f0       	breq	.+22     	; 0x1b6c <realloc+0x17e>
    1b56:	a8 01       	movw	r20, r16
    1b58:	be 01       	movw	r22, r28
    1b5a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <memcpy>
    1b5e:	ce 01       	movw	r24, r28
    1b60:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <free>
    1b64:	c7 01       	movw	r24, r14
    1b66:	04 c0       	rjmp	.+8      	; 0x1b70 <realloc+0x182>
    1b68:	ce 01       	movw	r24, r28
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <realloc+0x182>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	ee e0       	ldi	r30, 0x0E	; 14
    1b76:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__epilogue_restores__+0x8>

00001b7a <memcpy>:
    1b7a:	fb 01       	movw	r30, r22
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <memcpy+0xa>
    1b80:	01 90       	ld	r0, Z+
    1b82:	0d 92       	st	X+, r0
    1b84:	41 50       	subi	r20, 0x01	; 1
    1b86:	50 40       	sbci	r21, 0x00	; 0
    1b88:	d8 f7       	brcc	.-10     	; 0x1b80 <memcpy+0x6>
    1b8a:	08 95       	ret

00001b8c <__prologue_saves__>:
    1b8c:	2f 92       	push	r2
    1b8e:	3f 92       	push	r3
    1b90:	4f 92       	push	r4
    1b92:	5f 92       	push	r5
    1b94:	6f 92       	push	r6
    1b96:	7f 92       	push	r7
    1b98:	8f 92       	push	r8
    1b9a:	9f 92       	push	r9
    1b9c:	af 92       	push	r10
    1b9e:	bf 92       	push	r11
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	ca 1b       	sub	r28, r26
    1bb6:	db 0b       	sbc	r29, r27
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	09 94       	ijmp

00001bc4 <__epilogue_restores__>:
    1bc4:	2a 88       	ldd	r2, Y+18	; 0x12
    1bc6:	39 88       	ldd	r3, Y+17	; 0x11
    1bc8:	48 88       	ldd	r4, Y+16	; 0x10
    1bca:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bcc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bce:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bd0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bd2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bd4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bd6:	b9 84       	ldd	r11, Y+9	; 0x09
    1bd8:	c8 84       	ldd	r12, Y+8	; 0x08
    1bda:	df 80       	ldd	r13, Y+7	; 0x07
    1bdc:	ee 80       	ldd	r14, Y+6	; 0x06
    1bde:	fd 80       	ldd	r15, Y+5	; 0x05
    1be0:	0c 81       	ldd	r16, Y+4	; 0x04
    1be2:	1b 81       	ldd	r17, Y+3	; 0x03
    1be4:	aa 81       	ldd	r26, Y+2	; 0x02
    1be6:	b9 81       	ldd	r27, Y+1	; 0x01
    1be8:	ce 0f       	add	r28, r30
    1bea:	d1 1d       	adc	r29, r1
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	ed 01       	movw	r28, r26
    1bf8:	08 95       	ret

00001bfa <_exit>:
    1bfa:	f8 94       	cli

00001bfc <__stop_program>:
    1bfc:	ff cf       	rjmp	.-2      	; 0x1bfc <__stop_program>
